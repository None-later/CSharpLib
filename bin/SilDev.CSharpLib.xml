<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SilDev.CSharpLib</name>
    </assembly>
    <members>
        <member name="T:SilDev.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Cmd_Call">
            <summary>
              Looks up a localized string similar to CALL &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Cmd_CallPre">
            <summary>
              Looks up a localized string similar to /C CALL &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Cmd_DeleteDir">
            <summary>
              Looks up a localized string similar to RMDIR /S /Q &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Cmd_DeleteFile">
            <summary>
              Looks up a localized string similar to DEL /F /Q &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Cmd_DeleteForce">
             <summary>
               Looks up a localized string similar to @ECHO OFF
            ROBOCOPY &quot;{0}&quot; &quot;{1}&quot; /MIR
            RMDIR /S /Q &quot;{0}&quot;
            RMDIR /S /Q &quot;{1}&quot;
            EXIT.
             </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Cmd_Script">
             <summary>
               Looks up a localized string similar to @ECHO OFF
            {0}
            EXIT.
             </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Cmd_Terminate">
            <summary>
              Looks up a localized string similar to TASKKILL /F /IM &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Cmd_TerminateJoin">
            <summary>
              Looks up a localized string similar to &quot; &amp;&amp; TASKKILL /F /IM &quot;.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Cmd_WaitForProcThenCmd">
            <summary>
              Looks up a localized string similar to FOR /L %X in (1,0,2) DO (TASKLIST | FIND /I &quot;{0}&quot; &amp; IF ERRORLEVEL 1 ({1} &amp;&amp; EXIT)).
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.Cmd_WaitThenCmd">
            <summary>
              Looks up a localized string similar to PING LOCALHOST -n {0} &gt; NUL &amp;&amp; {1}.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.CmdFile">
            <summary>
              Looks up a localized string similar to cmd.exe.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.CmdPath">
            <summary>
              Looks up a localized string similar to %System%\cmd.exe.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.DimEmptyImage">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.ReferenceDirs">
             <summary>
               Looks up a localized string similar to %CurrentDir%\Bin
            %CurrentDir%\Binaries
            %ApplicationData%\References
            %LocalApplicationData%\References
            %CommonApplicationData%\References
            %CommonProgramFiles%\References
            %ProgramFiles%\References
            %UserProfile%\References
            %MyDocuments%\References
            %MyDocuments%\Visual Studio\References
            %MyDocuments%\Visual Studio 2010\References
            %MyDocuments%\Visual Studio 2012\References
            %MyDocuments%\Visual Studio 2013\References
            %MyDocuments%\Visual Studio 2015\References
            %MyDocuments%\Visual Studio 2017\Refer [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.SearchImage">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.SizeGripImage">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SilDev.Properties.Resources.TempDir">
            <summary>
              Looks up a localized string similar to %TEMP%\tmp-{0}.
            </summary>
        </member>
        <member name="T:SilDev.Forms.ButtonEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.Button"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ButtonEx.Split(System.Windows.Forms.Button,System.Nullable{System.Drawing.Color})">
            <summary>
                <para>
                    Creates a small split button on the right side of this <see cref="T:System.Windows.Forms.Button"/> which is
                    mostly used for drop down menu controls.
                </para>
                <para>
                    Please note that the <see cref="T:System.Windows.Forms.FlatStyle"/> is overwritten to <see cref="F:System.Windows.Forms.FlatStyle.Flat"/>
                    which is required to apply highlight effects.
                </para>
            </summary>
            <param name="button">
                The button to split.
            </param>
            <param name="buttonText">
                The button text color, <see cref="P:System.Drawing.SystemColors.ControlText"/> is used by default.
            </param>
        </member>
        <member name="M:SilDev.Forms.ButtonEx.SplitClickHandler(System.Windows.Forms.Button,System.Windows.Forms.ContextMenuStrip)">
            <summary>
                Represents the method that is used for the <see cref="T:System.Windows.Forms.Button"/> click <see cref="T:System.EventHandler"/>
                that determines whether the split area of this <see cref="T:System.Windows.Forms.Button"/>, which opens the
                specified <see cref="T:System.Windows.Forms.ContextMenuStrip"/> control, is clicked.
            </summary>
            <param name="button">
                The button that contains a splitted area, which is created by <see cref="M:SilDev.Forms.ButtonEx.Split(System.Windows.Forms.Button,System.Nullable{System.Drawing.Color})"/>.
            </param>
            <param name="contextMenuStrip">
                The drop down menu that opens for the splitted area.
            </param>
        </member>
        <member name="T:SilDev.Forms.ColorDialogEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.ColorDialog"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ColorDialogEx.#ctor(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.ColorDialogEx"/> class.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="title">
                The new title of the window.
            </param>
        </member>
        <member name="M:SilDev.Forms.ColorDialogEx.#ctor(System.Drawing.Point,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.ColorDialogEx"/> class.
            </summary>
            <param name="point">
                The new position of the window.
            </param>
            <param name="title">
                The new title of the window.
            </param>
        </member>
        <member name="M:SilDev.Forms.ColorDialogEx.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.ColorDialogEx"/> class.
            </summary>
            <param name="x">
                The new position of the left side of the window.
            </param>
            <param name="y">
                The new position of the top of the window.
            </param>
            <param name="title">
                The new title of the window.
            </param>
        </member>
        <member name="T:SilDev.Forms.ContextMenuStripEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.ContextMenuStrip"/> class.
            </summary>
        </member>
        <member name="T:SilDev.Forms.ContextMenuStripEx.Animations">
            <summary>
                Provides enumerated values of <see cref="T:System.Windows.Forms.ContextMenuStrip"/> animations.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripEx.Animations.Default">
            <summary>
                Smooth fade in animation.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripEx.Animations.Blend">
            <summary>
                Fade in animation.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripEx.Animations.Center">
            <summary>
                Makes the <see cref="T:System.Windows.Forms.ContextMenuStrip"/> appear to collapse inward.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripEx.Animations.SlideHorPositive">
            <summary>
                Slide animation from left to right.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripEx.Animations.SlideHorNegative">
            <summary>
                Slide animation from right to left.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripEx.Animations.SlideVerPositive">
            <summary>
                Slide animation from top to bottom.
            </summary>
        </member>
        <member name="F:SilDev.Forms.ContextMenuStripEx.Animations.SlideVerNegative">
            <summary>
                Slide animation from bottom to top.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ContextMenuStripEx.CloseOnMouseLeave(System.Windows.Forms.ContextMenuStrip,System.Int32)">
            <summary>
                Closes this <see cref="T:System.Windows.Forms.ContextMenuStrip"/> when the mouse cursor leaves it.
            </summary>
            <param name="contextMenuStrip">
                The <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.
            </param>
            <param name="toleration">
                The toleration in pixel.
            </param>
        </member>
        <member name="M:SilDev.Forms.ContextMenuStripEx.EnableAnimation(System.Windows.Forms.ContextMenuStrip,SilDev.Forms.ContextMenuStripEx.Animations,System.Int32)">
            <summary>
                Enables you to produce special effects when showing this <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.
            </summary>
            <param name="contextMenuStrip">
                The <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.
            </param>
            <param name="animation">
                The type of animation.
            </param>
            <param name="time">
                <para>
                    The time it takes to play the animation, in milliseconds.
                </para>
                <para>
                    Please note that this parameter is ignored if the animation is set to
                    <see cref="F:SilDev.Forms.ContextMenuStripEx.Animations.Default"/>.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Forms.ContextMenuStripEx.SetFixedSingle(System.Windows.Forms.ContextMenuStrip,System.Nullable{System.Drawing.Color})">
            <summary>
                Sets a single line border style for this <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.
            </summary>
            <param name="contextMenuStrip">
                The <see cref="T:System.Windows.Forms.ContextMenuStrip"/> to redraw.
            </param>
            <param name="borderColor">
                The border color.
            </param>
        </member>
        <member name="T:SilDev.Forms.ControlEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.Control"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ControlEx.GetAncestor(System.Windows.Forms.Control)">
            <summary>
                Gets the ancestor of this <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
            <param name="control">
                The control to query.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.EnableDragMove(System.Windows.Forms.Control,System.Boolean)">
            <summary>
                Enables a window to be dragged by a mouse with its left button down over this <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
            <param name="control">
                The control to change.
            </param>
            <param name="cursor">
                true to change <see cref="T:System.Windows.Forms.Control"/>.Cursor to <see cref="P:System.Windows.Forms.Cursors.SizeAll"/> while dragging;
                otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.SetControlStyle(System.Windows.Forms.Control,System.Windows.Forms.ControlStyles,System.Boolean)">
            <summary>
                Enables or disables the specified <see cref="T:System.Windows.Forms.ControlStyles"/> for this <see cref="T:System.Windows.Forms.Control"/>, even it
                is not directly supported.
            </summary>
            <param name="control">
                The control to change.
            </param>
            <param name="controlStyles">
                The new styles to enable or disable.
            </param>
            <param name="enable">
                true to enable the specified styles; otherwise, false to disable the specified styles.
            </param>
        </member>
        <member name="M:SilDev.Forms.ControlEx.DrawSizeGrip(System.Windows.Forms.Control,System.Nullable{System.Drawing.Color},System.Windows.Forms.MouseEventHandler,System.EventHandler)">
            <summary>
                Draws a 12px large size grip <see cref="T:System.Drawing.Image"/> in this <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
            <param name="control">
                The control that receives the size grip <see cref="T:System.Drawing.Image"/>.
            </param>
            <param name="color">
                The color for the size grip <see cref="T:System.Drawing.Image"/>; <see cref="P:System.Drawing.Color.White"/> is used by default.
            </param>
            <param name="mouseDownEvent">
                Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </param>
            <param name="mouseEnterEvent">
                Occurs when the mouse pointer enters the control.
            </param>
        </member>
        <member name="T:SilDev.Forms.FormEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.Form"/> class.
            </summary>
        </member>
        <member name="T:SilDev.Forms.FormEx.PlusSettings">
            <summary>
                Provides special <see cref="T:System.Windows.Forms.Form"/> settings.
            </summary>
        </member>
        <member name="F:SilDev.Forms.FormEx.PlusSettings.LogLoadingTime">
            <summary>
                Logs the loading time of the specified <see cref="T:System.Windows.Forms.Form"/>.
            </summary>
        </member>
        <member name="M:SilDev.Forms.FormEx.Plus(System.Windows.Forms.Form,SilDev.Forms.FormEx.PlusSettings)">
            <summary>
                <para>
                    Determines special settings for the specified <see cref="T:System.Windows.Forms.Form"/>.
                </para>
                <para>
                    Hint: This function should be called before the <see cref="T:System.Windows.Forms.Form"/> is created.
                </para>
            </summary>
            <param name="form">
                The form window to determine the settings.
            </param>
            <param name="settings">
                The settings to be applied.
            </param>
        </member>
        <member name="T:SilDev.Forms.LinkLabelEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.LinkLabel"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.LinkLabelEx.LinkText(System.Windows.Forms.LinkLabel,System.String,System.Uri)">
            <summary>
                Creates a link for the specified text and associates it with the specified link.
            </summary>
            <param name="linkLabel">
                The <see cref="T:System.Windows.Forms.LinkLabel"/> control to change.
            </param>
            <param name="text">
                The text to link.
            </param>
            <param name="uri">
                The link to associate.
            </param>
        </member>
        <member name="M:SilDev.Forms.LinkLabelEx.LinkText(System.Windows.Forms.LinkLabel,System.String,System.String)">
            <summary>
                Creates a link for the specified text and associates it with the specified link.
            </summary>
            <param name="linkLabel">
                The <see cref="T:System.Windows.Forms.LinkLabel"/> control to change.
            </param>
            <param name="text">
                The text to link.
            </param>
            <param name="uri">
                The link to associate.
            </param>
        </member>
        <member name="T:SilDev.Forms.ListViewEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.ListView"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ListViewEx.ItemFromPoint(System.Windows.Forms.ListView)">
            <summary>
                Retrives the <see cref="T:System.Windows.Forms.ListViewItem"/> at the current cursor's position.
            </summary>
            <param name="listView">
                The <see cref="T:System.Windows.Forms.ListView"/> control to check.
            </param>
        </member>
        <member name="T:SilDev.Forms.ListViewEx.AlphanumericComparer">
            <summary>
                Provides a base class for comparison.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ListViewEx.AlphanumericComparer.#ctor(System.Boolean)">
            <summary>
                Initilazies a new instance of the <see cref="T:SilDev.Forms.ListViewEx.AlphanumericComparer"/> class. A
                parameter specifies whether the order is descended.
            </summary>
            <param name="descendent">
                true to enable the descending order; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Forms.ListViewEx.AlphanumericComparer.Compare(System.Object,System.Object)">
            <summary>
                Compare two specified objects and returns an integer that indicates their
                relative position in the sort order.
            </summary>
            <param name="a">
                The first object to compare.
            </param>
            <param name="b">
                The second object to compare.
            </param>
        </member>
        <member name="T:SilDev.Forms.MessageBoxEx">
            <summary>
                <para>
                    Displays a message window, also known as a dialog box, based on <see cref="T:System.Windows.Forms.MessageBox"/>,
                    which presents a message to the user. It is a modal window, blocking other actions in the
                    application until the user closes it. A <see cref="T:SilDev.Forms.MessageBoxEx"/> can contain text,
                    buttons, and symbols that inform and instruct the user.
                </para>
                <para>
                    The difference to <see cref="T:System.Windows.Forms.MessageBox"/> is that the message window displays
                    in the center of the specified <see cref="T:System.Windows.Forms.IWin32Window"/> owner object.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.Forms.MessageBoxEx.CenterMousePointer">
            <summary>
                Specifies that the mouse pointer moves once to a new dialog box.
            </summary>
        </member>
        <member name="F:SilDev.Forms.MessageBoxEx.TopMost">
            <summary>
                Specifies that the dialog box is placed above all non-topmost windows. This
                option has no effect if an <see cref="T:System.Windows.Forms.IWin32Window"/> owner is defined.
            </summary>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
                Displays a message box with the specified text, caption, buttons, icon,
                default button, and options in the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies
                the default button for the message box.
            </param>
            <param name="options">
                One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which
                display and association options will be used for the message box. You may
                pass in 0 if you wish to use the defaults.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
                Displays a message box with the specified text, caption, buttons, icon,
                and default button in the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies
                the default button for the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
                Displays a message box with the specified text, caption, buttons, and icon
                in the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
                Displays a message box with the specified text, caption, and buttons in
                the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.String)">
            <summary>
                Displays a message box with the specified text and caption in the center
                of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
                Displays a message box with the specified text, buttons, icon, default
                button, and options in the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies
                the default button for the message box.
            </param>
            <param name="options">
                One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which
                display and association options will be used for the message box. You may
                pass in 0 if you wish to use the defaults.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
                Displays a message box with the specified text, buttons, icon, and default
                button in the center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies
                the default button for the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
                Displays a message box with the specified text, buttons, and icon in the
                center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
                Displays a message box with the specified text, icon, and buttons in the
                center of the specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
                Displays a message box with the specified text in the center of the
                specified owner object.
            </summary>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own the modal
                dialog box.
            </param>
            <param name="text">
                The text to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
                Displays a message box with the specified text, caption, buttons, icon, default
                button, and options.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies
                the default button for the message box.
            </param>
            <param name="options">
                One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which
                display and association options will be used for the message box. You may pass
                in 0 if you wish to use the defaults.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
                Displays a message box with the specified text, caption, buttons, icon, default,
                and button.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies
                the default button for the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
                Displays a message box with the specified text, caption, buttons, and icon.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
                Displays a message box with the specified text, caption, and buttons.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.String)">
            <summary>
                Displays a message box with the specified text and caption.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="caption">
                The text to display in the title bar of the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
                Displays a message box with the specified text, buttons, icon, default button,
                and options.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies
                the default button for the message box.
            </param>
            <param name="options">
                One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"/> values that specifies which
                display and association options will be used for the message box. You may pass
                in 0 if you wish to use the defaults.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
                Displays a message box with the specified text, buttons, icon, and default
                button.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <param name="defButton">
                One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/> values that specifies
                the default button for the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
                Displays a message box with the specified text, buttons, and icon.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <param name="icon">
                One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values that specifies which icon
                to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
                Displays a message box with the specified text, and buttons.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <param name="buttons">
                One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"/> values that specifies which
                buttons to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="M:SilDev.Forms.MessageBoxEx.Show(System.String)">
            <summary>
                Displays a message box with the specified text.
            </summary>
            <param name="text">
                The text to display in the message box.
            </param>
            <returns>
                One of the <see cref="T:System.Windows.Forms.DialogResult"/> values.
            </returns>
        </member>
        <member name="T:SilDev.Forms.MessageBoxEx.ButtonText">
            <summary>
                Specifies button text overrides.
            </summary>
        </member>
        <member name="F:SilDev.Forms.MessageBoxEx.ButtonText.OK">
            <summary>
                The OK button.
            </summary>
        </member>
        <member name="F:SilDev.Forms.MessageBoxEx.ButtonText.Cancel">
            <summary>
                The Cancel button.
            </summary>
        </member>
        <member name="F:SilDev.Forms.MessageBoxEx.ButtonText.Abort">
            <summary>
                The Abort button.
            </summary>
        </member>
        <member name="F:SilDev.Forms.MessageBoxEx.ButtonText.Retry">
            <summary>
                The Retry button.
            </summary>
        </member>
        <member name="F:SilDev.Forms.MessageBoxEx.ButtonText.Ignore">
            <summary>
                The Ignore button.
            </summary>
        </member>
        <member name="F:SilDev.Forms.MessageBoxEx.ButtonText.Yes">
            <summary>
                The Yes button.
            </summary>
        </member>
        <member name="F:SilDev.Forms.MessageBoxEx.ButtonText.No">
            <summary>
                The No button.
            </summary>
        </member>
        <member name="P:SilDev.Forms.MessageBoxEx.ButtonText.OverrideEnabled">
            <summary>
                Gets or sets a value indicating whether the override options to
                be applied.
            </summary>
        </member>
        <member name="T:SilDev.Forms.ProgressBarEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ProgressBarEx.JumpToEnd(System.Windows.Forms.ProgressBar)">
            <summary>
                Skips the very long animation and jumps directly to the <see cref="P:System.Windows.Forms.ProgressBar.Maximum"/>.
            </summary>
            <param name="progressBar">
                The <see cref="T:System.Windows.Forms.ProgressBar"/> to progress.
            </param>
        </member>
        <member name="T:SilDev.Forms.ProgressCircle">
            <summary>
                Represents a <see cref="T:SilDev.Forms.ProgressCircle"/> control.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ProgressCircle.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Forms.ProgressCircle"/> class.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.Active">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:SilDev.Forms.ProgressCircle"/>
                is active.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.Spokes">
            <summary>
                Gets or sets the number of spokes.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.Thickness">
            <summary>
                Gets or sets the spoke thickness.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.InnerRadius">
            <summary>
                Gets or sets the inner circle radius.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.OuterRadius">
            <summary>
                Gets or sets the outer circle radius.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.RotationSpeed">
            <summary>
                Gets or sets the rotation speed.
            </summary>
        </member>
        <member name="P:SilDev.Forms.ProgressCircle.ForeColor">
            <summary>
                Gets or sets the foreground color of the control.
            </summary>
        </member>
        <member name="M:SilDev.Forms.ProgressCircle.SetAppearance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the circle appearance.
            </summary>
            <param name="spokes">
                The number of spokes.
            </param>
            <param name="thickness">
                The spoke thickness.
            </param>
            <param name="innerRadius">
                The inner circle radius.
            </param>
            <param name="outerRadius">
                The outer circle radius.
            </param>
        </member>
        <member name="M:SilDev.Forms.ProgressCircle.GetPreferredSize(System.Drawing.Size)">
            <summary>
                Retrieves the size of a rectangular area into which a control can be
                fitted.
            </summary>
            <param name="size">
                The custom-sized area for a control.
            </param>
        </member>
        <member name="T:SilDev.Forms.RichTextBoxEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.RichTextBox"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.RichTextBoxEx.MarkText(System.Windows.Forms.RichTextBox,System.String,System.Drawing.Color,System.Nullable{System.Drawing.Color},System.Drawing.Font)">
            <summary>
                Marks the specified text on this <see cref="T:System.Windows.Forms.RichTextBox"/> control.
            </summary>
            <param name="richTextBox">
                The <see cref="T:System.Windows.Forms.RichTextBox"/> control to change.
            </param>
            <param name="text">
                The text to mark.
            </param>
            <param name="foreColor">
                The new forground color.
            </param>
            <param name="backColor">
                The new background color.
            </param>
            <param name="font">
                The new font.
            </param>
        </member>
        <member name="M:SilDev.Forms.RichTextBoxEx.SetDefaultContextMenuStrip(System.Windows.Forms.RichTextBox,System.Windows.Forms.IWin32Window)">
            <summary>
                Sets a default <see cref="T:System.Windows.Forms.ContextMenuStrip"/> to this <see cref="T:System.Windows.Forms.RichTextBox"/> with cut,
                copy, paste, select all, load file, save file and undo.
            </summary>
            <param name="richTextBox">
                The <see cref="T:System.Windows.Forms.RichTextBox"/> control to add the <see cref="T:System.Windows.Forms.ContextMenuStrip"/>.
            </param>
            <param name="owner">
                An implementation of <see cref="T:System.Windows.Forms.IWin32Window"/> that will own modal dialog boxes.
            </param>
        </member>
        <member name="T:SilDev.Forms.TextBoxEx">
            <summary>
                Expands the functionality for the <see cref="T:System.Windows.Forms.TextBox"/> class.
            </summary>
        </member>
        <member name="M:SilDev.Forms.TextBoxEx.DrawSearchSymbol(System.Windows.Forms.TextBox,System.Nullable{System.Drawing.Color})">
            <summary>
                Draws a search symbol on the right side of this <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <param name="textBox">
                The <see cref="T:System.Windows.Forms.TextBox"/> control to change.
            </param>
            <param name="color">
                The search symbol color, <see cref="T:System.Windows.Forms.TextBox"/>.ForeColor is used by default.
            </param>
        </member>
        <member name="T:SilDev.QuickWmi.Win32_OperatingSystem">
            <summary>
                ***This is an undocumented class and can be changed or removed in the future
                without futher notice.
            </summary>
        </member>
        <member name="T:SilDev.Compaction">
            <summary>
                Provides static methods for compressing and decompressing of data.
            </summary>
        </member>
        <member name="M:SilDev.Compaction.Zip(System.Byte[])">
            <summary>
                Compresses the specifed sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to compress.
            </param>
        </member>
        <member name="M:SilDev.Compaction.ZipText(System.String)">
            <summary>
                Compresses the specifed <see cref="T:System.String"/> value.
            </summary>
            <param name="text">
                The string to compress.
            </param>
        </member>
        <member name="M:SilDev.Compaction.Unzip(System.Byte[])">
            <summary>
                Decompresses a compressed sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to decompress.
            </param>
        </member>
        <member name="M:SilDev.Compaction.Unzip(System.String,System.String,System.Boolean)">
            <summary>
                Extracts all the files in the specified zip archive to the specified directory on
                the file system.
            </summary>
            <param name="srcPath">
                The path of the zip archive to extract.
            </param>
            <param name="destDir">
                The path to the directory to place the extracted files in.
            </param>
            <param name="delSrcPath">
                true to delete the source archive after extracting; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Compaction.UnzipText(System.Byte[])">
            <summary>
                Decompresses a compressed sequence of bytes back to a <see cref="T:System.String"/>
                value.
            </summary>
            <param name="bytes">
                The sequence of bytes to decompress.
            </param>
        </member>
        <member name="T:SilDev.Compaction.Zip7Helper">
            <summary>
                ***This is an undocumented class and can be changed or removed in the future
                without futher notice.
            </summary>
        </member>
        <member name="T:SilDev.Comparison">
            <summary>
                Provides static methods and base classes used for the comparison of two or more objects.
            </summary>
        </member>
        <member name="M:SilDev.Comparison.IsNotEmpty(System.Object)">
            <summary>
                Determines whether the specified object is not empty.
            </summary>
            <param name="value">
                The object to check.
            </param>
        </member>
        <member name="M:SilDev.Comparison.IndexOf``1(``0[],``0[])">
            <summary>
                Searches for the specified one-dimensional array and returns the index of its first
                occurrence in another one-dimensional array.
            </summary>
            <typeparam name="T">
                The type of the elements of the array.
            </typeparam>
            <param name="source">
                The one-dimensional array to search.
            </param>
            <param name="target">
                The one-dimensional array to locate.
            </param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.OverflowException">
            </exception>
        </member>
        <member name="M:SilDev.Comparison.IsBetween``1(``0,``0,``0)">
            <summary>
                Determines whether the value of this object instance is between two specified values.
            </summary>
            <typeparam name="T">
                The type of the object.
            </typeparam>
            <param name="item">
                The object value to compare.
            </param>
            <param name="start">
                The start index value.
            </param>
            <param name="end">
                The end index value.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx``1(System.Collections.Generic.IEnumerable{``0},``0[][])">
            <summary>
                Determines whether a specified sequence of elements occurs within this sequence of
                elements.
            </summary>
            <typeparam name="T">
                The type of the elements of the array.
            </typeparam>
            <param name="source">
                The sequence of elements to browse.
            </param>
            <param name="targets">
                The sequence of elements to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.Collections.Generic.IEnumerable{System.String},System.StringComparison,System.String[])">
            <summary>
                Determines whether a specified string occurs within this sequence of strings. A
                parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of strings to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
                Determines whether a specified string occurs within this sequence of strings. The
                <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for this
                comparison.
            </summary>
            <param name="source">
                The sequence to browse.
            </param>
            <param name="targets">
                The sequence of strings to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.StringComparison,System.String[])">
            <summary>
                Determines whether a specified substring occurs within this string. A parameter
                specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of strings to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.String[])">
            <summary>
                Determines whether a specified substring occurs within this string. The
                <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for this
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="targets">
                The sequence of strings to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.StringComparison,System.Char[])">
            <summary>
                Determines whether a specified characters occurs within this string. A parameter
                specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of characters to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.ContainsEx(System.String,System.Char[])">
            <summary>
                Determines whether a specified characters occurs within this string. The
                <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for this
                comparison.
            </summary>
            <param name="source">
                The string to browse.
            </param>
            <param name="targets">
                The sequence of characters to seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.StringComparison,System.String[])">
            <summary>
                Determines whether the beginning of this string matches a string. A parameter
                specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of strings to compare seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartsWithEx(System.String,System.String[])">
            <summary>
                Determines whether the beginning of this string matches a string. The
                <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for this
                comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="targets">
                The sequence of strings to compare seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartWith(System.Collections.Generic.IEnumerable{System.Byte},System.Byte[])">
            <summary>
                Determines whether the beginning of this sequence of bytes matches the specified
                sequence of bytes
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target">
                The sequence of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.StartWith(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether the beginning of this sequence of bytes matches the specified
                sequence of bytes
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target">
                The sequence of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.StringComparison,System.String[])">
            <summary>
                Determines whether the end of this string matches a string. A parameter specifies the
                culture, case, and sort rules used in the comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="comparisonType">
                One of the enumeration values that specifies the rules for the search.
            </param>
            <param name="targets">
                The sequence of strings to compare seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWithEx(System.String,System.String[])">
            <summary>
                Determines whether the end of this string matches a string. The
                <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for this comparison.
            </summary>
            <param name="source">
                The string to check.
            </param>
            <param name="targets">
                The sequence of strings to compare seek.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Byte[])">
            <summary>
                Determines whether the end of this sequence of bytes matches the specified sequence of
                bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target">
                The sequence of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EndsWith(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Determines whether the end of this sequence of bytes matches the specified sequence of
                bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target">
                The sequence of bytes to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.String,System.StringComparison,System.String[])">
            <summary>
                Determines whether this string instance is the same as a string of the specified string
                array. A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="source">
                The first string to compare.
            </param>
            <param name="targets">
                The sequence of strings to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.String,System.String[])">
            <summary>
                Determines whether this string instance is the same as a string of the specified string
                array. The <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> parameter is used for this
                comparison.
            </summary>
            <param name="source">
                The first string to compare.
            </param>
            <param name="targets">
                The sequence of strings to compare with the first.
            </param>
        </member>
        <member name="M:SilDev.Comparison.EqualsEx(System.Collections.Generic.IEnumerable{System.Byte},System.Byte[])">
            <summary>
                Determines whether this sequence of bytes the same as the specified sequence of
                bytes.
            </summary>
            <param name="source">
                The first sequence of bytes to compare.
            </param>
            <param name="target">
                The sequence of bytes to compare with the first.
            </param>
        </member>
        <member name="T:SilDev.Comparison.AlphanumericComparer">
            <summary>
                Provides a base class for comparison.
            </summary>
        </member>
        <member name="M:SilDev.Comparison.AlphanumericComparer.#ctor(System.Boolean)">
            <summary>
                Initilazies a new instance of the <see cref="T:SilDev.Comparison.AlphanumericComparer"/> class. A
                parameter specifies whether the order is descended.
            </summary>
            <param name="descendent">
                true to enable the descending order; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Comparison.AlphanumericComparer.Compare(System.Object,System.Object)">
            <summary>
                Compare two specified objects and returns an integer that indicates their relative
                position in the sort order.
            </summary>
            <param name="a">
                The first object to compare.
            </param>
            <param name="b">
                The second object to compare.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Base64">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base64"/> class.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Base64.LineLength">
            <summary>
                The length of lines.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Base64.PrefixMark">
            <summary>
                The prefix mark.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Base64.SuffixMark">
            <summary>
                The suffix mark.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Base64.LastEncodedResult">
            <summary>
                Gets the encoded result of the last object.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Base64.LastDecodedResult">
            <summary>
                Gets the decoded result of the last object.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base64.EncodeBytes(System.Byte[],System.String,System.String,System.UInt32)">
            <summary>
                Encodes the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Base64.DecodeBytes(System.String,System.String,System.String)">
            <summary>
                Decodes the specified sequence of bytes.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Base64.EncodeString(System.String,System.String,System.String,System.UInt32)">
            <summary>
                Encodes the specified string.
            </summary>
            <param name="text">
                The string to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Base64.EncodeString(System.String,System.UInt32)">
            <summary>
                Encodes the specified string.
            </summary>
            <param name="text">
                The string to encode.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Base64.DecodeString(System.String,System.String,System.String)">
            <summary>
                Decodes the specified string.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Base64.EncodeFile(System.String,System.String,System.String,System.UInt32)">
            <summary>
                Encodes the specified file.
            </summary>
            <param name="path">
                The full path of the file to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Base64.EncodeFile(System.String,System.UInt32)">
            <summary>
                Encodes the specified file.
            </summary>
            <param name="path">
                The full path of the file to encode.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Base64.DecodeFile(System.String,System.String,System.String)">
            <summary>
                Decodes the specified sequence of bytes which presents a file.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncodeToBase64(System.Byte[],System.String,System.String,System.UInt32)">
            <summary>
                Encodes this sequence of bytes to a sequence of base-64 digits.
            </summary>
            <param name="bytes">
                The sequence of bytes to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeBytesFromBase64(System.String,System.String,System.String)">
            <summary>
                Decodes this sequence of base-64 digits back to a sequence of bytes.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncodeToBase64(System.String,System.String,System.String,System.UInt32)">
            <summary>
                Encodes this string to a sequence of base-64 digits.
            </summary>
            <param name="text">
                The string to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeStringFromBase64(System.String,System.String,System.String)">
            <summary>
                Decodes this sequence of base-64 digits back to string.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncodeFileToBase64(System.String,System.String,System.String,System.UInt32)">
            <summary>
                Encodes the specifed file to a sequence of base-64 digits.
            </summary>
            <param name="path">
                The full path of the file to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeFileFromBase64(System.String,System.String,System.String)">
            <summary>
                Decodes the specifed sequence of base-64 digits back to a sequence of bytes which presents a file.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Base85">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base85"/> class.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Base85.PrefixMark">
            <summary>
                The prefix mark.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Base85.SuffixMark">
            <summary>
                The suffix mark.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base85.EncodeBytes(System.Byte[],System.String,System.String,System.UInt32)">
            <summary>
                Encodes the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Base85.DecodeBytes(System.String,System.String,System.String)">
            <summary>
                Decodes the specified sequence of bytes.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncodeToBase85(System.Byte[],System.String,System.String,System.UInt32)">
            <summary>
                Encodes this sequence of bytes to a sequence of base-85 digits.
            </summary>
            <param name="bytes">
                The sequence of bytes to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeBytesFromBase85(System.String,System.String,System.String)">
            <summary>
                Decodes this sequence of base-85 digits back to a sequence of bytes.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncodeToBase85(System.String,System.String,System.String,System.UInt32)">
            <summary>
                Encodes this string to a sequence of base-85 digits.
            </summary>
            <param name="text">
                The string to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeStringFromBase85(System.String,System.String,System.String)">
            <summary>
                Decodes this sequence of base-85 digits back to string.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncodeFileToBase85(System.String,System.String,System.String,System.UInt32)">
            <summary>
                Encodes the specifed file to a sequence of base-85 digits.
            </summary>
            <param name="path">
                The full path of the file to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeFileFromBase85(System.String,System.String,System.String)">
            <summary>
                Decodes the specifed sequence of base-85 digits back to a sequence of bytes which presents a file.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Base91">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Base91"/> class.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Base91.DefaultEncodeTable">
            <summary>
                Gets the default encode table.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Base91.EncodeTable">
            <summary>
                Gets or sets the encode table.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Base91.EncodeBytes(System.Byte[],System.String,System.String,System.UInt32)">
            <summary>
                Encodes the specified sequence of bytes to a sequence of base-91 digits.
            </summary>
            <param name="bytes">
                The sequence of bytes to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Base91.DecodeBytes(System.String,System.String,System.String)">
            <summary>
                Decodes the specified sequence of base-91 digits back to a sequence of bytes.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncodeToBase91(System.Byte[],System.String,System.String,System.UInt32)">
            <summary>
                Encodes this sequence of bytes to a sequence of base-91 digits.
            </summary>
            <param name="bytes">
                The sequence of bytes to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeBytesFromBase91(System.String,System.String,System.String)">
            <summary>
                Decodes this sequence of base-91 digits back to a sequence of bytes.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncodeToBase91(System.String,System.String,System.String,System.UInt32)">
            <summary>
                Encodes this string to a sequence of base-91 digits.
            </summary>
            <param name="text">
                The string to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeStringFromBase91(System.String,System.String,System.String)">
            <summary>
                Decodes this sequence of base-91 digits back to string.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncodeFileToBase91(System.String,System.String,System.String,System.UInt32)">
            <summary>
                Encodes the specifed file to a sequence of base-91 digits.
            </summary>
            <param name="path">
                The full path of the file to encode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
            <param name="lineLength">
                The length of lines.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecodeFileFromBase91(System.String,System.String,System.String)">
            <summary>
                Decodes the specifed sequence of base-91 digits back to a sequence of bytes which presents a file.
            </summary>
            <param name="code">
                The string to decode.
            </param>
            <param name="prefixMark">
                The prefix mark.
            </param>
            <param name="suffixMark">
                The suffix mark.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Aes">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Aes"/> class.
            </summary>
        </member>
        <member name="T:SilDev.Crypto.Aes.KeySize">
            <summary>
                Provides enumerated bits of the key size.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Aes.KeySize.Aes128">
            <summary>
                128 bits.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Aes.KeySize.Aes192">
            <summary>
                192 bits.
            </summary>
        </member>
        <member name="F:SilDev.Crypto.Aes.KeySize.Aes256">
            <summary>
                256 bits.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptBytes(System.Byte[],System.Byte[],System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptBytes(System.Byte[],System.String,System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptBytes(System.Byte[],System.String,SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptString(System.String,System.Byte[],System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptString(System.String,System.String,System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptString(System.String,System.String,SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptFile(System.String,System.Byte[],System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptFile(System.String,System.String,System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
            <param name="salt">
                The sequence of bytes which is used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.EncryptFile(System.String,System.String,SilDev.Crypto.Aes.KeySize)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file.
            </param>
            <param name="password">
                The sequence of bytes which is used as password.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptBytes(System.Byte[],System.Byte[],System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified sequence of bytes.
            </summary>
            <param name="code">
                The sequence of bytes to decrypt.
            </param>
            <param name="password">
                The sequence of bytes which was used as password.
            </param>
            <param name="salt">
                The sequence of bytes which was used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptBytes(System.Byte[],System.String,System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified sequence of bytes.
            </summary>
            <param name="code">
                The sequence of bytes to decrypt.
            </param>
            <param name="password">
                The string which was used as password.
            </param>
            <param name="salt">
                The sequence of bytes which was used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptBytes(System.Byte[],System.String,SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified sequence of bytes.
            </summary>
            <param name="code">
                The sequence of bytes to decrypt.
            </param>
            <param name="password">
                The string which was used as password.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptString(System.String,System.Byte[],System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified hexadecimal sequence which represents a enctrypted sequence of bytes.
            </summary>
            <param name="code">
                The hexadecimal sequence to decrypt.
            </param>
            <param name="password">
                The sequence of bytes which was used as password.
            </param>
            <param name="salt">
                The sequence of bytes which was used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptString(System.String,System.String,System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified hexadecimal sequence which represents a enctrypted sequence of bytes.
            </summary>
            <param name="code">
                The hexadecimal sequence to decrypt.
            </param>
            <param name="password">
                The string which was used as password.
            </param>
            <param name="salt">
                The sequence of bytes which was used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptString(System.String,System.String,SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified hexadecimal sequence which represents a enctrypted sequence of bytes.
            </summary>
            <param name="code">
                The hexadecimal sequence to decrypt.
            </param>
            <param name="password">
                The string which was used as password.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptFile(System.String,System.Byte[],System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to decrypt.
            </param>
            <param name="password">
                The sequence of bytes which was used as password.
            </param>
            <param name="salt">
                The sequence of bytes which was used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptFile(System.String,System.String,System.Byte[],SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to decrypt.
            </param>
            <param name="password">
                The string which was used as password.
            </param>
            <param name="salt">
                The sequence of bytes which was used as salt.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Aes.DecryptFile(System.String,System.String,SilDev.Crypto.Aes.KeySize)">
            <summary>
                Decrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to decrypt.
            </param>
            <param name="password">
                The string which was used as password.
            </param>
            <param name="keySize">
                The size of the secret key.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToAes128(System.Byte[],System.String)">
            <summary>
                Encrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToAes128(System.String,System.String)">
            <summary>
                Encrypts this string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToAes128(System.String,System.String)">
            <summary>
                Encrypts this file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptFromAes128(System.Byte[],System.String)">
            <summary>
                Decrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptStringFromAes128(System.String,System.String)">
            <summary>
                Decrypts this string.
            </summary>
            <param name="text">
                The string to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptFileFromAes128(System.String,System.String)">
            <summary>
                Decrypts this file.
            </summary>
            <param name="path">
                The full path of the file to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToAes192(System.Byte[],System.String)">
            <summary>
                Encrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToAes192(System.String,System.String)">
            <summary>
                Encrypts this string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToAes192(System.String,System.String)">
            <summary>
                Encrypts this file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptFromAes192(System.Byte[],System.String)">
            <summary>
                Decrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptStringFromAes192(System.String,System.String)">
            <summary>
                Decrypts this string.
            </summary>
            <param name="text">
                The string to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptFileFromAes192(System.String,System.String)">
            <summary>
                Decrypts this file.
            </summary>
            <param name="path">
                The full path of the file to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToAes256(System.Byte[],System.String)">
            <summary>
                Encrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToAes256(System.String,System.String)">
            <summary>
                Encrypts this string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToAes256(System.String,System.String)">
            <summary>
                Encrypts this file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptFromAes256(System.Byte[],System.String)">
            <summary>
                Decrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptStringFromAes256(System.String,System.String)">
            <summary>
                Decrypts this string.
            </summary>
            <param name="text">
                The string to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="M:SilDev.Crypto.DecryptFileFromAes256(System.String,System.String)">
            <summary>
                Decrypts this file.
            </summary>
            <param name="path">
                The full path of the file to decrypt.
            </param>
            <param name="password">
                The string which is used as password.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Md5">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Md5"/> class.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Md5.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Md5.EncryptStream(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Md5.EncryptBytes(System.Byte[])">
            <summary>
                Encrypts the specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Md5.EncryptString(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Md5.EncryptFile(System.String)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToMd5(System.IO.Stream)">
            <summary>
                Encrypts this stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToMd5(System.Byte[])">
            <summary>
                Encrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToMd5(System.String)">
            <summary>
                Encrypts this string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToMd5(System.IO.FileInfo)">
            <summary>
                Encrypts this file.
            </summary>
            <param name="file">
                The file to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToMd5(System.String)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Sha1">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha1"/> class.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Sha1.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha1.EncryptStream(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha1.EncryptString(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha1(System.IO.Stream)">
            <summary>
                Encrypts this stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha1(System.Byte[])">
            <summary>
                Encrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha1(System.String)">
            <summary>
                Encrypts this string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToSha1(System.IO.FileInfo)">
            <summary>
                Encrypts this file.
            </summary>
            <param name="file">
                The file to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToSha1(System.String)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Sha256">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha256"/> class.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Sha256.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha256.EncryptStream(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha256.EncryptString(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha256(System.IO.Stream)">
            <summary>
                Encrypts this stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha256(System.Byte[])">
            <summary>
                Encrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha256(System.String)">
            <summary>
                Encrypts this string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToSha256(System.IO.FileInfo)">
            <summary>
                Encrypts this file.
            </summary>
            <param name="file">
                The file to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToSha256(System.String)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Sha384">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha384"/> class.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Sha384.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha384.EncryptStream(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha384.EncryptString(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha384(System.IO.Stream)">
            <summary>
                Encrypts this stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha384(System.Byte[])">
            <summary>
                Encrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha384(System.String)">
            <summary>
                Encrypts this string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToSha384(System.IO.FileInfo)">
            <summary>
                Encrypts this file.
            </summary>
            <param name="file">
                The file to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToSha384(System.String)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
        </member>
        <member name="T:SilDev.Crypto.Sha512">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.Crypto.Sha512"/> class.
            </summary>
        </member>
        <member name="P:SilDev.Crypto.Sha512.HashLength">
            <summary>
                Gets the required hash length.
            </summary>
        </member>
        <member name="M:SilDev.Crypto.Sha512.EncryptStream(System.IO.Stream)">
            <summary>
                Encrypts the specified stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.Sha512.EncryptString(System.String)">
            <summary>
                Encrypts the specified string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha512(System.IO.Stream)">
            <summary>
                Encrypts this stream.
            </summary>
            <param name="stream">
                The stream to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha512(System.Byte[])">
            <summary>
                Encrypts this sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptToSha512(System.String)">
            <summary>
                Encrypts this string.
            </summary>
            <param name="text">
                The string to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToSha512(System.IO.FileInfo)">
            <summary>
                Encrypts this file.
            </summary>
            <param name="file">
                The file to encrypt.
            </param>
        </member>
        <member name="M:SilDev.Crypto.EncryptFileToSha512(System.String)">
            <summary>
                Encrypts the specified file.
            </summary>
            <param name="path">
                The full path of the file to encrypt.
            </param>
        </member>
        <member name="T:SilDev.Data">
            <summary>
                Provides static methods for the creation, copying, linking of data and to handle file
                information.
            </summary>
        </member>
        <member name="P:SilDev.Data.PrincipalName">
            <summary>
                <para>
                    Gets the original name of the current principal.
                </para>
                <para>
                    This variable is only set if <see cref="M:SilDev.Data.ChangePrincipalName(System.String)"/>
                    was previously called.
                </para>
            </summary>
        </member>
        <member name="M:SilDev.Data.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
                Reads the bytes from the specified stream and writes them to another stream.
            </summary>
            <param name="src">
                The <see cref="T:System.IO.Stream"/> to copy.
            </param>
            <param name="dest">
                The <see cref="T:System.IO.Stream"/> to override.
            </param>
            <param name="buffer">
                The maximum number of bytes to buffer.
            </param>
        </member>
        <member name="M:SilDev.Data.CreateShortcut(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates a link to the specified path.
            </summary>
            <param name="linkPath">
                The file or directory to be linked.
            </param>
            <param name="targetPath">
                The fully qualified name of the new link.
            </param>
            <param name="startArgs">
                The arguments which applies when this shortcut is executed.
            </param>
            <param name="linkIcon">
                The icon resource path for this shortcut.
            </param>
            <param name="skipExists">
                true to skip existing shortcuts, even if the target path of
                the same; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Data.CreateShortcut(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Creates a link to the specified path.
            </summary>
            <param name="linkPath">
                The file or directory to be linked.
            </param>
            <param name="targetPath">
                The fully qualified name of the new link.
            </param>
            <param name="startArgs">
                The arguments which applies when this shortcut is executed.
            </param>
            <param name="skipExists">
                true to skip existing shortcuts, even if the target path of
                the same; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Data.CreateShortcut(System.String,System.String,System.Boolean)">
            <summary>
                Creates a link to the specified path.
            </summary>
            <param name="linkPath">
                The file or directory to be linked.
            </param>
            <param name="targetPath">
                The fully qualified name of the new link.
            </param>
            <param name="skipExists">
                true to skip existing shortcuts, even if the target path of
                the same; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Data.GetShortcutTarget(System.String)">
            <summary>
                Returns the target path of the specified link.
            </summary>
            <param name="path">
                The shortcut path to get the target path.
            </param>
        </member>
        <member name="M:SilDev.Data.ChangePrincipalName(System.String)">
            <summary>
                Changes the name of the current principal.
            </summary>
            <param name="newName">
                The new name for the current principal, which
                cannot be longer than the original one.
            </param>
        </member>
        <member name="M:SilDev.Data.RestorePrincipalName">
            <summary>
                Restores the name of the current principal.
            </summary>
        </member>
        <member name="M:SilDev.Data.PinToTaskbar(System.String)">
            <summary>
                Pin the specified file to taskbar.
            </summary>
            <param name="path">
                The file to be pinned.
            </param>
        </member>
        <member name="M:SilDev.Data.UnpinFromTaskbar(System.String)">
            <summary>
                Unpin the specified file to taskbar.
            </summary>
            <param name="path">
                The file to be unpinned.
            </param>
        </member>
        <member name="M:SilDev.Data.MatchAttributes(System.String,System.IO.FileAttributes)">
            <summary>
                Determines whether the specified path specifies the specified
                file attributes.
            </summary>
            <param name="path">
                The file or directory to check.
            </param>
            <param name="attr">
                The attributes to match.
            </param>
        </member>
        <member name="M:SilDev.Data.MatchAttributes(System.IO.DirectoryInfo,System.IO.FileAttributes)">
            <summary>
                Determines whether the specified path specifies the specified
                file attributes.
            </summary>
            <param name="dirInfo">
                The directory to check.
            </param>
            <param name="attr">
                The attributes to match.
            </param>
        </member>
        <member name="M:SilDev.Data.MatchAttributes(System.IO.FileInfo,System.IO.FileAttributes)">
            <summary>
                Determines whether the specified path specifies the specified
                file attributes.
            </summary>
            <param name="fileInfo">
                The file to check.
            </param>
            <param name="attr">
                The attributes to match.
            </param>
        </member>
        <member name="M:SilDev.Data.DirOrFileIsLink(System.String)">
            <summary>
                Determines whether the specified path is specified as reparse
                point.
            </summary>
            <param name="path">
                The file or directory to check.
            </param>
        </member>
        <member name="M:SilDev.Data.DirIsLink(System.String)">
            <summary>
                Determines whether the specified directory is specified as
                reparse point.
            </summary>
            <param name="path">
                The directory to check.
            </param>
        </member>
        <member name="M:SilDev.Data.FileIsLink(System.String)">
            <summary>
                Determines whether the specified file is specified as reparse
                point.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.Data.IsDir(System.String)">
            <summary>
                Determines whether the specified path is specified as directory.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.Data.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
                Sets the specified attributes for the specified path.
            </summary>
            <param name="path">
                The file or directory to change.
            </param>
            <param name="attr">
                The attributes to set.
            </param>
        </member>
        <member name="M:SilDev.Data.DirLink(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Creates a symbolic link to the specified directory based on command prompt
                which allows a simple solution for the elevated execution of this order.
            </summary>
            <param name="linkPath">
                The directory to be linked.
            </param>
            <param name="destDir">
                The fully qualified name of the new link.
            </param>
            <param name="backup">
                true to create an backup for existing directories; otherwise, false.
            </param>
            <param name="elevated">
                true to create this link with highest privileges; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Data.FileLink(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Creates a symbolic link to the specified file based on command prompt which
                allows a simple solution for the elevated execution of this order.
            </summary>
            <param name="linkPath">
                The file to be linked.
            </param>
            <param name="destFile">
                The fully qualified name of the new link.
            </param>
            <param name="backup">
                true to create an backup for existing files; otherwise, false.
            </param>
            <param name="elevated">
                true to create this link with highest privileges; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Data.DirUnLink(System.String,System.Boolean,System.Boolean)">
            <summary>
                Removes an symbolic link of the specified directory link based on command
                prompt which allows a simple solution for the elevated execution of this
                order.
            </summary>
            <param name="path">
                The link to be removed.
            </param>
            <param name="backup">
                true to restore found backups; otherwise, false.
            </param>
            <param name="elevated">
                true to remove this link with highest privileges; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Data.FileUnLink(System.String,System.Boolean,System.Boolean)">
            <summary>
                Removes an symbolic link of the specified file link based on command prompt
                which allows a simple solution for the elevated execution of this order.
            </summary>
            <param name="path">
                The link to be removed.
            </param>
            <param name="backup">
                true to restore found backups; otherwise, false.
            </param>
            <param name="elevated">
                true to remove this link with highest privileges; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Data.DirCopy(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Copies an existing directory to a new location.
            </summary>
            <param name="srcDir">
                The directory to copy.
            </param>
            <param name="destDir">
                The fully qualified name of the destination directory.
            </param>
            <param name="subDirs">
                true to inlcude subdirectories; otherwise, false.
            </param>
            <param name="overwrite">
                true to allow an existing file to be overwritten; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Data.DirSafeMove(System.String,System.String)">
            <summary>
                Copies an existing directory to a new location and deletes the source
                directory if this task has been completed successfully.
            </summary>
            <param name="srcDir">
                The directory to move.
            </param>
            <param name="destDir">
                The fully qualified name of the destination directory.
            </param>
        </member>
        <member name="M:SilDev.Data.GetFullHashCode(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
                Returns the hash code for the specified directory instance member.
            </summary>
            <param name="dirInfo">
                The directory instance member to get the hash code.
            </param>
            <param name="size">
                true to include the size of each file; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Data.GetSize(System.IO.DirectoryInfo)">
            <summary>
                Gets the full size, in bytes, of the specified directory instance member.
            </summary>
            <param name="dirInfo">
                The directory instance to get the size.
            </param>
        </member>
        <member name="M:SilDev.Data.GetLocks(System.Collections.Generic.IList{System.String})">
            <summary>
                Find out which processes have a lock on this file instance member.
            </summary>
            <param name="paths">
                An array that contains the file paths to check.
            </param>
        </member>
        <member name="M:SilDev.Data.GetLocks(System.IO.FileInfo)">
            <summary>
                Find out which processes have a lock on this file instance member.
            </summary>
            <param name="fileInfo">
                The file instance member to check.
            </param>
        </member>
        <member name="M:SilDev.Data.GetLocks(System.IO.DirectoryInfo)">
            <summary>
                Find out which processes have a lock on the files of this directory instance member.
            </summary>
            <param name="dirInfo">
                The directory instance member to check.
            </param>
        </member>
        <member name="M:SilDev.Data.GetLocks(System.String)">
            <summary>
                Find out which processes have a lock on the specified path.
            </summary>
            <param name="path">
                The full path to check.
            </param>
        </member>
        <member name="M:SilDev.Data.ForceDelete(System.String,System.Boolean,System.Int32)">
            <summary>
                <para>
                    Deletes any file or directory.
                </para>
                <para>
                    Immediately stops all specified processes that are locking this file or directory.
                </para>
            </summary>
            <param name="path">
                The path of the file or directory to be deleted.
            </param>
            <param name="timelimit">
                The time limit in milliseconds.
            </param>
        </member>
        <member name="M:SilDev.Data.GetVersion(System.IO.FileInfo)">
            <summary>
                Returns the version information associated with this file instance member.
            </summary>
            <param name="fileInfo">
                The file instance member to check.
            </param>
        </member>
        <member name="M:SilDev.Data.GetVersion(System.String)">
            <summary>
                Returns the version information associated with the specified file.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="T:SilDev.Depiction">
            <summary>
                Provides functionality for the <see cref="T:System.Drawing.Color"/>, <see cref="T:System.Drawing.Image"/> descended classes.
            </summary>
        </member>
        <member name="P:SilDev.Depiction.DimEmpty">
            <summary>
                Gets an <see cref="T:System.Drawing.Image"/> object which consists of a semi-transparent black color.
            </summary>
        </member>
        <member name="P:SilDev.Depiction.DefaultSearchSymbol">
            <summary>
                Gets an <see cref="T:System.Drawing.Image"/> object that contains a white 16px large search symbol.
            </summary>
        </member>
        <member name="M:SilDev.Depiction.FromHtmlToColor(System.String,System.Drawing.Color,System.Nullable{System.Byte})">
            <summary>
                Translates an HTML color representation to a GDI+ <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="htmlColor">
                The string representation of the HTML color to translate.
            </param>
            <param name="defColor">
                The color that is set if no HTML color was found.
            </param>
            <param name="alpha">
                The alpha component. Valid values are 0 through 255.
            </param>
        </member>
        <member name="M:SilDev.Depiction.InvertRgb(System.Drawing.Color,System.Nullable{System.Byte})">
            <summary>
                Inverts the three RGB component (red, green, blue) values of the specified
                <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="color">
                The color to invert.
            </param>
            <param name="alpha">
                The alpha component. Valid values are 0 through 255.
            </param>
        </member>
        <member name="M:SilDev.Depiction.ToGrayScale(System.Drawing.Color)">
            <summary>
                Scales the three RGB component (red, green, blue) values of the specified
                <see cref="T:System.Drawing.Color"/> structure to gray.
            </summary>
            <param name="color">
                The color to scale.
            </param>
        </member>
        <member name="M:SilDev.Depiction.ToImage(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
                Initilazies a new instance of the <see cref="T:System.Drawing.Image"/> class with
                the specified color as background.
            </summary>
            <param name="color">
                The color to convert.
            </param>
        </member>
        <member name="M:SilDev.Depiction.GetAverageColor(System.Drawing.Image,System.Boolean)">
            <summary>
                Gets the average RGB component (red, green, blue) values from the specified
                <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="image">
                The input image.
            </param>
            <param name="disposeImage">
                true to release all resources used by the specified <see cref="T:System.Drawing.Image"/>;
                otherwise false.
            </param>
        </member>
        <member name="M:SilDev.Depiction.Redraw(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
                Redraws the specified <see cref="T:System.Drawing.Image"/> with the specified size and
                with the specified rendering quality.
            </summary>
            <param name="image">
                The image to draw.
            </param>
            <param name="width">
                The new width of the image.
            </param>
            <param name="heigth">
                The new heigth of the image.
            </param>
            <param name="quality">
                The rendering quality for the image.
            </param>
        </member>
        <member name="M:SilDev.Depiction.Redraw(System.Drawing.Image,System.Drawing.Drawing2D.SmoothingMode,System.Int32)">
            <summary>
                Redraws the specified <see cref="T:System.Drawing.Image"/> with the specified maximum size
                indicator and with the specified rendering quality.
            </summary>
            <param name="image">
                The image to draw.
            </param>
            <param name="quality">
                The rendering quality for the image.
            </param>
            <param name="indicator">
                Specifies the maximal size indicator, which determines when the image
                gets a new size.
            </param>
        </member>
        <member name="M:SilDev.Depiction.Redraw(System.Drawing.Image,System.Int32)">
            <summary>
                Redraws the specified <see cref="T:System.Drawing.Image"/> with the specified maximum size
                indicator and with the highest available rendering quality.
            </summary>
            <param name="image">
                The image to draw.
            </param>
            <param name="indicator">
                Specifies the maximal size indicator, which determines when the image
                gets a new size.
            </param>
        </member>
        <member name="M:SilDev.Depiction.InvertColors(System.Drawing.Image)">
            <summary>
                Inverts the color matrix of the specified <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="image">
                The image to convert.
            </param>
        </member>
        <member name="M:SilDev.Depiction.ToGrayScale(System.Drawing.Image)">
            <summary>
                Scales the color matrix of the specified <see cref="T:System.Drawing.Image"/> to gray.
            </summary>
            <param name="image">
                The image to scale.
            </param>
        </member>
        <member name="M:SilDev.Depiction.SwitchGrayScale(System.Drawing.Image,System.Object,System.Boolean)">
            <summary>
                Scales the color matrix of the specified <see cref="T:System.Drawing.Image"/> to gray and switch
                back to the original image the next time this function is called.
            </summary>
            <param name="image">
                The image to switch.
            </param>
            <param name="key">
                The key for the cache.
            </param>
            <param name="dispose">
                true to dispose the cached <see cref="T:SilDev.Depiction.ImagePair"/>; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Depiction.RecolorPixels(System.Drawing.Image,System.Drawing.Color,System.Drawing.Color)">
            <summary>
                Recolors the pixels of the specified <see cref="T:System.Drawing.Image"/> using a specified
                old color and a specified new color.
            </summary>
            <param name="image">
                The image to change.
            </param>
            <param name="from">
                The color of the pixel to be changed.
            </param>
            <param name="to">
                The new color of the pixel.
            </param>
        </member>
        <member name="M:SilDev.Depiction.GetFrames(System.Drawing.Image,System.Boolean)">
            <summary>
                Gets the frames of the specified <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="image">
                The image to get the frames.
            </param>
            <param name="disposeImage">
                true to dispose the original image; otherwise, false.
            </param>
        </member>
        <member name="T:SilDev.Depiction.ImagePair">
            <summary>
                An base class that provides a pair of two elements of the <see cref="T:System.Drawing.Image"/>
                class.
            </summary>
        </member>
        <member name="P:SilDev.Depiction.ImagePair.Image1">
            <summary>
                Gets the first image of this <see cref="T:SilDev.Depiction.ImagePair"/>.
            </summary>
        </member>
        <member name="P:SilDev.Depiction.ImagePair.Image2">
            <summary>
                Gets the second image of this <see cref="T:SilDev.Depiction.ImagePair"/>.
            </summary>
        </member>
        <member name="M:SilDev.Depiction.ImagePair.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.Depiction.ImagePair"/>.
            </summary>
        </member>
        <member name="T:SilDev.Depiction.Frame">
            <summary>
                An base class that provides the <see cref="T:System.Drawing.Image"/> and duration
                of a single frame.
            </summary>
        </member>
        <member name="M:SilDev.Depiction.Frame.#ctor(System.Drawing.Image,System.Int32)">
            <summary>
                Initilazies a new instance of the <see cref="T:SilDev.Depiction.Frame"/> class from the
                specified existing image and duration time of a single frame.
            </summary>
            <param name="image">
                The frame image from which to create the new Frame.
            </param>
            <param name="duration">
                The duration time, in milliseconds, of the new frame.
            </param>
        </member>
        <member name="P:SilDev.Depiction.Frame.Image">
            <summary>
                Gets the image of this <see cref="T:SilDev.Depiction.Frame"/>.
            </summary>
        </member>
        <member name="P:SilDev.Depiction.Frame.Duration">
            <summary>
                Gets the duration time, in milliseconds, of this <see cref="T:SilDev.Depiction.Frame"/>.
            </summary>
        </member>
        <member name="M:SilDev.Depiction.Frame.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.Depiction.Frame"/>.
            </summary>
        </member>
        <member name="T:SilDev.Elevation">
            <summary>
                Provides funcionality for the user authorization on Windows.
            </summary>
        </member>
        <member name="P:SilDev.Elevation.IsAdministrator">
            <summary>
                Determines whether the current principal belongs to the Windows administrator
                user group.
            </summary>
        </member>
        <member name="M:SilDev.Elevation.WritableLocation(System.String)">
            <summary>
                Determines whether the current principal has enough privileges to write in the
                specified directory.
            </summary>
            <param name="path">
                The directory to check.
            </param>
        </member>
        <member name="M:SilDev.Elevation.WritableLocation">
            <summary>
                Determines whether the current principal has enough privileges to write in the
                specified directory.
            </summary>
        </member>
        <member name="M:SilDev.Elevation.RestartAsAdministrator(System.String)">
            <summary>
                Restarts the current process with highest privileges.
            </summary>
            <param name="cmdLineArgs">
                The command-line arguments to use when starting the application. Use null to use
                the current arguments, which are already in use.
            </param>
        </member>
        <member name="T:SilDev.EnvironmentEx">
            <summary>
                Provides static methods based on the <see cref="T:System.Environment"/> class to provide informations
                about the current environment.
            </summary>
        </member>
        <member name="P:SilDev.EnvironmentEx.Version">
            <summary>
                Gets a <see cref="T:System.Version"/> object that describes the major, minor and
                build numbers of the common language runtime.
            </summary>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLineArgs(System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Provides filtering and sorting options, and returns a string <see cref="T:System.Collections.Generic.List`1"/>
                containing the command-line arguments for the current process.
            </summary>
            <param name="sort">
                true to sort the arguments ascended with the rules of
                <see cref="M:SilDev.Comparison.AlphanumericComparer.#ctor(System.Boolean)"/> before returning the arguments;
                otherwise, false.
            </param>
            <param name="skip">
                The number of arguments to skip before returning the remaining arguments.
            </param>
            <param name="quotes">
                true to store the arguments in quotation marks which containing spaces; otherwise,
                false.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLineArgs(System.Boolean,System.Boolean)">
            <summary>
                Provides filtering and sorting options, and returns a string <see cref="T:System.Collections.Generic.List`1"/>
                containing the command-line arguments for the current process.
            </summary>
            <param name="sort">
                true to sort the arguments ascended with the rules of
                <see cref="M:SilDev.Comparison.AlphanumericComparer.#ctor(System.Boolean)"/> before returning the arguments;
                otherwise, false.
            </param>
            <param name="quotes">
                true to store the arguments in quotation marks which containing spaces; otherwise,
                false.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLineArgs(System.Int32)">
            <summary>
                Provides filtering and sorting options, and returns a string <see cref="T:System.Collections.Generic.List`1"/>
                containing the command-line arguments for the current process.
            </summary>
            <param name="skip">
                The number of arguments to skip before returning the remaining arguments.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLine(System.Boolean,System.Int32,System.Boolean)">
            <summary>
                Provides filtering and sorting options, and returns a string containing the
                command-line arguments for the current process.
            </summary>
            <param name="sort">
                true to sort the arguments ascended with the rules of
                <see cref="M:SilDev.Comparison.AlphanumericComparer.#ctor(System.Boolean)"/> before returning the arguments;
                otherwise, false.
            </param>
            <param name="skip">
                The number of arguments to skip before returning the remaining arguments.
            </param>
            <param name="quotes">
                true to store the arguments in quotation marks which containing spaces; otherwise,
                false.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLine(System.Boolean,System.Boolean)">
            <summary>
                Provides filtering and sorting options, and returns a string containing the
                command-line arguments for the current process.
            </summary>
            <param name="sort">
                true to sort the arguments ascended with the rules of
                <see cref="M:SilDev.Comparison.AlphanumericComparer.#ctor(System.Boolean)"/> before returning the arguments;
                otherwise, false.
            </param>
            <param name="quotes">
                true to store the arguments in quotation marks which containing spaces; otherwise,
                false.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.CommandLine(System.Int32)">
            <summary>
                Provides filtering and sorting options, and returns a string containing the
                command-line arguments for the current process.
            </summary>
            <param name="skip">
                The number of arguments to skip before returning the remaining arguments.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)">
            <summary>
                <para>
                    Retrieves the value of an environment variable from the current process.
                </para>
                <para>
                    <c>
                        Hint:
                    </c>
                    Allows <see cref="T:System.Environment.SpecialFolder"/> names inlcuding a
                    keyword "CurDir" to get the current code base location based
                    on <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/>.CodeBase.
                </para>
            </summary>
            <param name="variable">
                The name of the environment variable.
            </param>
            <param name="lower">
                true to convert the result to lowercase; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.GetVariablePath(System.String,System.Boolean)">
            <summary>
                Converts the specified path to an existing environment variable, if possible.
            </summary>
            <param name="path">
                The path to convert.
            </param>
            <param name="curDir">
                true to consider the <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/>.CodeBase value;
                otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.GetVariablePathFull(System.String,System.Boolean)">
            <summary>
                Returns a new string in which all occurrences in this instance are replaced
                with a valid environment variable.
            </summary>
            <param name="path">
                The path to convert.
            </param>
            <param name="curDir">
                true to consider the <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/>.CodeBase value;
                otherwise, false.
            </param>
        </member>
        <member name="T:SilDev.EnvironmentEx.Redist">
            <summary>
                Provides functionality to verify the installation of redistributable packages.
            </summary>
        </member>
        <member name="T:SilDev.EnvironmentEx.Redist.Flags">
            <summary>
                Provides identity flags of redistributable packages.
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2005X86">
            <summary>
                Microsoft Visual C++ 2005 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2005X64">
            <summary>
                Microsoft Visual C++ 2005 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2008X86">
            <summary>
                Microsoft Visual C++ 2008 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2008X64">
            <summary>
                Microsoft Visual C++ 2008 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2010X86">
            <summary>
                Microsoft Visual C++ 2010 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2010X64">
            <summary>
                Microsoft Visual C++ 2010 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2012X86">
            <summary>
                Microsoft Visual C++ 2012 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2012X64">
            <summary>
                Microsoft Visual C++ 2012 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2013X86">
            <summary>
                Microsoft Visual C++ 2013 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2013X64">
            <summary>
                Microsoft Visual C++ 2013 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2015X86">
            <summary>
                Microsoft Visual C++ 2015 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2015X64">
            <summary>
                Microsoft Visual C++ 2015 Redistributable Package (x64).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2017X86">
            <summary>
                Microsoft Visual C++ 2017 Redistributable Package (x86).
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.Redist.Flags.VC2017X64">
            <summary>
                Microsoft Visual C++ 2017 Redistributable Package (x64).
            </summary>
        </member>
        <member name="M:SilDev.EnvironmentEx.Redist.GetDisplayNames(System.Boolean)">
            <summary>
                Returns the display names of all installed Microsoft Visual C++ redistributable packages.
            </summary>
            <param name="refresh">
                true to refresh all names; otherwise, false to get the cached names from previous call.
                <para>
                    Please note that this parameter is always true if this function has never been called
                    before.
                </para>
            </param>
        </member>
        <member name="M:SilDev.EnvironmentEx.Redist.IsInstalled(SilDev.EnvironmentEx.Redist.Flags[])">
            <summary>
                Determines whether the specified redistributable package is installed.
            </summary>
            <param name="keys">
                The redistributable package keys to check.
            </param>
        </member>
        <member name="T:SilDev.EnvironmentEx.SystemRestore">
            <summary>
                Provides functionality to handle system restore points.
            </summary>
        </member>
        <member name="T:SilDev.EnvironmentEx.SystemRestore.EventType">
            <summary>
                The type of event. For more information, see <see cref="M:SilDev.EnvironmentEx.SystemRestore.Create(System.String,SilDev.EnvironmentEx.SystemRestore.EventType,SilDev.EnvironmentEx.SystemRestore.PointType)"/>.
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.SystemRestore.EventType.BeginNestedSystemChange">
            <summary>
                A system change has begun. A subsequent nested call does not create a new restore
                point.
                <para>
                    Subsequent calls must use <see cref="F:SilDev.EnvironmentEx.SystemRestore.EventType.EndNestedSystemChange"/>, not
                    <see cref="F:SilDev.EnvironmentEx.SystemRestore.EventType.EndSystemChange"/>.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.SystemRestore.EventType.BeginSystemChange">
            <summary>
                A system change has begun.
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.SystemRestore.EventType.EndNestedSystemChange">
            <summary>
                A system change has ended.
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.SystemRestore.EventType.EndSystemChange">
            <summary>
                A system change has ended.
            </summary>
        </member>
        <member name="T:SilDev.EnvironmentEx.SystemRestore.PointType">
            <summary>
                The type of restore point. For more information, see <see cref="M:SilDev.EnvironmentEx.SystemRestore.Create(System.String,SilDev.EnvironmentEx.SystemRestore.EventType,SilDev.EnvironmentEx.SystemRestore.PointType)"/>.
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.SystemRestore.PointType.ApplicationInstall">
            <summary>
                An application has been installed.
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.SystemRestore.PointType.ApplicationUninstall">
            <summary>
                An application has been uninstalled.
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.SystemRestore.PointType.CancelledOperation">
            <summary>
                An application needs to delete the restore point it created. For example, an
                application would use this flag when a user cancels an installation.
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.SystemRestore.PointType.DeviceDriverInstall">
            <summary>
                A device driver has been installed.
            </summary>
        </member>
        <member name="F:SilDev.EnvironmentEx.SystemRestore.PointType.ModifySettings">
            <summary>
                An application has had features added or removed.
            </summary>
        </member>
        <member name="P:SilDev.EnvironmentEx.SystemRestore.IsEnabled">
            <summary>
                Determines whether the system restoring is enabled.
            </summary>
        </member>
        <member name="M:SilDev.EnvironmentEx.SystemRestore.Create(System.String,SilDev.EnvironmentEx.SystemRestore.EventType,SilDev.EnvironmentEx.SystemRestore.PointType)">
            <summary>
                Creates a restore point on the local system.
            </summary>
            <param name="description">
                The description to be displayed so the user can easily identify a restore point.
            </param>
            <param name="eventType">
                The type of event.
            </param>
            <param name="restorePointType">
                The type of restore point.
            </param>
        </member>
        <member name="T:SilDev.Ini">
            <summary>
                Provides the functionality to handle the INI format.
            </summary>
        </member>
        <member name="P:SilDev.Ini.MaxCacheSize">
            <summary>
                Gets or sets the maximum number of cached files.
            </summary>
        </member>
        <member name="P:SilDev.Ini.SortBySections">
            <summary>
                Specifies a sequence of section names to be sorted first.
            </summary>
        </member>
        <member name="P:SilDev.Ini.FilePath">
            <summary>
                Gets or sets a default INI file.
            </summary>
        </member>
        <member name="M:SilDev.Ini.SaveCache(System.String,System.String)">
            <summary>
                Save the cached data to the specified file.
            </summary>
            <param name="cacheFilePath">
                The full file path of the cache file to create.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file. If this parameter is NULL, all
                cached data are saved.
            </param>
        </member>
        <member name="M:SilDev.Ini.LoadCache(System.String)">
            <summary>
                <para>
                    Loads the data of a cache file into memory.
                </para>
                <para>
                    Please note that <see cref="P:SilDev.Ini.MaxCacheSize"/> is ignored in this case.
                </para>
            </summary>
            <param name="cacheFilePath">
                The full path of a cache file.
            </param>
        </member>
        <member name="M:SilDev.Ini.GetFile">
            <summary>
                Gets the full path of the default INI file.
            </summary>
        </member>
        <member name="M:SilDev.Ini.SetFile(System.String[])">
            <summary>
                Specifies an INI file to use as default.
            </summary>
            <param name="paths">
                An array of parts of the path.
            </param>
        </member>
        <member name="M:SilDev.Ini.Detach(System.String)">
            <summary>
                Removes the read content of an INI file from cache.
            </summary>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.GetSections(System.String,System.Boolean)">
            <summary>
                Retrieves all section names of an INI file or an INI file formatted string value.
            </summary>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="sorted">
                true to sort the sections; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Ini.GetSections(System.Boolean)">
            <summary>
                Retrieves all section names of an INI file or an INI file formatted string value.
            </summary>
            <param name="sorted">
                true to sort the sections; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Ini.RemoveSection(System.String,System.String)">
            <summary>
                Removes the specified section including all associated keys of an INI file
                or an INI file formatted string value.
            </summary>
            <param name="section">
                The name of the section to remove.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.GetKeys(System.String,System.String,System.Boolean)">
            <summary>
                Retrieves all key names of an INI file or an INI file formatted string value.
            </summary>
            <param name="section">
                The name of the section to get the key names. The value must be NULL to get all the
                key names of the specified fileOrContent parameter.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="sorted">
                true to sort keys; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Ini.GetKeys(System.String,System.Boolean)">
            <summary>
                Retrieves all key names of an INI file or an INI file formatted string value.
            </summary>
            <param name="section">
                The name of the section to get the key names. The value must be NULL to get all the
                key names of the specified fileOrContent parameter.
            </param>
            <param name="sorted">
                true to sort keys; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Ini.RemoveKey(System.String,System.String,System.String)">
            <summary>
                Removes the specified key from the specified section, of an INI file or an INI
                file formatted string value.
            </summary>
            <param name="section">
                The name of the section containing the key to remove.
            </param>
            <param name="key">
                The name of the key to remove.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.ReadAll(System.String,System.Boolean)">
            <summary>
                Retrieves the full content of an INI file or an INI file formatted string value.
            </summary>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="sorted">
                true to sort the sections and keys; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Ini.ReadAll(System.Boolean)">
            <summary>
                Retrieves the full content of an INI file or an INI file formatted string value.
            </summary>
            <param name="sorted">
                true to sort the sections and keys; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Ini.Read(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
                Retrieves a <see cref="T:System.String"/> value from the specified section in an INI file
                or an INI file formatted string value.
            </summary>
            <param name="section">
                The name of the section containing the key name. The value must be NULL for a
                non-section key.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="reread">
                true to reread the INI file; otherwise, false.
            </param>
            <param name="index">
                The value index used to handle multiple key value pairs.
            </param>
        </member>
        <member name="M:SilDev.Ini.ReadOnly(System.String,System.String,System.String,System.Int32)">
            <summary>
                Retrieves a <see cref="T:System.String"/> value from the specified section in an INI file
                or an INI file formatted string value and release all cached resources used by
                the specified INI file or the INI file formatted string value.
            </summary>
            <param name="section">
                The name of the section containing the key name. The value must be NULL for a
                non-section key.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="index">
                The value index used to handle multiple key value pairs.
            </param>
        </member>
        <member name="M:SilDev.Ini.Read``1(System.String,System.String,``0,System.String,System.Boolean)">
            <summary>
                Retrieves a value from the specified section in an INI file or an INI file
                formatted string value.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="section">
                The name of the section containing the key name.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="reread">
                true to reread the INI file; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Ini.ReadOnly``1(System.String,System.String,``0,System.String,System.Int32)">
            <summary>
                Retrieves a value from the specified section in an INI file or an INI file
                formatted string value and release all cached resources used by the
                specified INI file or the INI file formatted string value.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="section">
                The name of the section containing the key name.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="index">
                The value index used to handle multiple key value pairs.
            </param>
        </member>
        <member name="M:SilDev.Ini.ReadDirect(System.String,System.String,System.String)">
            <summary>
                <para>
                    Retrieves a <see cref="T:System.String"/> value from the specified section in an INI
                    file.
                </para>
                <para>
                    The Win32-API without file caching is used for reading in this case.
                </para>
            </summary>
            <param name="section">
                The name of the section containing the key name.
            </param>
            <param name="key">
                The name of the key whose associated value is to be retrieved.
            </param>
            <param name="file">
                The full file path of an INI file.
            </param>
        </member>
        <member name="M:SilDev.Ini.WriteAll(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}},System.String,System.Boolean,System.Boolean)">
            <summary>
                Writes the specifed content to an INI file on the disk.
            </summary>
            <param name="content">
                <para>
                    The content based on <see cref="M:SilDev.Ini.ReadAll(System.String,System.Boolean)"/>.
                </para>
                <para>
                    If this parameter is NULL, the function writes all the cached data from the
                    specified INI file to the disk.
                </para>
            </param>
            <param name="file">
                <para>
                    The full file path of an INI file.
                </para>
                <para>
                    If this parameter is NULL, the default INI file is used.
                </para>
            </param>
            <param name="sorted">
                true to sort the sections and keys; otherwise, false.
            </param>
            <param name="detach">
                true to release all cached resources used by the specified INI file; otherwise,
                false.
            </param>
        </member>
        <member name="M:SilDev.Ini.WriteAll(System.String,System.Boolean,System.Boolean)">
            <summary>
                Writes all the cached data from the specified INI file to the disk.
            </summary>
            <param name="file">
                <para>
                    The full file path of an INI file.
                </para>
                <para>
                    If this parameter is NULL, the default INI file is used.
                </para>
            </param>
            <param name="sorted">
                true to sort the sections and keys; otherwise, false.
            </param>
            <param name="detach">
                true to release all cached resources used by the specified INI file; otherwise,
                false.
            </param>
        </member>
        <member name="M:SilDev.Ini.Write``1(System.String,System.String,``0,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                <para>
                    Copies the specified value into the specified section of an INI file.
                </para>
                <para>
                    This function updates only the cache and has no effect on the file until
                    <see cref="M:SilDev.Ini.WriteAll(System.String,System.Boolean,System.Boolean)"/> is called.
                </para>
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="section">
                The name of the section to which the value will be copied.
            </param>
            <param name="key">
                <para>
                    The name of the key to be associated with a value.
                </para>
                <para>
                    If this parameter is NULL, the entire section, including all entries within the
                    section, is deleted.
                </para>
            </param>
            <param name="value">
                <para>
                    The value to be written to the file.
                </para>
                <para>
                    If this parameter is NULL, the key pointed to by the key parameter is deleted.
                </para>
            </param>
            <param name="fileOrContent">
                The full file path or content of an INI file.
            </param>
            <param name="forceOverwrite">
                true to enable overwriting of a key with the same value as specified; otherwise,
                false.
            </param>
            <param name="skipExistValue">
                true to skip an existing value, even it is not the same value as specified;
                otherwise, false.
            </param>
            <param name="index">
                The value index used to handle multiple key value pairs.
            </param>
        </member>
        <member name="M:SilDev.Ini.Write``1(System.String,System.String,``0,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                <para>
                    Copies the specified value into the specified section of an INI file.
                </para>
                <para>
                    This function updates only the cache and has no effect on the file until
                    <see cref="M:SilDev.Ini.WriteAll(System.String,System.Boolean,System.Boolean)"/> is called.
                </para>
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="section">
                The name of the section to which the value will be copied.
            </param>
            <param name="key">
                <para>
                    The name of the key to be associated with a value.
                </para>
                <para>
                    If this parameter is NULL, the entire section, including all entries within the
                    section, is deleted.
                </para>
            </param>
            <param name="value">
                <para>
                    The value to be written to the file.
                </para>
                <para>
                    If this parameter is NULL, the key pointed to by the key parameter is deleted.
                </para>
            </param>
            <param name="forceOverwrite">
                true to enable overwriting of a key with the same value as specified; otherwise,
                false.
            </param>
            <param name="skipExistValue">
                true to skip an existing value, even it is not the same value as specified;
                otherwise, false.
            </param>
            <param name="index">
                The value index used to handle multiple key value pairs.
            </param>
        </member>
        <member name="M:SilDev.Ini.WriteDirect(System.String,System.String,System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
                <para>
                    Copies the <see cref="T:System.String"/> representation of the specified <see cref="T:System.Object"/>
                    value into the specified section of an INI file. If the file does not exist, it is
                    created.
                </para>
                <para>
                    The Win32-API is used for writing in this case. Please note that this function
                    writes the changes directly on the disk. This causes a lot of write accesses if
                    it is used incorrectly.
                </para>
            </summary>
            <param name="section">
                The name of the section to which the value will be copied.
            </param>
            <param name="key">
                <para>
                    The name of the key to be associated with a value.
                </para>
                <para>
                    If this parameter is NULL, the entire section, including all entries within the
                    section, is deleted.
                </para>
            </param>
            <param name="value">
                <para>
                    The value to be written to the file.
                </para>
                <para>
                    If this parameter is NULL, the key pointed to by the key parameter is deleted.
                </para>
            </param>
            <param name="file">
                The full path of an INI file.
            </param>
            <param name="forceOverwrite">
                true to enable overwriting of a key with the same value as specified; otherwise,
                false.
            </param>
            <param name="skipExistValue">
                true to skip an existing value, even it is not the same value as specified;
                otherwise, false.
            </param>
        </member>
        <member name="T:SilDev.Json">
            <summary>
                Provides basic functionality for the JSON format.
            </summary>
        </member>
        <member name="M:SilDev.Json.Create(System.String,System.Object)">
            <summary>
                Creates a new JSON file with the specified object data.
            </summary>
            <param name="path">
                The full path of the file to read.
            </param>
            <param name="obj">
                The object to convert.
            </param>
        </member>
        <member name="M:SilDev.Json.ReadAll(System.String)">
            <summary>
                Retrieves the full content of the specified JSON file.
            </summary>
            <param name="path">
                The full path of the file to read.
            </param>
        </member>
        <member name="M:SilDev.Json.Read(System.String,System.String[])">
            <summary>
                Retrieves a value from the specified key in a JSON file.
            </summary>
            <param name="path">
                The full path of the file to read.
            </param>
            <param name="keys">
                An array of keys to navigate to the exact position of the value.
            </param>
        </member>
        <member name="T:SilDev.KeyState">
            <summary>
                Provides the functionality to send or detect key states.
            </summary>
        </member>
        <member name="T:SilDev.KeyState.VKey">
            <summary>
                Provides enumerated values of Virtual-Key codes.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_LBUTTON">
            <summary>
                Left mouse button.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_RBUTTON">
            <summary>
                Right mouse button.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_CANCEL">
            <summary>
                Control-break processing.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_MBUTTON">
            <summary>
                Middle mouse button (three-button mouse).
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_XBUTTON1">
            <summary>
                X1 mouse button.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_XBUTTON2">
            <summary>
                X2 mouse button.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_BACK">
            <summary>
                BACKSPACE key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_TAB">
            <summary>
                TAB key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_CLEAR">
            <summary>
                CLEAR key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_RETURN">
            <summary>
                ENTER key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_SHIFT">
            <summary>
                SHIFT key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_CONTROL">
            <summary>
                CTRL key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_MENU">
            <summary>
                ALT key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_PAUSE">
            <summary>
                PAUSE key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_CAPITAL">
            <summary>
                CAPS LOCK key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_KANA_HANGUL">
            <summary>
                IME Kana/Hangul mode.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_JUNJA">
            <summary>
                IME Junja mode.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_FINAL">
            <summary>
                IME final mode.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_HANJA_KANJI">
            <summary>
                IME Hanja/Kanji mode.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_ESCAPE">
            <summary>
                ESC key
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_CONVERT">
            <summary>
                IME convert.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NONCONVERT">
            <summary>
                IME nonconvert.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_ACCEPT">
            <summary>
                IME accept.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_MODECHANGE">
            <summary>
                IME mode change request.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_SPACE">
            <summary>
                SPACEBAR key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_PRIOR">
            <summary>
                PAGE UP key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NEXT">
            <summary>
                PAGE DOWN key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_END">
            <summary>
                END key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_HOME">
            <summary>
                HOME key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_LEFT">
            <summary>
                LEFT ARROW key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_UP">
            <summary>
                UP ARROW key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_RIGHT">
            <summary>
                RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_DOWN">
            <summary>
                DOWN ARROW key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_SELECT">
            <summary>
                SELECT key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_PRINT">
            <summary>
                PRINT key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_EXECUTE">
            <summary>
                EXECUTE key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_SNAPSHOT">
            <summary>
                PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_INSERT">
            <summary>
                INS key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_DELETE">
            <summary>
                DEL key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_HELP">
            <summary>
                HELP key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_0">
            <summary>
                0 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_1">
            <summary>
                1 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_2">
            <summary>
                2 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_3">
            <summary>
                3 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_4">
            <summary>
                4 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_5">
            <summary>
                5 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_6">
            <summary>
                6 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_7">
            <summary>
                7 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_8">
            <summary>
                8 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_9">
            <summary>
                9 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_A">
            <summary>
                A key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_B">
            <summary>
                B key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_C">
            <summary>
                C key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_D">
            <summary>
                D key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_E">
            <summary>
                E key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F">
            <summary>
                F key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_G">
            <summary>
                G key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_H">
            <summary>
                H key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_I">
            <summary>
                I key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_J">
            <summary>
                J key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_K">
            <summary>
                K key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_L">
            <summary>
                L key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_M">
            <summary>
                M key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_N">
            <summary>
                N key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_O">
            <summary>
                O key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_P">
            <summary>
                P key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_Q">
            <summary>
                Q key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_R">
            <summary>
                R key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_S">
            <summary>
                S key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_T">
            <summary>
                T key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_U">
            <summary>
                U key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_V">
            <summary>
                V key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_W">
            <summary>
                W key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_X">
            <summary>
                X key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_Y">
            <summary>
                Y key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_Z">
            <summary>
                Z key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_LWIN">
            <summary>
                Left Windows key (natural keyboard).
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_RWIN">
            <summary>
                Right Windows key (natural keyboard).
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_APPS">
            <summary>
                Applications key (natural keyboard).
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_SLEEP">
            <summary>
                Computer Sleep key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMPAD0">
            <summary>
                Numeric keypad 0 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMPAD1">
            <summary>
                Numeric keypad 1 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMPAD2">
            <summary>
                Numeric keypad 2 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMPAD3">
            <summary>
                Numeric keypad 3 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMPAD4">
            <summary>
                Numeric keypad 4 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMPAD5">
            <summary>
                Numeric keypad 5 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMPAD6">
            <summary>
                Numeric keypad 6 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMPAD7">
            <summary>
                Numeric keypad 7 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMPAD8">
            <summary>
                Numeric keypad 8 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMPAD9">
            <summary>
                Numeric keypad 9 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_MULTIPLY">
            <summary>
                Multiply key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_ADD">
            <summary>
                Add key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_SEPARATOR">
            <summary>
                Separator key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_SUBTRACT">
            <summary>
                Subtract key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_DECIMAL">
            <summary>
                Decimal key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_DIVIDE">
            <summary>
                Divide key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F1">
            <summary>
                F1 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F2">
            <summary>
                F2 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F3">
            <summary>
                F3 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F4">
            <summary>
                F4 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F5">
            <summary>
                F5 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F6">
            <summary>
                F6 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F7">
            <summary>
                F7 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F8">
            <summary>
                F8 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F9">
            <summary>
                F9 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F10">
            <summary>
                F10 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F11">
            <summary>
                F11 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F12">
            <summary>
                F12 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F13">
            <summary>
                F13 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F14">
            <summary>
                F14 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F15">
            <summary>
                F15 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F16">
            <summary>
                F16 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F17">
            <summary>
                F17 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F18">
            <summary>
                F18 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F19">
            <summary>
                F19 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F20">
            <summary>
                F20 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F21">
            <summary>
                F21 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F22">
            <summary>
                F22 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F23">
            <summary>
                F23 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_F24">
            <summary>
                F24 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_NUMLOCK">
            <summary>
                NUM LOCK key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_SCROLL">
            <summary>
                SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_LSHIFT">
            <summary>
                Left SHIFT key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_RSHIFT">
            <summary>
                Right SHIFT key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_LCONTROL">
            <summary>
                Left CONTROL key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_RCONTROL">
            <summary>
                Right CONTROL key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_LMENU">
            <summary>
                Left MENU key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_RMENU">
            <summary>
                Right MENU key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_BROWSER_BACK">
            <summary>
                Browser Back key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_BROWSER_FORWARD">
            <summary>
                Browser Forward key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_BROWSER_REFRESH">
            <summary>
                Browser Refresh key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_BROWSER_STOP">
            <summary>
                Browser Stop key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_BROWSER_SEARCH">
            <summary>
                Browser Search key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_BROWSER_FAVORITES">
            <summary>
                Browser Favorites key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_BROWSER_HOME">
            <summary>
                Browser Start and Home key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_VOLUME_MUTE">
            <summary>
                Volume Mute key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_VOLUME_DOWN">
            <summary>
                Volume Down key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_VOLUME_UP">
            <summary>
                Volume Up key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_MEDIA_NEXT_TRACK">
            <summary>
                Next Track key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_MEDIA_PREV_TRACK">
            <summary>
                Previous Track key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_MEDIA_STOP">
            <summary>
                Stop Media key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_MEDIA_PLAY_PAUSE">
            <summary>
                Play/Pause Media key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_LAUNCH_MAIL">
            <summary>
                Start Mail key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_LAUNCH_MEDIA_SELECT">
            <summary>
                Select Media key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_LAUNCH_APP1">
            <summary>
                Select Media key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_LAUNCH_APP2">
            <summary>
                Start Application 2 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_1">
            <summary>
                For the US standard keyboard, the ",:" key .
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_PLUS">
            <summary>
                For any country/region, the "+" key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_COMMA">
            <summary>
                For any country/region, the "," key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_MINUS">
            <summary>
                For any country/region, the "-" key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_PERIOD">
            <summary>
                For any country/region, the "." key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_2">
            <summary>
                For the US standard keyboard, the "/?" key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_3">
            <summary>
                For the US standard keyboard, the "`~" key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_4">
            <summary>
                For the US standard keyboard, the "[{" key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_5">
            <summary>
                For the US standard keyboard, the "\|" key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_6">
            <summary>
                For the US standard keyboard, the "]}" key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_7">
            <summary>
                For the US standard keyboard, the "single-quote/double-quote" key
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_8">
            <summary>
                Used for miscellaneous characters, it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_102">
            <summary>
                Either the angle bracket key or the backslash key on the RT 102-key keyboard.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_PROCESSKEY">
            <summary>
                IME PROCESS key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_PACKET">
            <summary>
                Used to pass Unicode characters as if they were keystrokes. The <see cref="F:SilDev.KeyState.VKey.VK_PACKET"/>
                key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_ATTN">
            <summary>
                Attn key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_CRSEL">
            <summary>
                CrSel key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_EXSEL">
            <summary>
                ExSel key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_EREOF">
            <summary>
                Erase EOF key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_PLAY">
            <summary>
                Play key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_ZOOM">
            <summary>
                Zoom key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_PA1">
            <summary>
                PA1 key.
            </summary>
        </member>
        <member name="F:SilDev.KeyState.VKey.VK_OEM_CLEAR">
            <summary>
                Clear key.
            </summary>
        </member>
        <member name="M:SilDev.KeyState.GetVKeyValue(System.UInt16)">
            <summary>
                Returns the <see cref="T:SilDev.KeyState.VKey"/> of the <see cref="T:System.UInt16"/> representation of a
                Virtual-Key code.
            </summary>
            <param name="key">
                The <see cref="T:SilDev.KeyState.VKey"/> value.
            </param>
        </member>
        <member name="M:SilDev.KeyState.GetVKeyValue(System.String)">
            <summary>
                Returns the <see cref="T:SilDev.KeyState.VKey"/> of the <see cref="T:System.String"/> representation of a
                Virtual-Key code.
            </summary>
            <param name="key">
                The <see cref="T:System.String"/> representation of a Virtual-Key code.
            </param>
        </member>
        <member name="M:SilDev.KeyState.GetVKeyCode(SilDev.KeyState.VKey)">
            <summary>
                Returns the <see cref="T:System.UInt16"/> representation of the <see cref="T:SilDev.KeyState.VKey"/> value.
            </summary>
            <param name="key">
                The <see cref="T:SilDev.KeyState.VKey"/> value.
            </param>
        </member>
        <member name="M:SilDev.KeyState.GetVKeyCode(System.String)">
            <summary>
                Returns the <see cref="T:System.UInt16"/> representation of the <see cref="T:System.String"/> representation
                of a Virtual-Key code.
            </summary>
            <param name="key">
                The <see cref="T:System.String"/> representation of a Virtual-Key code.
            </param>
        </member>
        <member name="M:SilDev.KeyState.GetVKeyString(SilDev.KeyState.VKey)">
            <summary>
                Returns the <see cref="T:System.String"/> representation of the <see cref="T:SilDev.KeyState.VKey"/> value.
            </summary>
            <param name="key">
                The <see cref="T:SilDev.KeyState.VKey"/> value.
            </param>
        </member>
        <member name="M:SilDev.KeyState.GetVKeyString(System.UInt16)">
            <summary>
                Returns the <see cref="T:System.String"/> representation of the <see cref="T:System.UInt16"/> representation
                of a Virtual-Key code.
            </summary>
            <param name="key">
                The <see cref="T:System.UInt16"/> representation of a Virtual-Key code.
            </param>
        </member>
        <member name="M:SilDev.KeyState.GetState(SilDev.KeyState.VKey)">
            <summary>
                Determines whether a key is up or down at the time the function is called, and whether the
                key was pressed after a previous call to <see cref="M:SilDev.KeyState.GetState(SilDev.KeyState.VKey)"/>.
            </summary>
            <param name="key">
                The <see cref="T:SilDev.KeyState.VKey"/> value to check.
            </param>
        </member>
        <member name="M:SilDev.KeyState.GetState(System.UInt16)">
            <summary>
                Determines whether a key is up or down at the time the function is called, and whether the
                key was pressed after a previous call to <see cref="M:SilDev.KeyState.GetState(System.UInt16)"/>.
            </summary>
            <param name="key">
                The <see cref="T:System.UInt16"/> representation of a Virtual-Key code to check.
            </param>
        </member>
        <member name="M:SilDev.KeyState.GetState(System.String)">
            <summary>
                Determines whether a key is up or down at the time the function is called, and whether the
                key was pressed after a previous call to <see cref="M:SilDev.KeyState.GetState(System.String)"/>.
            </summary>
            <param name="key">
                The <see cref="T:System.String"/> representation of a Virtual-Key code to check.
            </param>
        </member>
        <member name="M:SilDev.KeyState.GetStates">
            <summary>
                Determines which keys were up or down at the time the function is called, and which keys
                were pressed.
            </summary>
        </member>
        <member name="M:SilDev.KeyState.SendState(System.IntPtr,SilDev.KeyState.VKey)">
            <summary>
                Places (posts) a key up and down message in the message queue associated with the thread
                that created the specified window and returns without waiting for the thread to process
                the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure is to receive the message.
            </param>
            <param name="key">
                The <see cref="T:SilDev.KeyState.VKey"/> value to send.
            </param>
        </member>
        <member name="M:SilDev.KeyState.SendMouseClick">
            <summary>
                Synthesizes a left mouse button click to the active window.
            </summary>
        </member>
        <member name="T:SilDev.Log">
            <summary>
                Provides functionality for the catching and logging of handled or unhandled
                <see cref="T:System.Exception"/>'s.
            </summary>
        </member>
        <member name="P:SilDev.Log.CatchUnhandledExceptions">
            <summary>
                true to enable the catching of unhandled <see cref="T:System.Exception"/>'s; otherwise, false.
            </summary>
        </member>
        <member name="P:SilDev.Log.CurrentCulture">
            <summary>
                Gets or sets the culture for the current thread.
            </summary>
        </member>
        <member name="P:SilDev.Log.DebugMode">
            <summary>
                Gets the current <see cref="P:SilDev.Log.DebugMode"/> value that determines how <see cref="T:System.Exception"/>'s
                are handled. For more informations see <see cref="M:SilDev.Log.ActivateLogging(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:SilDev.Log.FileName">
            <summary>
                Gets the name of the current LOG file.
            </summary>
        </member>
        <member name="P:SilDev.Log.FileDir">
            <summary>
                <para>
                    Gets or sets the location of the current LOG file.
                </para>
                <para>
                    If the specified path doesn't exists, it is created.
                </para>
                <para>
                    If the specified path is invalid or this process doesn't have the necessary permissions
                    to write to this location, the location is changed to the Windows specified folder for
                    temporary files.
                </para>
            </summary>
        </member>
        <member name="P:SilDev.Log.FilePath">
            <summary>
                Gets the full path of the current log file.
            </summary>
        </member>
        <member name="M:SilDev.Log.ActivateLogging(System.Int32)">
            <summary>
                <para>
                    Specifies the <see cref="P:SilDev.Log.DebugMode"/> for the handling of <see cref="T:System.Exception"/>'s.
                    The <see cref="P:SilDev.Log.DebugMode"/> can also specified over an command line argument or an
                    config parameter in combination with <see cref="M:SilDev.Log.AllowLogging(System.String,System.String,System.String)"/>.
                    The following <see cref="P:SilDev.Log.DebugMode"/> options are available.
                </para>
                <para>
                    0: Logging is disabled. If <see cref="P:SilDev.Log.CatchUnhandledExceptions"/> is enabled, unhandled
                    <see cref="T:System.Exception"/>'s are discarded as well. This can be useful for public releases
                    to prevent any kind of <see cref="T:System.Exception"/> notifications to the client. Please note
                    that these functions may have dangerous consequences if used incorrectly.
                </para>
                <para>
                    1: Logging is enabled and all <see cref="T:System.Exception"/>'s are logged.
                </para>
                <para>
                    2: Logging is enabled, all <see cref="T:System.Exception"/>'s are logged, and a new
                    <see cref="T:System.Console"/> window is allocated for the current process to display the current
                    log in real time.
                </para>
            </summary>
        </member>
        <member name="M:SilDev.Log.AllowLogging(System.String,System.String,System.String)">
            <summary>
                Allows you to enable logging by command line arguments or a specified configuration file. For
                more informations see <see cref="M:SilDev.Log.ActivateLogging(System.Int32)"/>.
            </summary>
            <param name="configPath">
                The full path of the configuration file.
            </param>
            <param name="key">
                The key used to specify the <see cref="P:SilDev.Log.DebugMode"/>.
            </param>
            <param name="pattern">
                <para>
                    The regular expression pattern to match.
                </para>
                <para>
                    Please note that the default pattern is optimized to search within INI formatted files. The
                    &lt;Key&gt; and &lt;Value&gt; tags are required in all search pattern.
                </para>
            </param>
        </member>
        <member name="M:SilDev.Log.Write(System.String,System.Boolean)">
            <summary>
                Writes the specified information into a log file.
            </summary>
            <param name="logMessage">
                The message text to write.
            </param>
            <param name="exitProcess">
                true to terminate this process after logging; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Log.Write(System.Exception,System.Boolean,System.Boolean)">
            <summary>
                Writes all <see cref="T:System.Exception"/> information into a log file.
            </summary>
            <param name="exception">
                The handled <see cref="T:System.Exception"/> to write.
            </param>
            <param name="forceLogging">
                true to enforce that <see cref="P:SilDev.Log.DebugMode"/> is enabled; otherwise, false.
            </param>
            <param name="exitProcess">
                true to terminate this process after logging; otherwise, false.
            </param>
        </member>
        <member name="T:SilDev.Media">
            <summary>
                Provides functionality for playing WAV files and controlling the volume of applications.
            </summary>
        </member>
        <member name="M:SilDev.Media.PlayWave(System.IO.Stream)">
            <summary>
                Plays audio data from the specified stream.
            </summary>
            <param name="stream">
                The sound data to play.
            </param>
        </member>
        <member name="M:SilDev.Media.PlayWaveAsync(System.IO.Stream)">
            <summary>
                Plays audio data from the specified stream. This method does not block the calling thread.
            </summary>
            <param name="stream">
                The sound data to play.
            </param>
        </member>
        <member name="T:SilDev.Media.DeviceManager">
            <summary>
                Provides functionality to control the volume of applications.
            </summary>
        </member>
        <member name="M:SilDev.Media.DeviceManager.GetApplicationVolume(System.String)">
            <summary>
                Retrieves the volume of the specified application.
            </summary>
            <param name="name">
                The name of the application.
            </param>
        </member>
        <member name="M:SilDev.Media.DeviceManager.GetApplicationMute(System.String)">
            <summary>
                Determines whether the specified application is muted.
            </summary>
            <param name="name">
                The name of the application.
            </param>
        </member>
        <member name="M:SilDev.Media.DeviceManager.SetApplicationVolume(System.String,System.Single)">
            <summary>
                Sets the volume of the specified application.
            </summary>
            <param name="name">
                The name of the application to change.
            </param>
            <param name="level">
                The volume level to set.
            </param>
        </member>
        <member name="M:SilDev.Media.DeviceManager.SetApplicationMute(System.String,System.Boolean)">
            <summary>
                Mutes the volume of the specified application.
            </summary>
            <param name="name">
                The name of the application to change.
            </param>
            <param name="mute">
                true to mute; otherwise, false to unmute.
            </param>
        </member>
        <member name="T:SilDev.Media.WindowsPlayer">
            <summary>
                Provides basic functionality of the Windows library to play audio files.
            </summary>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.TimeBeginPeriod(System.UInt32)">
            <summary>
                Requests a minimum resolution for periodic timers.
            </summary>
            <param name="uPeriod">
                Minimum timer resolution, in milliseconds, for the application or device driver. A lower
                value specifies a higher (more accurate) resolution.
            </param>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.TimeEndPeriod(System.UInt32)">
            <summary>
                Clears a previously set minimum timer resolution.
            </summary>
            <param name="uPeriod">
                Minimum timer resolution specified in the previous call to the
                <see cref="M:SilDev.Media.WindowsPlayer.TimeBeginPeriod(System.UInt32)"/> function.
            </param>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.GetSoundVolume">
            <summary>
                Retrieves the sound volume of the current application.
            </summary>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.SetSoundVolume(System.Int32)">
            <summary>
                Sets the specified sound volume of the current application.
            </summary>
            <param name="value">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.Play(System.String,System.Boolean,System.Int32)">
            <summary>
                Plays the specified sound file.
            </summary>
            <param name="path">
                THe full path of the sound file to play.
            </param>
            <param name="loop">
                true to loop the sound; otherwise, false.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.Play(System.String,System.Int32)">
            <summary>
                Plays the specified sound file.
            </summary>
            <param name="path">
                THe full path of the sound file to play.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.WindowsPlayer.Stop">
            <summary>
                Stops playing sounds.
            </summary>
        </member>
        <member name="T:SilDev.Media.IrrKlangPlayer">
            <summary>
                <para>
                    Provides basic functionality of the IrrKlang library.
                </para>
                <para>
                    Please note that this class requires the binaries of the IrrKlang library.
                </para>
            </summary>
        </member>
        <member name="M:SilDev.Media.IrrKlangPlayer.Play(System.String,System.Boolean,System.Int32)">
            <summary>
                Plays the specified sound file.
            </summary>
            <param name="path">
                THe full path of the sound file to play.
            </param>
            <param name="loop">
                true to repeat the sound track; otherwise, false.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.IrrKlangPlayer.Play(System.String,System.Int32)">
            <summary>
                Plays the specified sound file.
            </summary>
            <param name="path">
                THe full path of the sound file to play.
            </param>
            <param name="volume">
                The sound volume value, in percent.
            </param>
        </member>
        <member name="M:SilDev.Media.IrrKlangPlayer.Stop">
            <summary>
                Stops playing sounds.
            </summary>
        </member>
        <member name="M:SilDev.MemoryPinner.#ctor(System.Object)">
            <summary>
                Initilazies a new instance of the <see cref="T:SilDev.MemoryPinner"/> class with
                the specified object to pin.
            </summary>
            <param name="value">
                The object to pin.
            </param>
        </member>
        <member name="P:SilDev.MemoryPinner.Pointer">
            <summary>
                Returns the pointer to the pinned object.
            </summary>
        </member>
        <member name="M:SilDev.MemoryPinner.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.MemoryPinner"/>.
            </summary>
        </member>
        <member name="M:SilDev.ProcessMemory.#ctor(System.IntPtr)">
            <summary>
                Initilazies a new instance of the <see cref="T:SilDev.ProcessMemory"/> class with
                the specified window handle.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.ProcessMemory.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.ProcessMemory"/>.
            </summary>
        </member>
        <member name="M:SilDev.ProcessMemory.GetImageFileName">
            <summary>
                Gets the file name of the process image.
            </summary>
        </member>
        <member name="M:SilDev.ProcessMemory.Allocate(System.Object)">
            <summary>
                Allocates a chunck of memory in the process.
            </summary>
            <param name="value">
                The structure to be allocated.
            </param>
        </member>
        <member name="M:SilDev.ProcessMemory.Read(System.Object,System.IntPtr)">
            <summary>
                Reads data from an area of memory in a specified process.
            </summary>
            <param name="value">
                The structure to be allocated.
            </param>
            <param name="address">
                A pointer to the base address in the specified process from which to read.
            </param>
        </member>
        <member name="M:SilDev.ProcessMemory.ReadString(System.Int32,System.IntPtr)">
            <summary>
                Reads a string from an area of memory in a specified process.
            </summary>
            <param name="size">
                The number of bytes to be read from the specified process.
            </param>
            <param name="address">
                A pointer to the base address in the specified process from which to read.
            </param>
        </member>
        <member name="M:SilDev.ProcessMemory.Write(System.Object,System.Int32,System.IntPtr)">
            <summary>
                Writes data to an area of memory in a specified process.
            </summary>
            <param name="value">
                The structure to be allocated.
            </param>
            <param name="size">
                The number of bytes to be written to the specified process.
            </param>
            <param name="buffer">
                A pointer to the buffer that contains data to be written in the address
                space of the specified process.
            </param>
        </member>
        <member name="T:SilDev.MemoryException">
            <summary>
                The exception that is thrown when an attempt to access some data in memory.
            </summary>
        </member>
        <member name="M:SilDev.MemoryException.#ctor">
            <summary>
                Create the exception.
            </summary>
        </member>
        <member name="M:SilDev.MemoryException.#ctor(System.String)">
            <summary>
                Create the exception with a specified error message.
            </summary>
            <param name="message">
                Exception message.
            </param>
        </member>
        <member name="P:SilDev.MemoryException.Message">
            <summary>
                Gets the error message.
            </summary>
        </member>
        <member name="T:SilDev.NetEx">
            <summary>
                Provides functionality for the access of internet resources.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.LastPingReply">
            <summary>
                Gets the last result defined in the previous call to the <see cref="M:SilDev.NetEx.Ping(System.Uri)"/> function.
            </summary>
        </member>
        <member name="M:SilDev.NetEx.InternetIsAvailable(System.Boolean)">
            <summary>
                Checks the current network connection.
            </summary>
            <param name="iPv6">
                true to check only the IPv6 protocol; otherwise, false to check only the IPv4 protocol.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Ping(System.Uri)">
            <summary>
                Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified
                computer, and receive a corresponding ICMP echo replay message from that computer and
                returns the number of milliseconds taken for this task.
            </summary>
            <param name="uri">
                The address of the server to call.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Ping(System.String)">
            <summary>
                Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified
                computer, and receive a corresponding ICMP echo replay message from that computer and
                returns the number of milliseconds taken for this task.
            </summary>
            <param name="host">
                The address of the server to call.
            </param>
        </member>
        <member name="M:SilDev.NetEx.ToUri(System.String)">
            <summary>
                Converts this <see cref="T:System.String"/> to a <see cref="T:System.Uri"/>.
            </summary>
            <param name="str">
                The <see cref="T:System.String"/> to convert.
            </param>
        </member>
        <member name="M:SilDev.NetEx.ToHttpUri(System.String)">
            <summary>
                Converts this <see cref="T:System.String"/> to a <see cref="T:System.Uri"/> with HTTP scheme.
            </summary>
            <param name="str">
                The <see cref="T:System.String"/> to convert.
            </param>
        </member>
        <member name="M:SilDev.NetEx.IsValid(System.Uri,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet address.
            </summary>
            <param name="uri">
                The address to check.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.FileIsAvailable(System.Uri,System.String,System.String,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.FileIsAvailable(System.Uri,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.FileIsAvailable(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.FileIsAvailable(System.String,System.Int32,System.String)">
            <summary>
                Determines the availability of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.GetFileDate(System.Uri,System.String,System.String,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.GetFileDate(System.Uri,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.GetFileDate(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.GetFileDate(System.String,System.Int32,System.String)">
            <summary>
                Gets the last date and time of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.GetFileName(System.Uri,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.GetFileName(System.String,System.String)">
            <summary>
                Gets the filename of the specified internet resource.
            </summary>
            <param name="srcUri">
                The full path of the resource to access.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="T:SilDev.NetEx.Transfer">
            <summary>
                Provides static methods for downloading internet resources.
            </summary>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadFile(System.Uri,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadFile(System.Uri,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadFile(System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadFile(System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadData(System.Uri,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadData(System.Uri,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadData(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadData(System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadString(System.Uri,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadString(System.Uri,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadString(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.Transfer.DownloadString(System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="T:SilDev.NetEx.AsyncTransfer">
            <summary>
                Provides asynchonous downloading of internet resources.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.Address">
            <summary>
                Gets the address to the resource.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.FilePath">
            <summary>
                Gets the local path of the resource.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.BytesReceived">
            <summary>
                Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.TotalBytesToReceive">
            <summary>
                Gets the total number of bytes received.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.DataReceived">
            <summary>
                Gets the total number of <see cref="P:SilDev.NetEx.AsyncTransfer.BytesReceived"/> and <see cref="P:SilDev.NetEx.AsyncTransfer.BytesReceived"/>
                received in megabyte.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.ProgressPercentage">
            <summary>
                Gets the asynchronous progress percentage.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.TransferSpeed">
            <summary>
                Gets the megabyte per second of the asynchronous transfer.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.TransferSpeedAd">
            <summary>
                Gets the string representation of the speed of the asynchronous transfer.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.TimeElapsed">
            <summary>
                Gets the total elapsed time.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.HasCanceled">
            <summary>
                Determines whether the transfer has been canceled.
            </summary>
        </member>
        <member name="P:SilDev.NetEx.AsyncTransfer.IsBusy">
            <summary>
                Gets whether a transfer is in progress.
            </summary>
        </member>
        <member name="M:SilDev.NetEx.AsyncTransfer.DownloadFile(System.Uri,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.AsyncTransfer.DownloadFile(System.Uri,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.AsyncTransfer.DownloadFile(System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="userName">
                The username associated with the credential.
            </param>
            <param name="password">
                The password associated with the credential.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.AsyncTransfer.DownloadFile(System.String,System.String,System.Int32,System.String)">
            <summary>
                Downloads the specified internet resource to a local file.
            </summary>
            <param name="srcUri">
                The full path of the resource to download.
            </param>
            <param name="destPath">
                The local destination path of the file.
            </param>
            <param name="timeout">
                The time-out value in milliseconds.
            </param>
            <param name="userAgent">
                The value of the User-agent HTTP header.
            </param>
        </member>
        <member name="M:SilDev.NetEx.AsyncTransfer.CancelAsync">
            <summary>
                Cancels a pending asynchonous transfer.
            </summary>
        </member>
        <member name="T:SilDev.NotifyBox">
            <summary>
                Represents a notification window, simliar with a system tray notification, which presents a
                notification to the user.
            </summary>
        </member>
        <member name="T:SilDev.NotifyBox.NotifyBoxSound">
            <summary>
                Provides enumerated constants used to retrieves the play sound of the notify box.
            </summary>
        </member>
        <member name="T:SilDev.NotifyBox.NotifyBoxStartPosition">
            <summary>
                Provides enumerated constants used to retrieves the start position of the notify box.
            </summary>
        </member>
        <member name="M:SilDev.NotifyBox.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SilDev.NotifyBox"/> class.
            </summary>
        </member>
        <member name="P:SilDev.NotifyBox.Opacity">
            <summary>
                Gets or sets the opacity level for the notify box.
            </summary>
        </member>
        <member name="P:SilDev.NotifyBox.BackColor">
            <summary>
                Gets or sets the background color for the notify box.
            </summary>
        </member>
        <member name="P:SilDev.NotifyBox.BorderColor">
            <summary>
                Gets or sets the border color for the notify box.
            </summary>
        </member>
        <member name="P:SilDev.NotifyBox.CaptionColor">
            <summary>
                Gets or sets the caption color for the notify box.
            </summary>
        </member>
        <member name="P:SilDev.NotifyBox.TextColor">
            <summary>
                Gets or sets the text color for the notify box.
            </summary>
        </member>
        <member name="P:SilDev.NotifyBox.TopMost">
            <summary>
                Specifies that the notify box is placed above all non-topmost windows.
            </summary>
        </member>
        <member name="P:SilDev.NotifyBox.IsAlive">
            <summary>
                Gets a value indicating the execution status of the current notify box.
            </summary>
        </member>
        <member name="M:SilDev.NotifyBox.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxStartPosition,SilDev.NotifyBox.NotifyBoxSound,System.UInt16,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, position, sound, duration, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains active.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBox.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxStartPosition,SilDev.NotifyBox.NotifyBoxSound,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, position, sound, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBox.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxStartPosition,System.UInt16,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, position, duration, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains active.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBox.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxStartPosition,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, position, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBox.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxSound,System.UInt16,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, sound, duration, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains active.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBox.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxSound,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, sound, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBox.Show(System.String,System.String,System.UInt16,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, duration, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains active.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBox.Close">
            <summary>
                Closes the current notify box.
            </summary>
        </member>
        <member name="M:SilDev.NotifyBox.Abort">
            <summary>
                Terminates the current notify box.
            </summary>
        </member>
        <member name="T:SilDev.NotifyBoxEx">
            <summary>
                Displays a notification window, simliar with a system tray notification, which presents a
                notification to the user.
            </summary>
        </member>
        <member name="M:SilDev.NotifyBoxEx.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxStartPosition,SilDev.NotifyBox.NotifyBoxSound,System.UInt16,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, position, sound, duration, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains active.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBoxEx.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxStartPosition,SilDev.NotifyBox.NotifyBoxSound,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, position, sound, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBoxEx.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxStartPosition,System.UInt16,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, position, duration, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains active.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBoxEx.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxStartPosition,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, position, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="position">
                The window position for the notify box.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBoxEx.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxSound,System.UInt16,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, sound, duration, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains active.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBoxEx.Show(System.String,System.String,SilDev.NotifyBox.NotifyBoxSound,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, sound, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="sound">
                The play sound for the notify box.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.NotifyBoxEx.Show(System.String,System.String,System.UInt16,System.Boolean)">
            <summary>
                Displays a notify box with the specified text, caption, duration, and borders.
            </summary>
            <param name="text">
                The notification text to display in the notify box.
            </param>
            <param name="caption">
                The caption text to display in the notify box.
            </param>
            <param name="duration">
                The duration of the time, in milliseconds, which the notify box remains active.
            </param>
            <param name="borders">
                true to visible the window borders; otherwise, false.
            </param>
        </member>
        <member name="T:SilDev.PathEx">
            <summary>
                Provides static methods based on the <see cref="T:System.IO.Path"/> class to perform operations on
                <see cref="T:System.String"/> instances that contain file or directory path information.
            </summary>
        </member>
        <member name="T:SilDev.PathEx.Headers">
            <summary>
                Provides enumerated values of PE (Portable Executable) headers.
            </summary>
        </member>
        <member name="P:SilDev.PathEx.LocalPath">
            <summary>
                Gets the full process executable path of the assembly based on
                <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/>.CodeBase.
            </summary>
        </member>
        <member name="P:SilDev.PathEx.LocalDir">
            <summary>
                Gets the process executable located directory path of the assembly based on
                <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/>.CodeBase.
            </summary>
        </member>
        <member name="M:SilDev.PathEx.GetHeader(System.String)">
            <summary>
                Determines the PE (Portable Executable) header of the specified file.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.FileIs64Bit(System.String)">
            <summary>
                Determines whether the specified file was compiled for a 64-bit platform environments.
            </summary>
            <param name="path">
                The file to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.DirOrFileExists(System.String)">
            <summary>
                Combines <see cref="M:System.IO.Directory.Exists(System.String)"/> and <see cref="M:System.IO.File.Exists(System.String)"/>
                to determine whether the specified path element exists.
            </summary>
            <param name="path">
                The file or directory to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.DirsOrFilesExists(System.String[])">
            <summary>
                Combines <see cref="M:System.IO.Directory.Exists(System.String)"/> and <see cref="M:System.IO.File.Exists(System.String)"/>
                to determine whether the specified path elements exists.
            </summary>
            <param name="paths">
                An array of files and directories to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.IsValidPath(System.String)">
            <summary>
                Determines whether the specified path has a valid format.
            </summary>
            <param name="path">
                The specified path to check.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.Char[],System.String[])">
            <summary>
                <para>
                    Combines an array of strings, based on <see cref="M:System.IO.Path.Combine(System.String[])"/>,
                    <see cref="M:System.IO.Path.GetFullPath(System.String)"/>,
                    <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)"/>,
                    <see cref="M:System.Environment.GetEnvironmentVariable(System.String)"/> and
                    <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>, into a path.
                </para>
                <para>
                    <c>
                        Hint:
                    </c>
                    Allows superordinate directory navigation and environment variables
                    based on <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>;
                    for example, write <code>"%Desktop%"</code>, cases are ignored as well.
                </para>
            </summary>
            <param name="paths">
                An array of parts of the path.
            </param>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
        </member>
        <member name="M:SilDev.PathEx.Combine(System.String[])">
            <summary>
                <para>
                    Combines an array of strings, based on <see cref="M:System.IO.Path.Combine(System.String[])"/>,
                    <see cref="M:System.IO.Path.GetFullPath(System.String)"/>,
                    <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)"/>,
                    <see cref="M:System.Environment.GetEnvironmentVariable(System.String)"/> and
                    <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)"/>, into a path.
                </para>
                <para>
                    <c>
                        Hint:
                    </c>
                    Allows superordinate directory navigation and environment variables
                    based on <see cref="M:SilDev.EnvironmentEx.GetVariableValue(System.String,System.Boolean)"/>;
                    for example, write <code>"%Desktop%"</code>, cases are ignored as well.
                </para>
            </summary>
            <param name="paths">
                An array of parts of the path.
            </param>
        </member>
        <member name="M:SilDev.PathEx.AltCombine(System.Char[],System.String[])">
            <summary>
                <para>
                    Combines an array of strings, based on <see cref="M:SilDev.PathEx.Combine(System.String[])"/>, into a
                    path.
                </para>
                <para>
                    <c>
                        Hint:
                    </c>
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> is used to seperate path levels.
                </para>
            </summary>
            <param name="paths">
                An array of parts of the path.
            </param>
            <param name="invalidPathChars">
                A sequence of invalid chars used as a filter.
            </param>
        </member>
        <member name="M:SilDev.PathEx.AltCombine(System.String[])">
            <summary>
                <para>
                    Combines an array of strings, based on <see cref="M:SilDev.PathEx.Combine(System.String[])"/>, into a
                    path.
                </para>
                <para>
                    <c>
                        Hint:
                    </c>
                    <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> is used to seperate path levels.
                </para>
            </summary>
            <param name="paths">
                An array of parts of the path.
            </param>
        </member>
        <member name="M:SilDev.PathEx.GetTempDirName(System.String,System.Int32)">
            <summary>
                Returns a uniquely directory name with a similar format as <see cref="M:System.IO.Path.GetTempFileName"/>.
            </summary>
            <param name="prefix">
                This text is at the beginning of the name.
            </param>
            <param name="len">
                The length of the hash. Valid values are 4 through 24.
            </param>
        </member>
        <member name="M:SilDev.PathEx.GetTempDirName(System.Int32)">
            <summary>
                Returns a uniquely directory name with a similar format as <see cref="M:System.IO.Path.GetTempFileName"/>.
            </summary>
            <param name="len">
                The length of the hash. Valid values are 4 through 24.
            </param>
        </member>
        <member name="M:SilDev.PathEx.GetTempFileName(System.String,System.String,System.Int32)">
            <summary>
                Returns a uniquely file name with a similar format as <see cref="M:System.IO.Path.GetTempFileName"/>.
            </summary>
            <param name="prefix">
                This text is at the beginning of the name.
            </param>
            <param name="suffix">
                This text is at the end of the name.
            </param>
            <param name="len">
                The length of the hash. Valid values are 4 through 24.
            </param>
        </member>
        <member name="M:SilDev.PathEx.GetTempFileName(System.String,System.Int32)">
            <summary>
                Returns a uniquely file name with a similar format as <see cref="M:System.IO.Path.GetTempFileName"/>.
            </summary>
            <param name="prefix">
                This text is at the beginning of the name.
            </param>
            <param name="len">
                The length of the hash. Valid values are 4 through 24.
            </param>
        </member>
        <member name="M:SilDev.PathEx.GetTempFileName(System.Int32)">
            <summary>
                Returns a uniquely file name with a similar format as <see cref="M:System.IO.Path.GetTempFileName"/>.
            </summary>
            <param name="len">
                The length of the hash. Valid values are 4 through 24.
            </param>
        </member>
        <member name="T:SilDev.PathNotFoundException">
            <summary>
                The exception that is thrown when an attempt to access a target that does not exist
                fails.
            </summary>
        </member>
        <member name="M:SilDev.PathNotFoundException.#ctor">
            <summary>
                Create the exception.
            </summary>
        </member>
        <member name="M:SilDev.PathNotFoundException.#ctor(System.String)">
            <summary>
                Create the exception with path.
            </summary>
            <param name="target">
                Exception target.
            </param>
        </member>
        <member name="M:SilDev.PathNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
                Create the exception with path and inner cause.
            </summary>
            <param name="target">
                Exception target.
            </param>
            <param name="innerException">
                Exception inner cause.
            </param>
        </member>
        <member name="P:SilDev.PathNotFoundException.Message">
            <summary>
                Gets the error message and the path, or only the exception message if no path
                is set.
            </summary>
        </member>
        <member name="T:SilDev.ProcessEx">
            <summary>
                Provides static methods based on the <see cref="T:System.Diagnostics.Process"/> class to enable you to start
                local system processes.
            </summary>
        </member>
        <member name="P:SilDev.ProcessEx.CurrentHandle">
            <summary>
                Gets the handle of the current process instance.
            </summary>
        </member>
        <member name="P:SilDev.ProcessEx.CurrentName">
            <summary>
                Gets the name of the current process instance.
            </summary>
        </member>
        <member name="M:SilDev.ProcessEx.GetInstances(System.String,System.Boolean)">
            <summary>
                Gets all active instances associated with the specified application.
            </summary>
            <param name="nameOrPath">
                The filename or the full path to the application to check.
            </param>
            <param name="doubleTap">
                <para>
                    true to try to get firstly by the path, then by name; otherwise, false.
                </para>
                <para>
                    Please note that this option has no effect if the first parameter contains
                    only a name.
                </para>
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.InstancesCount(System.String,System.Boolean)">
            <summary>
                Returns the number of all active instances associated with the specified
                application.
            </summary>
            <param name="nameOrPath">
                The filename or the full path to the application to check.
            </param>
            <param name="doubleTap">
                <para>
                    true to try to check firstly by the path, then by name; otherwise, false.
                </para>
                <para>
                    Please note that this option has no effect if the first parameter contains
                    only a name.
                </para>
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.IsRunning(System.String,System.Boolean)">
            <summary>
                Determines whether the specified file is matched with a running process.
            </summary>
            <param name="nameOrPath">
                The filename or the full path to the application to check.
            </param>
            <param name="doubleTap">
                <para>
                    true to try to check firstly by the path, then by name; otherwise, false.
                </para>
                <para>
                    Please note that this option has no effect if the first parameter contains
                    only a name.
                </para>
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.IsSandboxed(System.Diagnostics.Process)">
            <summary>
                <para>
                    Determines whether this <see cref="T:System.Diagnostics.Process"/> is running in a sandboxed
                    environment.
                </para>
                <para>
                    Hint: This function supports only the program Sandboxie.
                </para>
            </summary>
            <param name="process">
                The <see cref="T:System.Diagnostics.Process"/> to check.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.GetCommandLineArgs(System.Diagnostics.Process)">
            <summary>
                Returns a string array containing the command-line arguments for this
                <see cref="T:System.Diagnostics.Process"/>.
            </summary>
            <param name="process">
                The <see cref="T:System.Diagnostics.Process"/> component.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.GetCommandLine(System.Diagnostics.Process)">
            <summary>
                Returns the command-line arguments for this process.
            </summary>
            <param name="process">
                The <see cref="T:System.Diagnostics.Process"/> component.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.Diagnostics.Process,System.Boolean)">
            <summary>
                <para>
                    Starts (or reuses) the process resource that is specified by the current
                    <see cref="T:System.Diagnostics.Process"/>.StartInfo property of this <see cref="T:System.Diagnostics.Process"/> and
                    associates it with the component.
                </para>
                <para>
                    If the <see cref="T:System.Diagnostics.Process"/>.StartInfo.WorkingDirectory parameter is undefined,
                    it is created by <see cref="T:System.Diagnostics.Process"/>.StartInfo.FileName parameter.
                </para>
            </summary>
            <param name="process">
                The <see cref="T:System.Diagnostics.Process"/> component to start.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if the process has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.Diagnostics.ProcessStartInfo,System.Boolean)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the specified
                    <see cref="T:System.Diagnostics.ProcessStartInfo"/> and starts (or reuses) the process component.
                </para>
                <para>
                    If WorkingDirectory parameter is undefined, it is created by the FileName parameter.
                </para>
            </summary>
            <param name="processStartInfo">
                The <see cref="T:System.Diagnostics.ProcessStartInfo"/> component to initialize a new <see cref="T:System.Diagnostics.Process"/>.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if the process has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.String,System.String,System.Boolean,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the specified
                parameters and starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="workingDirectory">
                The working directory for the process to be started.
            </param>
            <param name="arguments">
                The command-line arguments to use when starting the application.
            </param>
            <param name="verbRunAs">
                true to start the application with administrator privileges; otherwise, false.
            </param>
            <param name="processWindowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if the process
                has been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the specified
                parameters and starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="workingDirectory">
                The working directory for the process to be started.
            </param>
            <param name="arguments">
                The command-line arguments to use when starting the application.
            </param>
            <param name="verbRunAs">
                true to start the application with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if the process
                has been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.String,System.Boolean,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the specified
                parameters and starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="arguments">
                The command-line arguments to use when starting the application.
            </param>
            <param name="verbRunAs">
                true to start the application with administrator privileges; otherwise, false.
            </param>
            <param name="processWindowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/> if the process
                has been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the specified
                parameters and starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="arguments">
                The command-line arguments to use when starting the application.
            </param>
            <param name="verbRunAs">
                true to start the application with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if the process
                has been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.Boolean,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the specified
                parameters and starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="verbRunAs">
                true to start the application with administrator privileges; otherwise, false.
            </param>
            <param name="processWindowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if the process
                has been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Start(System.String,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class from the specified
                parameters to starts (or reuses) the process component.
            </summary>
            <param name="fileName">
                The application to start.
            </param>
            <param name="verbRunAs">
                true to start the application with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if the process
                has been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Send(System.String,System.Boolean,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class to execute system
                    commands using the system command prompt ("cmd.exe").
                </para>
                <para>
                    This can be useful for an unprivileged application as a simple way to execute a
                    command with the highest user permissions, for example.
                </para>
            </summary>
            <param name="command">
                The application to start.
            </param>
            <param name="runAsAdmin">
                true to start the application with administrator privileges; otherwise, false.
            </param>
            <param name="processWindowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if the process has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Send(System.String,System.Boolean,System.Boolean)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class to execute system
                    commands using the system command prompt ("cmd.exe").
                </para>
                <para>
                    This can be useful for an unprivileged application as a simple way to execute a
                    command with the highest user permissions, for example.
                </para>
            </summary>
            <param name="command">
                The application to start.
            </param>
            <param name="runAsAdmin">
                true to start the application with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if the process has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Send(System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
                <para>
                    Initializes a new instance of the <see cref="T:System.Diagnostics.Process"/> class to execute system
                    commands using the system command prompt ("cmd.exe").
                </para>
                <para>
                    This can be useful for an unprivileged application as a simple way to execute a
                    command with the highest user permissions, for example.
                </para>
            </summary>
            <param name="command">
                The application to start.
            </param>
            <param name="processWindowStyle">
                The window state to use when the process is started.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if the process has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Terminate(System.Collections.Generic.IEnumerable{System.Diagnostics.Process})">
            <summary>
                <para>
                    Immediately stops all specified processes.
                </para>
                <para>
                    If the current process doesn't have enough privileges to stop a specified process
                    it starts an invisible elevated instance of the command prompt to run taskkill.
                </para>
            </summary>
            <param name="processes">
                The <see cref="T:System.Diagnostics.Process"/>/es to kill.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.Terminate(System.Diagnostics.Process[])">
            <summary>
                <para>
                    Immediately stops all specified processes.
                </para>
                <para>
                    If the current process doesn't have enough privileges to stop a specified process
                    it starts an invisible elevated instance of the command prompt to run taskkill.
                </para>
            </summary>
            <param name="processes">
                The collection of processes to kill.
            </param>
        </member>
        <member name="T:SilDev.ProcessEx.SendHelper">
            <summary>
                Provides basic functionality based on <see cref="M:SilDev.ProcessEx.Send(System.String,System.Boolean,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:SilDev.ProcessEx.SendHelper.WaitThenDelete(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Waits before the system is instructed to delete the target at the specified path.
            </summary>
            <param name="path">
                The path to the file or directory to be deleted.
            </param>
            <param name="seconds">
                The time to wait in seconds.
            </param>
            <param name="runAsAdmin">
                true to run this task with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if this task has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.SendHelper.WaitForExitThenDelete(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                <para>
                    Deletes the target at the specified path if there is no process running that
                    is matched with the specified process name.
                </para>
                <para>
                    If a matched process is still running, the task will wait until all matched
                    processes has been closed.
                </para>
            </summary>
            <param name="path">
                The path to the file or directory to be deleted.
            </param>
            <param name="processName">
                The name of the process to be waited.
            </param>
            <param name="extension">
                The file extension of the specified process.
            </param>
            <param name="runAsAdmin">
                true to run this task with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if this task has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.SendHelper.WaitForExitThenDelete(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                <para>
                    Deletes the target at the specified path if there is no process running that
                    is matched with the specified process name.
                </para>
                <para>
                    If a matched process is still running, the task will wait until all matched
                    processes has been closed.
                </para>
            </summary>
            <param name="path">
                The path to the file or directory to be deleted.
            </param>
            <param name="processName">
                The name of the process to be waited.
            </param>
            <param name="runAsAdmin">
                true to run this task with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if this task has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.SendHelper.KillTask(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Ends all processes matched by the specified process name.
            </summary>
            <param name="processName">
                The name of the process to be killed.
            </param>
            <param name="extension">
                The file extension of the specified process.
            </param>
            <param name="runAsAdmin">
                true to run this task with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if this task has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.SendHelper.KillTask(System.String,System.Boolean,System.Boolean)">
            <summary>
                Ends all processes matched by the specified process name.
            </summary>
            <param name="processName">
                The name of the process to be killed.
            </param>
            <param name="runAsAdmin">
                true to run this task with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if this task has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.SendHelper.KillAllTasks(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean,System.Boolean)">
            <summary>
                Ends all processes matched by all the specified process names.
            </summary>
            <param name="processNames">
                A list of the process names to be killed.
            </param>
            <param name="extension">
                The file extension of the specified processes.
            </param>
            <param name="runAsAdmin">
                true to run this task with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if this task has
                been started; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ProcessEx.SendHelper.KillAllTasks(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
                Ends all processes matched by all the specified process names.
            </summary>
            <param name="processNames">
                A list of the process names to be killed.
            </param>
            <param name="runAsAdmin">
                true to run this task with administrator privileges; otherwise, false.
            </param>
            <param name="dispose">
                true to release all resources used by the <see cref="T:System.ComponentModel.Component"/>, if this task has
                been started; otherwise, false.
            </param>
        </member>
        <member name="T:SilDev.Reg">
            <summary>
                Provides functionality for the Windows registry database.
            </summary>
        </member>
        <member name="M:SilDev.Reg.SubKeyExists(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
                Determines whether the specified subkey exists.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.SubKeyExists(System.String,System.String)">
            <summary>
                Determines whether the specified subkey exists.
            </summary>
            <param name="key">
                The root key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.SubKeyExists(System.String)">
            <summary>
                Determines whether the specified subkey exists.
            </summary>
            <param name="keyPath">
                The full path of the key to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.CreateNewSubKey(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
                Creates a new subkey.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that receives the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to create.
            </param>
            <param name="overwrite">
                true to remove an existing target before creating; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.CreateNewSubKey(System.String,System.String,System.Boolean)">
            <summary>
                Creates a new subkey.
            </summary>
            <param name="key">
                The root key that receives the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to create.
            </param>
            <param name="overwrite">
                true to remove an existing target before creating; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.CreateNewSubKey(System.String,System.Boolean)">
            <summary>
                Creates a new subkey.
            </summary>
            <param name="keyPath">
                The full path of the key to create.
            </param>
            <param name="overwrite">
                true to remove an existing target before creating; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveSubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
                Removes an existing subkey.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveSubKey(System.String,System.String)">
            <summary>
                Removes an existing subkey.
            </summary>
            <param name="key">
                The root key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveSubKey(System.String)">
            <summary>
                Removes an existing subkey.
            </summary>
            <param name="keyPath">
                The full path of the key to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeys(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all subkeys of
                the specified registry path.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key which contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to read.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeys(System.String,System.String)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all subkeys of
                the specified registry path.
            </summary>
            <param name="key">
                The root key which contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to read.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeys(System.String)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all subkeys of
                the specified registry path.
            </summary>
            <param name="keyPath">
                The full path of the key to read.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeyTree(Microsoft.Win32.RegistryKey,System.String,System.Int32)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the full subkey
                tree of the specified registry path.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to read.
            </param>
            <param name="timelimit">
                The time limit in milliseconds.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeyTree(System.String,System.String,System.Int32)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the full subkey
                tree of the specified registry path.
            </summary>
            <param name="key">
                The root key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey to read.
            </param>
            <param name="timelimit">
                The time limit in milliseconds.
            </param>
        </member>
        <member name="M:SilDev.Reg.GetSubKeyTree(System.String,System.Int32)">
            <summary>
                Returns a <see cref="T:System.String"/> based <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the full subkey
                tree of the specified registry path.
            </summary>
            <param name="keyPath">
                The full path of the key to read.
            </param>
            <param name="timelimit">
                The time limit in milliseconds.
            </param>
        </member>
        <member name="M:SilDev.Reg.CopySubKey(Microsoft.Win32.RegistryKey,System.String,Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
                Copies an existing subkey to a new location.
            </summary>
            <param name="srcKey">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the source subkey.
            </param>
            <param name="srcSubKey">
                The name of the subkey to copy.
            </param>
            <param name="destKey">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that should contain the new subkey.
            </param>
            <param name="destSubKey">
                The new path and name of the destination subkey.
            </param>
            <param name="overwrite">
                true to remove an existing target before copying; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.CopySubKey(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Copies an existing subkey to a new location.
            </summary>
            <param name="srcKey">
                The root key that contains the source subkey.
            </param>
            <param name="srcSubKey">
                The name of the subkey to copy.
            </param>
            <param name="destKey">
                The root key that should contain the new subkey.
            </param>
            <param name="destSubKey">
                The new path and name of the destination subkey.
            </param>
            <param name="overwrite">
                true to remove an existing target before copying; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.CopySubKey(System.String,System.String,System.Boolean)">
            <summary>
                Copies an existing subkey to a new location.
            </summary>
            <param name="srcKeyPath">
                The full path of the source key to copy.
            </param>
            <param name="destKeyPath">
                The full path of the destination key.
            </param>
            <param name="overwrite">
                true to remove an existing target before copying; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.MoveSubKey(Microsoft.Win32.RegistryKey,System.String,Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
                Moves an existing subkey to a new location.
            </summary>
            <param name="oldKey">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the source subkey.
            </param>
            <param name="oldSubKey">
                The name of the subkey to move.
            </param>
            <param name="newKey">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that should contain the new subkey.
            </param>
            <param name="newSubKey">
                The new path and name of the subkey.
            </param>
            <param name="overwrite">
                true to remove an existing target before moving; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.MoveSubKey(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Moves an existing subkey to a new location.
            </summary>
            <param name="oldKey">
                The root key that contains the source subkey.
            </param>
            <param name="oldSubKey">
                The name of the subkey to move.
            </param>
            <param name="newKey">
                The root key that should contain the new subkey.
            </param>
            <param name="newSubKey">
                The new path and name of the subkey.
            </param>
            <param name="overwrite">
                true to remove an existing target before moving; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.MoveSubKey(System.String,System.String,System.Boolean)">
            <summary>
                Moves an existing subkey to a new location.
            </summary>
            <param name="oldKeyPath">
                The full path of the source key to copy.
            </param>
            <param name="newKeyPath">
                The full path of the destination key.
            </param>
            <param name="overwrite">
                true to remove an existing target before moving; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.EntryExists(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
                Determines whether the specified entry exists.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey which contains the entry.
            </param>
            <param name="entry">
                The entry to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.EntryExists(System.String,System.String,System.String)">
            <summary>
                Determines whether the specified entry exists.
            </summary>
            <param name="key">
                The root key that contains the subkey.
            </param>
            <param name="subKey">
                The path of the subkey which contains the entry.
            </param>
            <param name="entry">
                The entry to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.EntryExists(System.String,System.String)">
            <summary>
                Determines whether the specified entry exists.
            </summary>
            <param name="keyPath">
                The full path of the key which contains the entry.
            </param>
            <param name="entry">
                The entry to check.
            </param>
        </member>
        <member name="M:SilDev.Reg.Read``1(Microsoft.Win32.RegistryKey,System.String,System.String,``0)">
            <summary>
                Retrives the value associated with the specified entry of the specified registry path.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey to open.
            </param>
            <param name="subKey">
                The path of the subkey that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.Read``1(System.String,System.String,System.String,``0)">
            <summary>
                Retrives the value associated with the specified entry of the specified registry path.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="key">
                The root key that contains the subkey to open.
            </param>
            <param name="subKey">
                The path of the subkey that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.Read``1(System.String,System.String,``0)">
            <summary>
                Retrives the value associated with the specified entry of the specified registry path.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="keyPath">
                The full path of the key that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.ReadString(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
            <summary>
                <para>
                    Retrives the value associated with the specified entry of the specified registry path.
                </para>
                <para>
                    A non-string value is converted to a valid <see cref="T:System.String"/>.
                </para>
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey to open.
            </param>
            <param name="subKey">
                The path of the subkey that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.ReadString(System.String,System.String,System.String,System.String)">
            <summary>
                <para>
                    Retrives the value associated with the specified entry of the specified registry path.
                </para>
                <para>
                    A non-string value is converted to a valid <see cref="T:System.String"/>.
                </para>
            </summary>
            <param name="key">
                The root key that contains the subkey to open.
            </param>
            <param name="subKey">
                The path of the subkey that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.ReadString(System.String,System.String,System.String)">
            <summary>
                <para>
                    Retrives the value associated with the specified entry of the specified registry path.
                </para>
                <para>
                    A non-string value is converted to a valid <see cref="T:System.String"/>.
                </para>
            </summary>
            <param name="keyPath">
                The full path of the key that contains the entry to read.
            </param>
            <param name="entry">
                The entry to read
            </param>
            <param name="defValue">
                The value that is used as default.
            </param>
        </member>
        <member name="M:SilDev.Reg.Write``1(Microsoft.Win32.RegistryKey,System.String,System.String,``0,Microsoft.Win32.RegistryValueKind)">
            <summary>
                Copies an object into the specified entry of the registry database.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey to create or override.
            </param>
            <param name="subKey">
                The path of the subkey to create or override.
            </param>
            <param name="entry">
                The entry to create or override.
            </param>
            <param name="value">
                The <see cref="T:System.Object"/> to be written.
            </param>
            <param name="type">
                The data type of the value to write.
            </param>
        </member>
        <member name="M:SilDev.Reg.Write``1(System.String,System.String,System.String,``0,Microsoft.Win32.RegistryValueKind)">
            <summary>
                Copies an object into the specified entry of the registry database.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="key">
                The root key that contains the subkey to create or override.
            </param>
            <param name="subKey">
                The path of the subkey to create or override.
            </param>
            <param name="entry">
                The entry to create or override.
            </param>
            <param name="value">
                The <see cref="T:System.Object"/> to be written.
            </param>
            <param name="type">
                The data type of the value to write.
            </param>
        </member>
        <member name="M:SilDev.Reg.Write``1(System.String,System.String,``0,Microsoft.Win32.RegistryValueKind)">
            <summary>
                Copies an object into the specified entry of the registry database.
            </summary>
            <typeparam name="TValue">
                The value type.
            </typeparam>
            <param name="keyPath">
                The full path of the key to create or override.
            </param>
            <param name="entry">
                The entry to create or override.
            </param>
            <param name="value">
                The <see cref="T:System.Object"/> to be written.
            </param>
            <param name="type">
                The data type of the value to write.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveEntry(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
                Removes the specified entry from the specified registry path.
            </summary>
            <param name="key">
                The root <see cref="T:Microsoft.Win32.Registry"/> key that contains the subkey with the entry to remove.
            </param>
            <param name="subKey">
                The path of the subkey with the entry to remove.
            </param>
            <param name="entry">
                The entry to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveEntry(System.String,System.String,System.String)">
            <summary>
                Removes the specified entry from the specified registry path.
            </summary>
            <param name="key">
                The root key that contains the subkey with the entry to remove.
            </param>
            <param name="subKey">
                The path of the subkey with the entry to remove.
            </param>
            <param name="entry">
                The entry to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.RemoveEntry(System.String,System.String)">
            <summary>
                Removes the specified entry from the specified <see cref="T:Microsoft.Win32.Registry"/> path.
            </summary>
            <param name="keyPath">
                The full path of the key with the entry to remove.
            </param>
            <param name="entry">
                The entry to remove.
            </param>
        </member>
        <member name="M:SilDev.Reg.ImportFile(System.String,System.Boolean)">
            <summary>
                Imports the specified REG file to the registry.
            </summary>
            <param name="path">
                The full path of the file to import.
            </param>
            <param name="elevated">
                true to import with highest user permissions; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.ImportFile(System.String,System.String[],System.Boolean)">
            <summary>
                Creates a new REG file with the specified content, imports it into the registry, and then
                deletes the file.
            </summary>
            <param name="path">
                The full path of the file to import.
            </param>
            <param name="content">
                The full content of the file to import.
            </param>
            <param name="elevated">
                true to import with highest user permissions; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.ImportFile(System.String[],System.Boolean)">
            <summary>
                Creates a new REG file with the specified content, imports it into the registry, and then
                deletes the file.
            </summary>
            <param name="content">
                The full content of the file to import.
            </param>
            <param name="elevated">
                true to import with highest user permissions; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reg.ExportKeys(System.String,System.Boolean,System.String[])">
            <summary>
                Exports the full content of the specified registry paths into an REG file.
            </summary>
            <param name="destPath">
                The full path of the file to create or override.
            </param>
            <param name="elevated">
                true to export with highest user permissions; otherwise, false.
            </param>
            <param name="keyPaths">
                The full paths of the keys to export.
            </param>
        </member>
        <member name="M:SilDev.Reg.ExportKeys(System.String,System.String[])">
            <summary>
                Exports the full content of the specified registry paths into an REG file.
            </summary>
            <param name="destPath">
                The full path of the file to create or override.
            </param>
            <param name="keyPaths">
                The full paths of the keys to export.
            </param>
        </member>
        <member name="T:SilDev.Reorganize">
            <summary>
                Provides static methods for converting or reorganizing of data.
            </summary>
        </member>
        <member name="T:SilDev.Reorganize.SizeUnits">
            <summary>
                Provides units of digital information.
            </summary>
        </member>
        <member name="F:SilDev.Reorganize.SizeUnits.Byte">
            <summary>
                Stands for byte.
            </summary>
        </member>
        <member name="F:SilDev.Reorganize.SizeUnits.KB">
            <summary>
                Stands for kilobyte or kibibyte.
            </summary>
        </member>
        <member name="F:SilDev.Reorganize.SizeUnits.MB">
            <summary>
                Stands for megabyte or mebibyte.
            </summary>
        </member>
        <member name="F:SilDev.Reorganize.SizeUnits.GB">
            <summary>
                Stands for gigabyte or gibibyte.
            </summary>
        </member>
        <member name="F:SilDev.Reorganize.SizeUnits.TB">
            <summary>
                Stands for terabyte or tebibyte.
            </summary>
        </member>
        <member name="F:SilDev.Reorganize.SizeUnits.PB">
            <summary>
                Stands for petabyte or pebibyte.
            </summary>
        </member>
        <member name="F:SilDev.Reorganize.SizeUnits.EB">
            <summary>
                Stands for exabyte or exbibyte.
            </summary>
        </member>
        <member name="M:SilDev.Reorganize.SerializeObject``1(``0)">
            <summary>
                Serializes this object graph into a sequence of bytes.
            </summary>
            <param name="value">
                The object graph to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.DeserializeObject``1(System.Byte[],``0)">
            <summary>
                Deserializes this sequence of bytes into an object graph.
            </summary>
            <param name="bytes">
                The sequence of bytes to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.RecursiveSelect``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Int64)">
            <summary>
                Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">
                The type of the elements of source.
            </typeparam>
            <param name="source">
                A sequence of values to invoke a transform function on.
            </param>
            <param name="selector">
                A transform function to apply to each element.
            </param>
            <param name="timelimit">
                The time limit in milliseconds.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatDataSize(System.Int64,SilDev.Reorganize.SizeUnits,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Converts this numeric value into a string that represents the number expressed as a size
                value in the specified <see cref="T:SilDev.Reorganize.SizeUnits"/>.
            </summary>
            <param name="value">
                The value to be converted.
            </param>
            <param name="unit">
                The new unit.
            </param>
            <param name="binary">
                true for the binary numeral system; otherwise, false for the decimal numeral system.
            </param>
            <param name="suffix">
                true to show the size unit suffix; otherwise, false.
            </param>
            <param name="trim">
                true to remove all zeros after the comma; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.FormatDataSize(System.Int64,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Converts this numeric value into a string that represents the number expressed as a size
                value in bytes, kilobytes, megabytes, gigabytes, terabyte, petabyte, exabyte, depending
                on the size.
            </summary>
            <param name="value">
                The value to be converted.
            </param>
            <param name="binary">
                true for the binary numeral system; otherwise, false for the decimal numeral system.
            </param>
            <param name="suffix">
                true to show the size unit suffix; otherwise, false.
            </param>
            <param name="trim">
                true to remove all zeros after the comma; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Increment(System.IntPtr,System.IntPtr)">
            <summary>
                Increments the length of a platform-specific type number with the specified value.
            </summary>
            <param name="ptr">
                The platform-specific type to change.
            </param>
            <param name="value">
                The number to be incremented.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Reverse(System.String)">
            <summary>
                Reverses the sequence of all characters in a string.
            </summary>
            <param name="str">
                The string to change.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStrings(System.String)">
            <summary>
                Creates a sequence of strings based on natural (base e) logarithm of a count
                of all the characters in the specified string.
            </summary>
            <param name="str">
                The string to change.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type
                <see cref="T:System.String"/>, using the specified separator between each number.
            </summary>
            <param name="values">
                An array that contains the elements to concatenate.
            </param>
            <param name="separator">
                The string to use as a separator.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Join(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
                Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type
                <see cref="T:System.String"/>, using the specified separator between each number.
            </summary>
            <param name="values">
                An array that contains the elements to concatenate.
            </param>
            <param name="separator">
                The character to use as a separator.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Sort(System.String[])">
            <summary>
                Sorts the elements in an entire string array using the <see cref="T:System.IComparable`1"/> generic
                interface implementation of each element of the string array.
            </summary>
            <param name="strs">
                The sequence of strings to sort.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
                Splits a string into substrings based on the strings in an array. You can specify whether
                the substrings inlcude empty array elements.
            </summary>
            <param name="str">
                The string to split.
            </param>
            <param name="separator">
                The string to use as a separator.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.SplitNewLine(System.String)">
            <summary>
                Splits a string into substrings based on <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="str">
                The string to split.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToBytes(System.String)">
            <summary>
                Converts all the characters in the specified string into a sequence of bytes.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringEx(System.Byte[])">
            <summary>
                Converts the specified sequence of bytes into a string.
            </summary>
            <param name="bytes">
                The sequence of bytes to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToRectangle(System.String)">
            <summary>
                Converts the specified string, which stores a set of four integers that represent the
                location and size of a rectangle, to <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToPoint(System.String)">
            <summary>
                Converts the specified string, which stores an ordered pair of integer x- and y-coordinates,
                to <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToSize(System.String)">
            <summary>
                Converts the specified string, which stores an ordered pair of integers, to <see cref="T:System.Drawing.Size"/>.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToBoolean(System.String)">
            <summary>
                Converts the specified string to an equivalent Boolean value, which returns always false
                for unsupported string values.
            </summary>
            <param name="str">
                The string to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.LowerText(System.String,System.String[])">
            <summary>
                Converts the specified strings in a string to lowercase.
            </summary>
            <param name="str">
                The string to change.
            </param>
            <param name="strs">
                The sequence of strings to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.UpperText(System.String,System.String[])">
            <summary>
                Converts the specified strings in a string to uppercase.
            </summary>
            <param name="str">
                The string to change.
            </param>
            <param name="strs">
                The sequence of strings to convert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.RemoveChar(System.Char[],System.Char[])">
            <summary>
                Removes the specified characters in a char array.
            </summary>
            <param name="array">
                The char array to change.
            </param>
            <param name="chrs">
                The sequence of characters to remove.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.RemoveChar(System.String,System.Char[])">
            <summary>
                Removes the specified characters in a string.
            </summary>
            <param name="str">
                The string to change.
            </param>
            <param name="chrs">
                The sequence of characters to remove.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.RemoveText(System.String,System.String[])">
            <summary>
                Removes the specified strings in a string.
            </summary>
            <param name="str">
                The string to change.
            </param>
            <param name="strs">
                The sequence of strings to remove.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToBin(System.String,System.Boolean)">
            <summary>
                Converts the specified string to its string representation of a base-2 binary sequence.
            </summary>
            <param name="str">
                The string to convert.
            </param>
            <param name="separator">
                true to add a single space character as a separator between every single byte;
                otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringFromBin(System.String)">
            <summary>
                Converts the specified base-2 binary sequence back to string.
            </summary>
            <param name="str">
                The string to reconvert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToHexa(System.Byte[],System.Nullable{System.Char},System.Boolean)">
            <summary>
                Converts the specified sequence of bytes into a hexadecimal sequence.
            </summary>
            <param name="bytes">
                The sequence of bytes to convert.
            </param>
            <param name="separator">
                A single space character used as a separator.
            </param>
            <param name="upper">
                true to convert the result to uppercase; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToHexa(System.String,System.Nullable{System.Char},System.Boolean)">
            <summary>
                Converts the specified string to hexadecimal sequence.
            </summary>
            <param name="str">
                The string to convert.
            </param>
            <param name="separator">
                A single space character used as a separator.
            </param>
            <param name="upper">
                true to convert the result to uppercase; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToBytesFormHexa(System.String)">
            <summary>
                Converts the specified hexadecimal sequence back into a sequence of bytes.
            </summary>
            <param name="str">
                The string to reconvert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.ToStringFromHexa(System.String)">
            <summary>
                Converts the specified hexadecimal sequence back to string.
            </summary>
            <param name="str">
                The string to reconvert.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Replace(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
                Returns a new sequence of bytes in which all occurrences of a specified sequence of bytes
                in this instance are replaced with another specified sequence of bytes.
            </summary>
            <param name="bytes">
                The sequence of bytes to change.
            </param>
            <param name="oldValue">
                The sequence of bytes to be replaced.
            </param>
            <param name="newValue">
                The sequence of bytes to replace all occurrences of oldValue.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.Parse``1(System.Object,``0)">
            <summary>
                Converts the given <see cref="T:System.Object"/> value to the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">
                The value <see cref="T:System.Type"/>.
            </typeparam>
            <param name="value">
                The value to convert.
            </param>
            <param name="defValue">
                The default value.
            </param>
        </member>
        <member name="M:SilDev.Reorganize.TryParse``1(System.Object,System.Object@,``0)">
            <summary>
                Try to convert the given <see cref="T:System.Object"/> value to the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">
                The value <see cref="T:System.Type"/>.
            </typeparam>
            <param name="value">
                The value to convert.
            </param>
            <param name="result">
                The result value.
            </param>
        </member>
        <member name="T:SilDev.ResourcesEx">
            <summary>
                Provides static methods for the usage of data resources.
            </summary>
        </member>
        <member name="T:SilDev.ResourcesEx.IconIndex">
            <summary>
                Provides enumerated symbol index values of the Windows Image Resource dynamic
                link library ('imageres.dll').
            </summary>
        </member>
        <member name="M:SilDev.ResourcesEx.GetIconFromFile(System.String,System.Int32,System.Boolean)">
            <summary>
                Returns the specified <see cref="T:System.Drawing.Icon"/> resource of a file.
            </summary>
            <param name="path">
                The file to read.
            </param>
            <param name="index">
                The index of the icon to extract.
            </param>
            <param name="large">
                true to return the large image; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ResourcesEx.GetSystemIcon(SilDev.ResourcesEx.IconIndex,System.Boolean,System.String)">
            <summary>
                Returns the specified <see cref="T:System.Drawing.Icon"/> resource from the system file
                "imageres.dll".
            </summary>
            <param name="index">
                The index of the icon to extract.
            </param>
            <param name="large">
                true to return the large image; otherwise, false.
            </param>
            <param name="location">
                The directory where the "imageres.dll" file is located.
            </param>
        </member>
        <member name="M:SilDev.ResourcesEx.GetSystemIcon(SilDev.ResourcesEx.IconIndex,System.String)">
            <summary>
                Returns the specified <see cref="T:System.Drawing.Icon"/> resource from the system file
                "imageres.dll".
            </summary>
            <param name="index">
                The index of the icon to extract.
            </param>
            <param name="location">
                The directory where the "imageres.dll" file is located.
            </param>
        </member>
        <member name="M:SilDev.ResourcesEx.GetFileTypeIcon(System.String,System.Boolean)">
            <summary>
                Returns an file type icon of the specified file.
            </summary>
            <param name="path">
                The file to get the file type icon.
            </param>
            <param name="large">
                true to return the large image; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.ResourcesEx.Extract(System.Byte[],System.String,System.Boolean)">
            <summary>
                Extracts the specified resources from the current process to a new file.
            </summary>
            <param name="resData">
                The resource to extract.
            </param>
            <param name="destPath">
                The file to create.
            </param>
            <param name="reverseBytes">
                true to invert the order of the bytes in the specified sequence before extracting;
                otherwise, false.
            </param>
        </member>
        <member name="T:SilDev.ResourcesEx.IconBrowserDialog">
            <summary>
                Displays a dialog box that prompts to the user to browse the icon resource of a file.
                <see cref="T:System.Windows.Forms.OpenFileDialog"/>
            </summary>
        </member>
        <member name="M:SilDev.ResourcesEx.IconBrowserDialog.#ctor(System.String,System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color})">
            <summary>
                Initializes an instance of the <see cref="T:SilDev.ResourcesEx.IconBrowserDialog"/> class.
            </summary>
            <param name="path">
                The path of the file to open.
            </param>
            <param name="backColor">
                The background color of the dialog box.
            </param>
            <param name="foreColor">
                The foreground color of the dialog box.
            </param>
            <param name="buttonFace">
                The button color of the dialog box.
            </param>
            <param name="buttonText">
                The button text color of the dialog box.
            </param>
            <param name="buttonHighlight">
                The button highlight color of the dialog box.
            </param>
        </member>
        <member name="T:SilDev.Service">
            <summary>
                Provides static methods to control service applications.
            </summary>
        </member>
        <member name="T:SilDev.Service.State">
            <summary>
                Provides enumerated values of service states.
            </summary>
        </member>
        <member name="F:SilDev.Service.State.Continuing">
            <summary>
                The service continue is pending.
            </summary>
        </member>
        <member name="F:SilDev.Service.State.Pausing">
            <summary>
                The service pause is pending.
            </summary>
        </member>
        <member name="F:SilDev.Service.State.Paused">
            <summary>
                The service is paused.
            </summary>
        </member>
        <member name="F:SilDev.Service.State.Running">
            <summary>
                The service is running.
            </summary>
        </member>
        <member name="F:SilDev.Service.State.Starting">
            <summary>
                The service is starting.
            </summary>
        </member>
        <member name="F:SilDev.Service.State.Stopping">
            <summary>
                The service is stopping.
            </summary>
        </member>
        <member name="F:SilDev.Service.State.Stopped">
            <summary>
                The service is not running.
            </summary>
        </member>
        <member name="F:SilDev.Service.State.NotFound">
            <summary>
                The service could not be found.
            </summary>
        </member>
        <member name="F:SilDev.Service.State.Unknown">
            <summary>
                The service state could not be determined.
            </summary>
        </member>
        <member name="M:SilDev.Service.Install(System.String,System.String,System.String,System.String)">
            <summary>
                Creates a service object.
            </summary>
            <param name="serviceName">
                The name of the service to install.
            </param>
            <param name="displayName">
                The display name to be used by user interface programs to identify the service.
            </param>
            <param name="path">
                The fully qualified path to the service binary file.
            </param>
            <param name="args">
                The command-line arguments for the service binary file.
            </param>
        </member>
        <member name="M:SilDev.Service.Install(System.String,System.String)">
            <summary>
                Creates a service object.
            </summary>
            <param name="serviceName">
                The name of the service to install.
            </param>
            <param name="path">
                The fully qualified path to the service binary file.
            </param>
        </member>
        <member name="M:SilDev.Service.Uninstall(System.String)">
            <summary>
                Removes an existing service.
            </summary>
            <param name="serviceName">
                The name of the service to uninstall.
            </param>
        </member>
        <member name="M:SilDev.Service.Exists(System.String)">
            <summary>
                Determines whether the specified service exists.
            </summary>
            <param name="serviceName">
                The name of the service to check.
            </param>
        </member>
        <member name="M:SilDev.Service.Start(System.String)">
            <summary>
                Starts an existing service.
            </summary>
            <param name="serviceName">
                The name of the service to start.
            </param>
        </member>
        <member name="M:SilDev.Service.Stop(System.String)">
            <summary>
                Stops an existing service.
            </summary>
            <param name="serviceName">
                The name of the service to stop.
            </param>
        </member>
        <member name="M:SilDev.Service.GetStatus(System.String)">
            <summary>
                Returns the current <see cref="T:SilDev.Service.State"/> of an existing service.
            </summary>
            <param name="serviceName">
                The name of the service to check.
            </param>
        </member>
        <member name="T:SilDev.TaskBar">
            <summary>
                Provides static methods to enable you to get or set the state of the taskbar.
            </summary>
        </member>
        <member name="T:SilDev.TaskBar.Location">
            <summary>
                Provides enumerated flags of the taskbar location.
            </summary>
        </member>
        <member name="T:SilDev.TaskBar.State">
            <summary>
                Provides enumerated options that control the current state of the taskbar.
            </summary>
        </member>
        <member name="F:SilDev.TaskBar.State.AutoHide">
            <summary>
                The taskbar is in the autohide state.
            </summary>
        </member>
        <member name="F:SilDev.TaskBar.State.AlwaysOnTop">
            <summary>
                <para>
                    The taskbar is in the always-on-top state.
                </para>
                <para>
                    Note that as of Windows 7, AlwaysOnTop is no longer returned because the taskbar
                    is always in that state.
                </para>
            </summary>
        </member>
        <member name="M:SilDev.TaskBar.GetState">
            <summary>
                Returns the current <see cref="T:SilDev.TaskBar.State"/> of the taskbar.
            </summary>
        </member>
        <member name="M:SilDev.TaskBar.SetState(SilDev.TaskBar.State)">
            <summary>
                Sets the new <see cref="T:SilDev.TaskBar.State"/> of the taskbar.
            </summary>
            <param name="state">
                The new state to set.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.GetLocation(System.Nullable{System.IntPtr})">
            <summary>
                Returns the location of the taskbar.
            </summary>
            <param name="hWnd">
                The handle of the window on which the taskbar is located.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.GetSize(System.Nullable{System.IntPtr})">
            <summary>
                Returns the size of the taskbar.
            </summary>
            <param name="hWnd">
                The handle of the window on which the taskbar is located.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.AddTab(System.IntPtr)">
            <summary>
                Adds an item to the taskbar.
            </summary>
            <param name="hWnd">
                A handle to the window to be added to the taskbar.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.DeleteTab(System.IntPtr)">
            <summary>
                Deletes an item from the taskbar.
            </summary>
            <param name="hWnd">
                A handle to the window to be deleted from the taskbar.
            </param>
        </member>
        <member name="T:SilDev.TaskBar.Progress">
            <summary>
                Provides static methods to manage a progress bar hosted in a taskbar button.
            </summary>
        </member>
        <member name="T:SilDev.TaskBar.Progress.Flags">
            <summary>
                Provides enumerated options that control the current state of the progres
                button.
            </summary>
        </member>
        <member name="F:SilDev.TaskBar.Progress.Flags.NoProgress">
            <summary>
                Stops displaying progress and returns the button to its normal state. Call this
                method with this flag to dismiss the progress bar when the operation is complete
                or canceled.
            </summary>
        </member>
        <member name="F:SilDev.TaskBar.Progress.Flags.Indeterminate">
            <summary>
                The progress indicator does not grow in size, but cycles repeatedly along the
                length of the taskbar button. This indicates activity without specifying what
                proportion of the progress is complete. Progress is taking place, but there is
                no prediction as to how long the operation will take.
            </summary>
        </member>
        <member name="F:SilDev.TaskBar.Progress.Flags.Normal">
            <summary>
                The progress indicator grows in size from left to right in proportion to the
                estimated amount of the operation completed. This is a determinate progress
                indicator; a prediction is being made as to the duration of the operation.
            </summary>
        </member>
        <member name="F:SilDev.TaskBar.Progress.Flags.Error">
            <summary>
                The progress indicator turns red to show that an error has occurred in one of
                the windows that is broadcasting progress. This is a determinate state. If the
                progress indicator is in the indeterminate state, it switches to a red
                determinate display of a generic percentage not indicative of actual progress.
            </summary>
        </member>
        <member name="F:SilDev.TaskBar.Progress.Flags.Paused">
            <summary>
                The progress indicator turns yellow to show that progress is currently stopped
                in one of the windows but can be resumed by the user. No error condition exists
                and nothing is preventing the progress from continuing. This is a determinate
                state. If the progress indicator is in the indeterminate state, it switches to a
                yellow determinate display of a generic percentage not indicative of actual
                progress.
            </summary>
        </member>
        <member name="M:SilDev.TaskBar.Progress.SetState(System.IntPtr,SilDev.TaskBar.Progress.Flags)">
            <summary>
                Sets the type and state of the progress indicator displayed on a taskbar button.
            </summary>
            <param name="hWnd">
                The handle of the window in which the progress of an operation is being shown.
            </param>
            <param name="flags">
                The flag that control the current state of the progress button.
            </param>
        </member>
        <member name="M:SilDev.TaskBar.Progress.SetValue(System.IntPtr,System.Double,System.Double)">
            <summary>
                Displays or updates a progress bar hosted in a taskbar button to show the specific
                percentage completed of the full operation.
            </summary>
            <param name="hWnd">
                The handle of the window whose associated taskbar button is being used as a progress
                indicator.
            </param>
            <param name="progressValue">
                An application-defined value that indicates the proportion of the operation that has
                been completed at the time the method is called.
            </param>
            <param name="progressMax">
                An application-defined value that specifies the value ullCompleted will have when the
                operation is complete.
            </param>
        </member>
        <member name="T:SilDev.TextEx">
            <summary>
                Provides static methods for converting or reorganizing of data.
            </summary>
        </member>
        <member name="M:SilDev.TextEx.IsLineSeparator(System.Char)">
            <summary>
                Indicates whether the specified character is categorized as a line separator
                character.
            </summary>
            <param name="ch">
                The character to evaluate.
            </param>
        </member>
        <member name="M:SilDev.TextEx.IsAscii(System.Char)">
            <summary>
                Indicates whether the specified character is categorized as an ASCII character.
            </summary>
            <param name="ch">
                The character to evaluate.
            </param>
        </member>
        <member name="M:SilDev.TextEx.FormatNewLine(System.String,System.String)">
            <summary>
                Converts the current <see cref="T:SilDev.TextEx.NewLineFormats"/> of the specified
                <see cref="T:System.String"/> to another format.
            </summary>
            <param name="text">
                The text to change.
            </param>
            <param name="newLineFormat">
                The new format to be applied.
            </param>
        </member>
        <member name="M:SilDev.TextEx.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
                Gets the character encoding of the specified file.
            </summary>
            <param name="file">
                The file to check.
            </param>
            <param name="defEncoding">
                The default character encoding, which is returned if no character encoding
                was found. If the value is NULL it returns <see cref="P:System.Text.Encoding.Default"/>.
            </param>
        </member>
        <member name="M:SilDev.TextEx.ChangeEncoding(System.String,System.Text.Encoding)">
            <summary>
                Changes the character encoding of the specified file. This function supports
                big files as well.
            </summary>
            <param name="file">
                The file to change.
            </param>
            <param name="encoding">
                The new character encoding.
            </param>
        </member>
        <member name="T:SilDev.TextEx.NewLineFormats">
            <summary>
                Provides <see cref="T:System.String"/> values of line separator characters.
            </summary>
        </member>
        <member name="T:SilDev.Tray">
            <summary>
                Provides the functionality to manage the items of the system tray area
                of the taskbar.
            </summary>
        </member>
        <member name="M:SilDev.Tray.RefreshVisibleArea">
            <summary>
                Refreshes the visible system tray area of the taskbar.
            </summary>
        </member>
        <member name="M:SilDev.Tray.RemovePhantomIcons">
            <summary>
                Removes invalid icons of the visible and hidden system tray area of
                the taskbar (experimental function).
            </summary>
        </member>
        <member name="T:SilDev.WinApi">
            <summary>
                An overkill class that provides a lot of Windows API (Application Programming Interface)
                functions.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.EnumChildProc">
            <summary>
                An application-defined callback function. It receives the child window handles. The
                WNDENUMPROC type defines a pointer to this callback function. EnumChildProc is a
                placeholder for the application-defined function name.
            </summary>
            <param name="hWnd">
                A handle to a child window of the parent window.
            </param>
            <param name="lParam">
                The application-defined value.
            </param>
            <returns>
                To continue enumeration, the callback function must return TRUE; to stop enumeration,
                it must return FALSE.
            </returns>
        </member>
        <member name="T:SilDev.WinApi.HookProc">
            <summary>
                Represents a pointer to the hook procedure.
            </summary>
            <param name="nCode">
                The hook code passed to the current hook procedure. The next hook procedure uses this
                code to determine how to process the hook information.
            </param>
            <param name="wParam">
                The wParam value passed to the current hook procedure. The meaning of this parameter
                depends on the type of hook associated with the current hook chain.
            </param>
            <param name="lParam">
                The lParam value passed to the current hook procedure. The meaning of this parameter
                depends on the type of hook associated with the current hook chain.
            </param>
            <returns>
                If the function succeeds, the return value is the handle to the hook procedure. If the
                function fails, the return value is NULL.
            </returns>
        </member>
        <member name="T:SilDev.WinApi.TimerProc">
            <summary>
                Defines a pointer to this callback function.
            </summary>
            <param name="hWnd">
                A handle to the window associated with the timer.
            </param>
            <param name="uMsg">
                The WM_TIMER (0x113) message.
            </param>
            <param name="nIdEvent">
                The timer's identifier.
            </param>
            <param name="dwTime">
                The number of milliseconds that have elapsed since the system was started.
            </param>
        </member>
        <member name="T:SilDev.WinApi.AccessRights">
            <summary>
                Provides enumerated values of process security and access rights.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.Delete">
            <summary>
                Required to delete the object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ReadControl">
            <summary>
                Required to read information in the security descriptor for the object, not
                including the information in the SACL.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.Synchronize">
            <summary>
                The right to use the object for synchronization. This enables a thread to wait
                until the object is in the signaled state.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.WriteDac">
            <summary>
                Required to modify the DACL in the security descriptor for the object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.WriteOwner">
            <summary>
                Required to change the owner in the security descriptor for the object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessCreateProcess">
            <summary>
                Required to create a process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessCreateThread">
            <summary>
                Required to create a thread.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessDupHandle">
            <summary>
                Required to duplicate a handle using
                <see cref="M:SilDev.WinApi.NativeHelper.DuplicateHandle(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32,System.Boolean,System.UInt32)"/>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessQueryInformation">
            <summary>
                Required to retrieve certain information about a process, such as its token,
                exit code, and priority class.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessQueryLimitedInformation">
            <summary>
                Required to retrieve certain information about a process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessSetInformation">
            <summary>
                Required to set certain information about a process, such as its priority class.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessSetQuota">
            <summary>
                Required to set memory limits using
                <see cref="M:SilDev.WinApi.NativeHelper.SetProcessWorkingSetSize(System.IntPtr,System.UIntPtr,System.UIntPtr)"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessSuspendResume">
            <summary>
                Required to suspend or resume a process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessTerminate">
            <summary>
                Required to terminate a process using
                <see cref="M:SilDev.WinApi.NativeHelper.TerminateProcess(System.IntPtr,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessVmOperation">
            <summary>
                Required to perform an operation on the address space of a process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessVmRead">
            <summary>
                Required to read memory in a process using
                <see cref="M:SilDev.WinApi.NativeHelper.ReadProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AccessRights.ProcessVmWrite">
            <summary>
                Required to write to memory in a process using
                <see cref="M:SilDev.WinApi.NativeHelper.WriteProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)"/>.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.AnimateWindowFlags">
            <summary>
                Provides enumerated values of window animations.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.Activate">
            <summary>
                Activates the window. Do not use this value with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Hide"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.Blend">
            <summary>
                Uses a fade effect. This flag can be used only if hwnd is a top-level window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.Center">
            <summary>
                Makes the window appear to collapse inward if <see cref="F:SilDev.WinApi.AnimateWindowFlags.Hide"/> is
                used or expand outward if the <see cref="F:SilDev.WinApi.AnimateWindowFlags.Hide"/> is not used. The
                various direction flags have no effect.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.Hide">
            <summary>
                Hides the window. By default, the window is shown.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.HorPositive">
            <summary>
                Animates the window from left to right. This flag can be used with roll or slide
                animation. It is ignored when used with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Center"/> or
                <see cref="F:SilDev.WinApi.AnimateWindowFlags.Blend"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.HorNegative">
            <summary>
                Animates the window from right to left. This flag can be used with roll or slide
                animation. It is ignored when used with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Center"/>
                or <see cref="F:SilDev.WinApi.AnimateWindowFlags.Blend"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.Slide">
            <summary>
                Uses slide animation. By default, roll animation is used. This flag is ignored
                when used with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Center"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.VerPositive">
            <summary>
                Animates the window from top to bottom. This flag can be used with roll or slide
                animation. It is ignored when used with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Center"/> or
                <see cref="F:SilDev.WinApi.AnimateWindowFlags.Blend"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AnimateWindowFlags.VerNegative">
            <summary>
                Animates the window from bottom to top. This flag can be used with roll or slide
                animation. It is ignored when used with <see cref="F:SilDev.WinApi.AnimateWindowFlags.Center"/> or
                <see cref="F:SilDev.WinApi.AnimateWindowFlags.Blend"/>.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.AppBarMessageOptions">
            <summary>
                Provides enumerated values of appbar messages.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.New">
            <summary>
                Registers a new appbar and specifies the message identifier that the system
                should use to send notification messages to the appbar
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.Remove">
            <summary>
                Unregisters an appbar, removing the bar from the system's internal list.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.QueryPos">
            <summary>
                Requests a size and screen position for an appbar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.SetPos">
            <summary>
                Sets the size and screen position of an appbar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.GetState">
            <summary>
                Retrieves the autohide and always-on-top states of the Windows taskbar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.GetTaskBarPos">
            <summary>
                Retrieves the bounding rectangle of the Windows taskbar. Note that this applies only
                to the system taskbar. Other objects, particularly toolbars supplied with third-party
                software, also can be present. As a result, some of the screen area not covered by the
                Windows taskbar might not be visible to the user. To retrieve the area of the screen
                not covered by both the taskbar and other app bars-the working area available to your
                application-, use the GetMonitorInfo function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.Activate">
            <summary>
                Notifies the system to activate or deactivate an appbar. The lParam member of the
                <see cref="T:SilDev.WinApi.AppBarData"/> pointed to by pData is set to TRUE to activate or FALSE to
                deactivate.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.GetAutoHideBar">
            <summary>
                Retrieves the handle to the autohide appbar associated with a particular edge of the
                screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.SetAutoHideBar">
            <summary>
                Registers or unregisters an autohide appbar for an edge of the screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.WindowPosChanged">
            <summary>
                Notifies the system when an appbar's position has changed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.SetState">
            <summary>
                Sets the state of the appbar's autohide and always-on-top attributes.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.GetAutoHideBarEx">
            <summary>
                Retrieves the handle to the autohide appbar associated with a particular edge of a
                particular monitor.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarMessageOptions.SetAutoHideBarEx">
            <summary>
                Registers or unregisters an autohide appbar for an edge of a particular monitor.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.DuplicateOptions">
            <summary>
                Provides enumerated options of handle duplication.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DuplicateOptions.CloseSource">
            <summary>
                Closes the source handle. This occurs regardless of any error status returned.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DuplicateOptions.SameAccess">
            <summary>
                Ignores the dwDesiredAccess parameter. The duplicate handle has the same access as the
                source handle.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.LocalAllocFlags">
            <summary>
                Provides enumerated attributes of memory allocation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.LHND">
            <summary>
                Combines <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemMoveable"/> and <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemZeroInit"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.LMemFixed">
            <summary>
                Allocates fixed memory. The return value is a pointer to the memory object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.LMemMoveable">
            <summary>
                Allocates movable memory. Memory blocks are never moved in physical memory,
                but they can be moved within the default heap.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.LMemZeroInit">
            <summary>
                Initializes memory contents to zero.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.LPtr">
            <summary>
                Combines <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemFixed"/> and <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemZeroInit"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.NonZeroLHND">
            <summary>
                Same as <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemMoveable"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.LocalAllocFlags.NonZeroLPtr">
            <summary>
                Same as <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemFixed"/>.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.MemAllocTypes">
            <summary>
                Provides enumerated values of memory allocation types.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Commit">
            <summary>
                Allocates memory charges (from the overall size of memory and the paging files
                on disk) for the specified reserved memory pages. The function also guarantees
                that when the caller later initially accesses the memory, the contents will be
                zero. Actual physical pages are not allocated unless/until the virtual
                addresses are actually accessed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Reserve">
            <summary>
                Reserves a range of the process's virtual address space without allocating any
                actual physical storage in memory or in the paging file on disk.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Decommit">
            <summary>
                Decommits the specified region of committed pages. After the operation, the
                pages are in the reserved state.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Release">
            <summary>
                Releases the specified region of pages. After the operation, the pages are in
                the free state.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Reset">
            <summary>
                Indicates that data in the memory range specified by lpAddress and dwSize is
                no longer of interest. The pages should not be read from or written to the
                paging file. However, the memory block will be used again later, so it should
                not be decommitted. This value cannot be used with any other value.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.Physical">
            <summary>
                Reserves an address range that can be used to map Address Windowing Extensions
                (AWE) pages.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.TopDown">
            <summary>
                Allocates memory at the highest possible address. This can be slower than
                regular allocations, especially when there are many allocations.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.WriteWatch">
            <summary>
                Causes the system to track pages that are written to in the allocated region.
                If you specify this value, you must also specify <see cref="F:SilDev.WinApi.MemAllocTypes.Reserve"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemAllocTypes.LargePages">
            <summary>
                Allocates memory using large page support.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.MemFreeTypes">
            <summary>
                Provides enumerated free type values of memory allocation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemFreeTypes.Decommit">
            <summary>
                Decommits the specified region of committed pages. After the operation, the
                pages are in the reserved state.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemFreeTypes.Release">
            <summary>
                Releases the specified region of pages. After the operation, the pages are in
                the free state.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.MemProtectFlags">
            <summary>
                Provides enumerated constants of memory protection.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageExecute">
            <summary>
                Enables execute access to the committed region of pages. An attempt to write
                to the committed region results in an access violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageExecuteRead">
            <summary>
                Enables execute or read-only access to the committed region of pages. An
                attempt to write to the committed region results in an access violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageExecuteReadWrite">
            <summary>
                Enables execute, read-only, or read/write access to the committed region of
                pages.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageExecuteWriteCopy">
            <summary>
                Enables execute, read-only, or copy-on-write access to a mapped view of a file
                mapping object. An attempt to write to a committed copy-on-write page results
                in a private copy of the page being made for the process. The private page is
                marked as <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteReadWrite"/>, and the change is written to
                the new page.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageNoAccess">
            <summary>
                Disables all access to the committed region of pages. An attempt to read from,
                write to, or execute the committed region results in an access violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageReadOnly">
            <summary>
                Enables read-only access to the committed region of pages. An attempt to write
                to the committed region results in an access violation. If Data Execution
                Prevention is enabled, an attempt to execute code in the committed region
                results in an access violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageReadWrite">
            <summary>
                Enables read-only or read/write access to the committed region of pages. If
                Data Execution Prevention is enabled, attempting to execute code in the
                committed region results in an access violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageWriteCopy">
            <summary>
                Enables read-only or copy-on-write access to a mapped view of a file mapping
                object. An attempt to write to a committed copy-on-write page results in a
                private copy of the page being made for the process. The private page is
                marked as <see cref="F:SilDev.WinApi.MemProtectFlags.PageReadWrite"/>, and the change is written to the new
                page. If Data Execution Prevention is enabled, attempting to execute code in
                the committed region results in an access violation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageTargetsInvalid">
            <summary>
                Sets all locations in the pages as invalid targets for CFG. Used along with
                any execute page protection like <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecute"/>,
                <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteRead"/>, <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteReadWrite"/> and
                <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteWriteCopy"/>. Any indirect call to locations in those
                pages will fail CFG checks and the process will be terminated. The default
                behavior for executable pages allocated is to be marked valid call targets
                for CFG.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageTargetsNoUpdate">
            <summary>
                Pages in the region will not have their CFG information updated while the
                protection changes for VirtualProtect. For example, if the pages in the region
                was allocated using <see cref="F:SilDev.WinApi.MemProtectFlags.PageTargetsInvalid"/>, then the invalid
                information will be maintained while the page protection changes. This flag is
                only valid when the protection changes to an executable type like
                <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecute"/>, <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteRead"/>,
                <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteReadWrite"/> and <see cref="F:SilDev.WinApi.MemProtectFlags.PageExecuteWriteCopy"/>.
                The default behavior for VirtualProtect protection change to executable is to
                mark all locations as valid call targets for CFG.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageGuard">
            <summary>
                Pages in the region become guard pages. Any attempt to access a guard page
                causes the system to raise a STATUS_GUARD_PAGE_VIOLATION (0x80000001) exception
                and turn off the guard page status. Guard pages thus act as a one-time access
                alarm.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageNoCache">
            <summary>
                Sets all pages to be non-cachable. Applications should not use this attribute
                except when explicitly required for a device. Using the interlocked functions
                with memory that is mapped with <see cref="F:SilDev.WinApi.MemProtectFlags.PageNoCache"/> can result
                in an <see cref="T:System.Runtime.InteropServices.ExternalException"/>.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MemProtectFlags.PageWriteCombine">
            <summary>
                Sets all pages to be write-combined.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ModifyMenuFlags">
            <summary>
                Provides enumerated values of menu items.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.ByCommand">
            <summary>
                Indicates that the uPosition parameter gives the identifier of the menu item.
                The <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> flag is the default if neither the
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> nor <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByPosition"/> flag is specified.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.ByPosition">
            <summary>
                Indicates that the uPosition parameter gives the zero-based relative position
                of the menu item.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Bitmap">
            <summary>
                Uses a bitmap as the menu item. The lpNewItem parameter contains a handle to
                the bitmap.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Checked">
            <summary>
                Places a check mark next to the item. If your application provides check-mark
                bitmaps (see the SetMenuItemBitmaps function), this flag displays a selected
                bitmap next to the menu item.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Disabled">
            <summary>
                Disables the menu item so that it cannot be selected, but this flag does not
                gray it.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Enabled">
            <summary>
                Enables the menu item so that it can be selected and restores it from its
                grayed state.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Grayed">
            <summary>
                Disables the menu item and grays it so that it cannot be selected.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.MenuBarBreak">
            <summary>
                Functions the same as the <see cref="F:SilDev.WinApi.ModifyMenuFlags.MenuBreak"/> flag for a menu bar. For
                a drop-down menu, submenu, or shortcut menu, the new column is separated from
                the old column by a vertical line.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.MenuBreak">
            <summary>
                Places the item on a new line (for menu bars) or in a new column (for a
                drop-down menu, submenu, or shortcut menu) without separating columns.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.OwnerDraw">
            <summary>
                Specifies that the item is an owner-drawn item. Before the menu is displayed
                for the first time, the window that owns the menu receives a WM_MEASUREITEM
                message to retrieve the width and height of the menu item. The WM_DRAWITEM
                message is then sent to the window procedure of the owner window whenever
                the appearance of the menu item must be updated.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Popup">
            <summary>
                Specifies that the menu item opens a drop-down menu or submenu. The uIDNewItem
                parameter specifies a handle to the drop-down menu or submenu. This flag is
                used to add a menu name to a menu bar or a menu item that opens a submenu to a
                drop-down menu, submenu, or shortcut menu.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Separator">
            <summary>
                Draws a horizontal dividing line. This flag is used only in a drop-down menu,
                submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted.
                The lpNewItem and uIDNewItem parameters are ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.String">
            <summary>
                Specifies that the menu item is a text string; the lpNewItem parameter is a
                pointer to the string.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Unchecked">
            <summary>
                Does not place a check mark next to the item (the default). If your application
                supplies check-mark bitmaps (see the SetMenuItemBitmaps function), this flag
                displays a clear bitmap next to the menu item.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ModifyMenuFlags.Remove">
            <summary>
                Remove uPosition parameters.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ProcessInfoFlags">
            <summary>
                Provides enumerated values of the process information class.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInfoFlags.ProcessBasicInformation">
            <summary>
                Retrieves a pointer to a PEB structure that can be used to determine whether the
                specified process is being debugged, and a unique value used by the system to identify
                the specified process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInfoFlags.ProcessDebugPort">
            <summary>
                Retrieves a DWORD_PTR value that is the port number of the debugger for the process. A
                nonzero value indicates that the process is being run under the control of a ring 3
                debugger.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInfoFlags.ProcessWow64Information">
            <summary>
                Determines whether the process is running in the WOW64 environment (WOW64 is the x86
                emulator that allows Win32-based applications to run on 64-bit Windows).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInfoFlags.ProcessImageFileName">
            <summary>
                Retrieves a <see cref="T:System.String"/> value containing the name of the image file for the
                process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ProcessInfoFlags.ProcessBreakOnTermination">
            <summary>
                Retrieves a <see cref="T:System.UInt64"/> value indicating whether the process is considered
                critical.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceErrors">
            <summary>
                Provides enumerated values of service errors.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceErrors.Critical">
            <summary>
                The startup program logs the error in the event log, if possible. If the last-known-good
                configuration is being started, the startup operation fails. Otherwise, the system is
                restarted with the last-known good configuration.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceErrors.Ignore">
            <summary>
                The startup program ignores the error and continues the startup operation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceErrors.Normal">
            <summary>
                The startup program logs the error in the event log but continues the startup operation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceErrors.Severe">
            <summary>
                The startup program logs the error in the event log. If the last-known-good configuration is
                being started, the startup operation continues. Otherwise, the system is restarted with the
                last-known-good configuration.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.SetWindowPosFlags">
            <summary>
                Provides enumerated attributes of memory allocation.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.AsyncWindowPos">
            <summary>
                If the calling thread and the thread that owns the window are attached to different input
                queues, the system posts the request to the thread that owns the window. This prevents the
                calling thread from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.DeferErase">
            <summary>
                Prevents generation of the WM_SYNCPAINT message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.DrawFrame">
            <summary>
                Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.FrameChanged">
            <summary>
                Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message
                to the window, even if the window's size is not being changed. If this flag is not specified,
                WM_NCCALCSIZE is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.HideWindow">
            <summary>
                Hides the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoActive">
            <summary>
                Does not activate the window. If this flag is not set, the window is activated and moved to
                the top of either the topmost or non-topmost group (depending on the setting of the
                hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoCopyBits">
            <summary>
                Discards the entire contents of the client area. If this flag is not specified, the valid
                contents of the client area are saved and copied back into the client area after the window
                is sized or repositioned.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoMove">
            <summary>
                Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoOwnerZOrder">
            <summary>
                Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoRedraw">
            <summary>
                Does not redraw changes. If this flag is set, no repainting of any kind occurs. This
                applies to the client area, the nonclient area (including the title bar and scroll bars),
                and any part of the parent window uncovered as a result of the window being moved. When this
                flag is set, the application must explicitly invalidate or redraw any parts of the window and
                parent window that need redrawing.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoReposition">
            <summary>
                Same as the <see cref="F:SilDev.WinApi.SetWindowPosFlags.NoOwnerZOrder"/> flag.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoSendChanging">
            <summary>
                Prevents the window from receiving the WM_WINDOWPOSCHANGING (0x46) message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoSize">
            <summary>
                Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.NoZOrder">
            <summary>
                Retains the current Z order (ignores the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.SetWindowPosFlags.ShowWindow">
            <summary>
                Displays the window.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ShowWindowFlags">
            <summary>
                Provides enumerated values of window's show statements.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ForceMinimize">
            <summary>
                Minimizes a window, even if the thread that owns the window is not responding.
                This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.Hide">
            <summary>
                Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.Maximize">
            <summary>
                Maximizes the specified window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.Minimize">
            <summary>
                Minimizes the specified window and activates the next top-level window in the
                Z order.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.Restore">
            <summary>
                Activates and displays the window. If the window is minimized or maximized,
                the system restores it to its original size and position. An application
                should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.Show">
            <summary>
                Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowDefault">
            <summary>
                Sets the show state based on the SW_ value specified in the STARTUPINFO
                structure passed to the CreateProcess function by the program that started
                the application.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowMaximized">
            <summary>
                Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowMinimized">
            <summary>
                Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowMinNoActive">
            <summary>
                Displays the window as a minimized window. This value is similar to
                <see cref="F:SilDev.WinApi.ShowWindowFlags.ShowMinimized"/>, except the window is not activated.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowNa">
            <summary>
                Displays the window in its current size and position. This value is similar to
                <see cref="F:SilDev.WinApi.ShowWindowFlags.Show"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowNoActivate">
            <summary>
                Displays a window in its most recent size and position. This value is similar
                to <see cref="F:SilDev.WinApi.ShowWindowFlags.ShowNormal"/>, except that the window is not activated.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShowWindowFlags.ShowNormal">
            <summary>
                Activates and displays a window. If the window is minimized or maximized, the
                system restores it to its original size and position. An application should
                specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.StandardAccessRights">
            <summary>
                Provides enumerated values of standard access rights.
                <para>
                    Each type of securable object has a set of access rights that correspond to
                    operations specific to that type of object. In addition to these object-specific
                    access rights, there is a set of standard access rights that correspond to
                    operations common to most types of securable objects.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.All">
            <summary>
                Combines <see cref="F:SilDev.WinApi.StandardAccessRights.Delete"/>, <see cref="F:SilDev.WinApi.StandardAccessRights.ReadControl"/>, <see cref="F:SilDev.WinApi.StandardAccessRights.WriteDac"/>,
                and <see cref="F:SilDev.WinApi.StandardAccessRights.WriteOwner"/> access.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.Delete">
            <summary>
                The right to delete the object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.ReadControl">
            <summary>
                The right to read the information in the object's security descriptor, not
                including the information in the system access control list (SACL).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.Required">
            <summary>
                Combines <see cref="F:SilDev.WinApi.StandardAccessRights.Delete"/>, <see cref="F:SilDev.WinApi.StandardAccessRights.ReadControl"/>, <see cref="F:SilDev.WinApi.StandardAccessRights.WriteDac"/>,
                and <see cref="F:SilDev.WinApi.StandardAccessRights.WriteOwner"/> access.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.Synchronize">
            <summary>
                The right to use the object for synchronization. This enables a thread to wait
                until the object is in the signaled state. Some object types do not support
                this access right.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.WriteDac">
            <summary>
                The right to modify the discretionary access control list (DACL) in the object's
                security descriptor.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.StandardAccessRights.WriteOwner">
            <summary>
                The right to change the owner in the object's security descriptor.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.Win32HookFlags">
            <summary>
                Provides enumerated hook constants.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtActivate">
            <summary>
                The system is about to activate a window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtClickSkipped">
            <summary>
                The system has removed a mouse message from the system message queue. Upon receiving
                this hook code, a CBT application must install a <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook
                procedure in response to the mouse message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtCreateWnd">
            <summary>
                A window is about to be created. The system calls the hook procedure before sending
                the WM_CREATE or WM_NCCREATE message to the window. If the hook procedure returns a
                nonzero value, the system destroys the window; the CreateWindow function returns NULL,
                but the WM_DESTROY message is not sent to the window. If the hook procedure returns
                zero, the window is created normally. At the time of the <see cref="F:SilDev.WinApi.Win32HookFlags.HCbtCreateWnd"/>
                notification, the window has been created, but its final size and position may not
                have been determined and its parent window may not have been established. It is
                possible to send messages to the newly created window, although it has not yet
                received WM_NCCREATE or WM_CREATE messages. It is also possible to change the position
                in the z-order of the newly created window by modifying the hwndInsertAfter member of
                the CBT_CREATEWND structure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtDestroyWnd">
            <summary>
                A window is about to be destroyed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtKeySkipped">
            <summary>
                The system has removed a keyboard message from the system message queue. Upon receiving
                this hook code, a CBT application must install a <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook
                procedure in response to the keyboard message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtMinMax">
            <summary>
                A window is about to be minimized or maximized.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtMoveSize">
            <summary>
                A window is about to be moved or sized.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtQs">
            <summary>
                The system has retrieved a WM_QUEUESYNC message from the system message queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtSetFocus">
            <summary>
                A window is about to receive the keyboard focus.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.HCbtSysCommand">
            <summary>
                A system command is about to be carried out. This allows a CBT application to prevent
                task switching by means of hot keys.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.MsgFDialogBox">
            <summary>
                The input event occurred in a message box or dialog box.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.MsgFMenu">
            <summary>
                The input event occurred in a menu.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.MsgFScrollbar">
            <summary>
                The input event occurred in a scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhCallWndProc">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProc"/> and <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hooks enable you to
                monitor messages sent to window procedures. The system calls a <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProc"/>
                hook procedure before passing the message to the receiving window procedure, and calls the
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hook procedure after the window procedure has processed the
                message. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hook passes a pointer to a CWPRETSTRUCT structure
                to the hook procedure. The structure contains the return value from the window procedure that
                processed the message, as well as the message parameters associated with the message.
                Subclassing the window does not work for messages
                set between processes.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProc"/> and <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hooks enable you to monitor
                messages sent to window procedures. The system calls a <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProc"/> hook procedure
                before passing the message to the receiving window procedure, and calls the
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hook procedure after the window procedure has processed the message.
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/> hook passes a pointer to a CWPRETSTRUCT structure to the hook
                procedure. The structure contains the return value from the window procedure that processed the
                message, as well as the message parameters associated with the message. Subclassing the window does
                not work for messages set between processes.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhCbt">
            <summary>
                The system calls a <see cref="F:SilDev.WinApi.Win32HookFlags.WhCbt"/> hook procedure before activating, creating, destroying,
                minimizing, maximizing, moving, or sizing a window; before completing a system command; before
                removing a mouse or keyboard event from the system message queue; before setting the input focus;
                or before synchronizing with the system message queue. The value the hook procedure returns
                determines whether the system allows or prevents one of these operations. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhCbt"/>
                hook is intended primarily for computer-based training (CBT) applications.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhDebug">
            <summary>
                The system calls a <see cref="F:SilDev.WinApi.Win32HookFlags.WhDebug"/> hook procedure before calling hook procedures associated
                with any other hook in the system. You can use this hook to determine whether to allow the system
                to call hook procedures associated with other types
                of hooks.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhForegroundIdle">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhForegroundIdle"/> hook enables you to perform low priority tasks during times
                when its foreground thread is idle. The system calls a <see cref="F:SilDev.WinApi.Win32HookFlags.WhForegroundIdle"/> hook
                procedure when the application's foreground thread is about to become idle.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhGetMessage">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhGetMessage"/> hook enables an application to monitor messages about to be
                returned by the GetMessage or PeekMessage function. You can use the <see cref="F:SilDev.WinApi.Win32HookFlags.WhGetMessage"/>
                hook to monitor mouse and keyboard input and other messages posted to the message
                queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhHardware">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhHardware"/> hook enables you to monitor various hardware events.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook enables an application to insert messages into the
                system message queue. You can use this hook to play back a series of mouse and
                keyboard events recorded earlier by using <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalRecord"/>. Regular mouse and
                keyboard input is disabled as long as a <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook is installed. A
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook is a global hook-it cannot be used as a thread-specific
                hook. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/> hook returns a time-out value. This value tells the
                system how many milliseconds to wait before processing the current message from the playback
                hook. This enables the hook to control the timing of the events it plays back.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhJournalRecord">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalRecord"/> hook enables you to monitor and record input events. Typically,
                you use this hook to record a sequence of mouse and keyboard events to play back later by using
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalPlayback"/>. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhJournalRecord"/> hook is a global hook-it cannot
                be used as a thread-specific hook.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhKeyboard">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhKeyboard"/> hook enables an application to monitor message traffic for WM_KEYDOWN
                and WM_KEYUP messages about to be returned by the GetMessage or PeekMessage function. You can use
                the <see cref="F:SilDev.WinApi.Win32HookFlags.WhKeyboard"/> hook to monitor keyboard input posted to a message queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhKeyboardLl">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhKeyboardLl"/> hook enables you to monitor keyboard input events about to be
                posted in a thread input queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhMouse">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMouse"/> hook enables you to monitor mouse messages about to be returned by
                the GetMessage or PeekMessage function. You can use the <see cref="F:SilDev.WinApi.Win32HookFlags.WhMouse"/> hook to monitor
                mouse input posted to a message queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhMouseLl">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMouseLl"/> hook enables you to monitor mouse input events about to be posted
                in a thread input queue.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> and <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hooks enable you to monitor messages
                about to be processed by a menu, scroll bar, message box, or dialog box, and to detect when a
                different window is about to be activated as a result of the user's pressing the ALT+TAB or ALT+ESC
                key combination. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> hook can only monitor messages passed to a menu,
                scroll bar, message box, or dialog box created by the application that installed the hook procedure.
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hook monitors such messages for all applications.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhShell">
            <summary>
                A shell application can use the <see cref="F:SilDev.WinApi.Win32HookFlags.WhShell"/> hook to receive important notifications. The
                system calls a <see cref="F:SilDev.WinApi.Win32HookFlags.WhShell"/> hook procedure when the shell application is about to be
                activated and when a top-level window is created or destroyed. Note that custom shell applications
                do not receive <see cref="F:SilDev.WinApi.Win32HookFlags.WhShell"/> messages. Therefore, any application that registers itself as
                the default shell must call the SystemParametersInfo function before it (or any other application)
                can receive WH_SHELL messages. This function must be called with SPI_SETMINIMIZEDMETRICS and a
                MINIMIZEDMETRICS structure. Set the iArrange member of this structure to ARW_HIDE.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter">
            <summary>
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> and <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hooks enable you to monitor messages
                about to be processed by a menu, scroll bar, message box, or dialog box, and to detect when a
                different window is about to be activated as a result of the user's pressing the ALT+TAB or ALT+ESC
                key combination. The <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> hook can only monitor messages passed to a menu,
                scroll bar, message box, or dialog box created by the application that installed the hook procedure.
                The <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hook monitors such messages for all applications. The
                <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> and <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hooks enable you to perform message
                filtering during modal loops that is equivalent to the filtering done in the main message loop. For
                example, an application often examines a new message in the main loop between the time it retrieves
                the message from the queue and the time it dispatches the message, performing special processing as
                appropriate. However, during a modal loop, the system retrieves and dispatches messages without
                allowing an application the chance to filter the messages in its main message loop. If an
                application installs a <see cref="F:SilDev.WinApi.Win32HookFlags.WhMsgFilter"/> or <see cref="F:SilDev.WinApi.Win32HookFlags.WhSysMsgFilter"/> hook procedure,
                the system calls the procedure during the modal loop.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowLongFlags">
            <summary>
                Provides enumerated attribute values of windows statements.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.DwlDlgProc">
            <summary>
                Retrieves the address of the dialog box procedure, or a handle representing the
                address of the dialog box procedure. You must use the CallWindowProc function to
                call the dialog box procedure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.DwlMsgResult">
            <summary>
                Retrieves the return value of a message processed in the dialog box procedure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.DwlUser">
            <summary>
                Retrieves extra information private to the application, such as handles or pointers.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlExStyle">
            <summary>
                Sets a new extended window style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlHandleInstance">
            <summary>
                Sets a new application instance handle.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlId">
            <summary>
                Sets a new identifier of the child window. The window cannot be a top-level window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlStyle">
            <summary>
                Sets a new window style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlUserData">
            <summary>
                Sets the user data associated with the window. This data is intended for use by the
                application that created the window. Its value is initially zero.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowLongFlags.GwlWndProc">
            <summary>
                Sets a new address for the window procedure. You cannot change this attribute if the
                window does not belong to the same process as the calling thread.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowMenuFlags">
            <summary>
                Provides enumerated values of system command requests.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScClose">
            <summary>
                Closes the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScContextHelp">
            <summary>
                Changes the cursor to a question mark with a pointer. If the user then clicks a
                control in the dialog box, the control receives a WM_HELP message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScDefault">
            <summary>
                Selects the default item; the user double-clicked the window menu.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScHotkey">
            <summary>
                Activates the window associated with the application-specified hot key. The lParam
                parameter identifies the window to activate.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScHScroll">
            <summary>
                Scrolls horizontally.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScKeyMenu">
            <summary>
                Retrieves the window menu as a result of a keystroke.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScMaximize">
            <summary>
                Maximizes the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScMinimize">
            <summary>
                Minimizes the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScMonitorPower">
            <summary>
                Sets the state of the display. This command supports devices that have power-saving
                features, such as a battery-powered personal computer. - The lParam parameter can
                have the following values: -1 (the display is powering on), 1 (the display is going
                to low power), 2 (the display is being shut off).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScMouseMenu">
            <summary>
                Retrieves the window menu as a result of a mouse click.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScMove">
            <summary>
                Moves the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScNextWindow">
            <summary>
                Moves to the next window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScPrevWindow">
            <summary>
                Moves to the previous window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScRestore">
            <summary>
                Restores the window to its normal position and size.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScScreenSave">
            <summary>
                Executes the screen saver application specified in the [boot] section of the System.ini file.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScSize">
            <summary>
                Sizes the window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScTaskList">
            <summary>
                Activates the Start menu.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScVScroll">
            <summary>
                Scrolls vertically.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.ScfIsSecure">
            <summary>
                Indicates whether the screen saver is secure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.WmCopyData">
            <summary>
                If the receiving application processes this message, it should return TRUE; otherwise, it
                should return FALSE. The data being passed must not contain pointers or other references to
                objects not accessible to the application receiving the data. While this message is being
                sent, the referenced data must not be changed by another thread of the sending process. The
                receiving application should consider the data read-only. The lParam parameter is valid only
                during the processing of the message. The receiving application should not free the memory
                referenced by lParam. If the receiving application must access the data after SendMessage
                returns, it must copy the data into a local buffer.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.WmInitDialog">
            <summary>
                The dialog box procedure should return TRUE to direct the system to set the keyboard focus to
                the control specified by wParam. Otherwise, it should return FALSE to prevent the system from
                setting the default keyboard focus.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.WmMouseMove">
            <summary>
                Posted to a window when the cursor moves. If the mouse is not captured, the message is posted
                to the window that contains the cursor. Otherwise, the message is posted to the window that
                has captured the mouse.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.WmSettingChange">
            <summary>
                A message that is sent to all top-level windows when the SystemParametersInfo  function changes
                a system-wide setting or when policy settings have changed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowMenuFlags.WmSysCommand">
            <summary>
                A window receives this message when the user chooses a command from the Window menu (formerly
                known as the system or control menu) or when the user chooses the maximize button, minimize
                button, restore button, or close button.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowPlacementFlags">
            <summary>
                Provides enumerated flags of window placements.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacementFlags.AsyncWindowPlacement">
            <summary>
                If the calling thread and the thread that owns the window are attached to different
                input queues, the system posts the request to the thread that owns the window. This
                prevents the calling thread from blocking its execution while other threads process
                the request.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacementFlags.RestoreToMaximized">
            <summary>
                The restored window will be maximized, regardless of whether it was maximized before it
                was minimized. This setting is only valid the next time the window is restored. It does
                not change the default restoration behavior.
                <para>
                    This flag is only valid when the <see cref="F:SilDev.WinApi.ShowWindowFlags.ShowMinimized"/> value
                    is specified for the showCmd member.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacementFlags.SetMinimizedPosition">
            <summary>
                The coordinates of the minimized window may be specified.
                <para>
                    This flag must be specified if the coordinates are set in the ptMinPosition member.
                </para>
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowStyleFlags">
            <summary>
                Provides enumerated values of window styles.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Border">
            <summary>
                The window has a thin-line border.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Caption">
            <summary>
                The window has a title bar (includes the <see cref="F:SilDev.WinApi.WindowStyleFlags.Border"/> style).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Child">
            <summary>
                The window is a child window. A window with this style cannot have a menu bar. This style cannot
                be used with the WS_POPUP style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ChildWindow">
            <summary>
                Same as the WS_CHILD style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ClipChildren">
            <summary>
                Excludes the area occupied by child windows when drawing occurs within the parent window. This
                style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ClipSiblings">
            <summary>
                Clips child windows relative to each other; that is, when a particular child window receives a
                WM_PAINT message, the <see cref="F:SilDev.WinApi.WindowStyleFlags.ClipSiblings"/> style clips all other overlapping child
                windows out of the region of the child window to be updated. If <see cref="F:SilDev.WinApi.WindowStyleFlags.ClipSiblings"/>
                is not specified and child windows overlap, it is possible, when drawing within the client area
                of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Disabled">
            <summary>
                The window is initially disabled. A disabled window cannot receive input from the user. To change
                this after a window has been created, use the EnableWindow function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.DlgFrame">
            <summary>
                The window has a border of a style typically used with dialog boxes. A window with this style
                cannot have a title bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Group">
            <summary>
                The window is the first control of a group of controls. The group consists of this first control
                and all controls defined after it, up to the next control with the WS_GROUP style. The first
                control in each group usually has the <see cref="F:SilDev.WinApi.WindowStyleFlags.TabStop"/> style so that the user can move
                from group to group. The user can subsequently change the keyboard focus from one control in the
                group to the next control in the group by using the direction keys.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.HorScroll">
            <summary>
                The window has a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Iconic">
            <summary>
                The window is initially minimized. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.Minimize"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Maximize">
            <summary>
                The window is initially maximized.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.MaximizeBox">
            <summary>
                The window has a maximize button. Cannot be combined with the <see cref="F:SilDev.WinApi.WindowStyleFlags.ExContextHelp"/> style.
                The <see cref="F:SilDev.WinApi.WindowStyleFlags.SysMenu"/> style must also be specified.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Minimize">
            <summary>
                The window is initially minimized. Same as the WS_ICONIC style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.MinimizeBox">
            <summary>
                The window has a minimize button. Cannot be combined with the <see cref="F:SilDev.WinApi.WindowStyleFlags.ExContextHelp"/> style.
                The <see cref="F:SilDev.WinApi.WindowStyleFlags.SysMenu"/> style must also be specified.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Overlapped">
            <summary>
                The window is an overlapped window. An overlapped window has a title bar and a border. Same
                as the <see cref="F:SilDev.WinApi.WindowStyleFlags.Tiled"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.OverlappedWindow">
            <summary>
                The window is an overlapped window. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.TiledWindow"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Popup">
            <summary>
                The windows is a pop-up window. This style cannot be used with the WS_CHILD style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.PopupWindow">
            <summary>
                The window is a pop-up window. The <see cref="F:SilDev.WinApi.WindowStyleFlags.Caption"/> and <see cref="F:SilDev.WinApi.WindowStyleFlags.PopupWindow"/> styles
                must be combined to make the window menu visible.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.SizeBox">
            <summary>
                The window has a sizing border. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.ThickFrame"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.SysMenu">
            <summary>
                The window has a window menu on its title bar. The <see cref="F:SilDev.WinApi.WindowStyleFlags.Caption"/> style must also be
                specified.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.TabStop">
            <summary>
                The window is a control that can receive the keyboard focus when the user presses the TAB key.
                Pressing the TAB key changes the keyboard focus to the next control with the <see cref="F:SilDev.WinApi.WindowStyleFlags.TabStop"/>
                style. You can turn this style on and off to change dialog box navigation. To change this style after
                a window has been created, use the SetWindowLong function. For user-created windows and modeless
                dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ThickFrame">
            <summary>
                The window has a sizing border. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.SizeBox"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Tiled">
            <summary>
                The window is an overlapped window. An overlapped window has a title bar and a border. Same
                as the <see cref="F:SilDev.WinApi.WindowStyleFlags.Overlapped"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.TiledWindow">
            <summary>
                The window is an overlapped window. Same as the <see cref="F:SilDev.WinApi.WindowStyleFlags.OverlappedWindow"/> style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.Visible">
            <summary>
                The window is initially visible. This style can be turned on and off by using the ShowWindow
                or SetWindowPos function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.VerScroll">
            <summary>
                The window has a vertical scroll bar.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExAcceptFiles">
            <summary>
                The window accepts drag-drop files.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExAppWindow">
            <summary>
                Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExClientEdge">
            <summary>
                The window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExComposited">
            <summary>
                Paints all descendants of a window in bottom-to-top painting order using double-buffering.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExContextHelp">
            <summary>
                The title bar of the window includes a question mark. When the user clicks the question mark,
                the cursor changes to a question mark with a pointer. If the user then clicks a child window,
                the child receives a WM_HELP message. The child window should pass the message to the parent
                window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The
                Help application displays a pop-up window that typically contains help for the child window.
                <see cref="F:SilDev.WinApi.WindowStyleFlags.ExContextHelp"/> cannot be used with the <see cref="F:SilDev.WinApi.WindowStyleFlags.MaximizeBox"/> or
                <see cref="F:SilDev.WinApi.WindowStyleFlags.MinimizeBox"/> styles.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExControlParent">
            <summary>
                The window itself contains child windows that should take part in dialog box navigation. If
                this style is specified, the dialog manager recurses into children of this window when
                performing navigation operations such as handling the TAB key, an arrow key, or a keyboard
                mnemonic.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExDlgModalFrame">
            <summary>
                The window has a double border; the window can, optionally, be created with a title bar by
                specifying the <see cref="F:SilDev.WinApi.WindowStyleFlags.Caption"/> style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExLayered">
            <summary>
                The window is a layered window. This style cannot be used if the window has a class style of
                either CS_OWNDC or CS_CLASSDC.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExLayoutRightToLeft">
            <summary>
                If the shell language is Hebrew, Arabic, or another language that supports reading order
                alignment, the horizontal origin of the window is on the right edge. Increasing horizontal
                values advance to the left.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExLeft">
            <summary>
                The window has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExLeftScrollbar">
            <summary>
                If the shell language is Hebrew, Arabic, or another language that supports reading order
                alignment, the vertical scroll bar (if present) is to the left of the client area. For
                other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExLeftToRightReading">
            <summary>
                The window text is displayed using left-to-right reading-order properties. This is the
                default.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExMdiChild">
            <summary>
                The window is a MDI child window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExNoActivate">
            <summary>
                A top-level window created with this style does not become the foreground window when
                the user clicks it. The system does not bring this window to the foreground when the
                user minimizes or closes the foreground window. To activate the window, use the
                SetActiveWindow or SetForegroundWindow function. The window does not appear on the
                taskbar by default. To force the window to appear on the taskbar, use the
                WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExNoInheritLayout">
            <summary>
                The window does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExNoParentNotify">
            <summary>
                The child window created with this style does not send the WM_PARENTNOTIFY message
                to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExNoRedirectionBitmap">
            <summary>
                The window does not render to a redirection surface. This is for windows that do not
                have visible content or that use mechanisms other than surfaces to provide their visual.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExOverlappedWindow">
            <summary>
                The window is an overlapped window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExPaletteWindow">
            <summary>
                The window is palette window, which is a modeless dialog box that presents an array
                of commands.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExRight">
            <summary>
                The window has generic "right-aligned" properties. This depends on the window class.
                This style has an effect only if the shell language is Hebrew, Arabic, or another
                language that supports reading-order alignment; otherwise, the style is ignored.
                Using the WS_EX_RIGHT style for static or edit controls has the same effect as using
                the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls
                has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExRightScrollbar">
            <summary>
                The vertical scroll bar (if present) is to the right of the client area. This is the
                default.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExRightToLeftReading">
            <summary>
                If the shell language is Hebrew, Arabic, or another language that supports reading-order
                alignment, the window text is displayed using right-to-left reading-order properties.
                For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExStaticEdge">
            <summary>
                The window has a three-dimensional border style intended to be used for items that do
                not accept user input.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExToolWindow">
            <summary>
                The window is intended to be used as a floating toolbar. A tool window has a title bar
                that is shorter than a normal title bar, and the window title is drawn using a smaller
                font. A tool window does not appear in the taskbar or in the dialog that appears when
                the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed
                on the title bar. However, you can display the system menu by right-clicking or by
                typing ALT+SPACE.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExTopMost">
            <summary>
                The window should be placed above all non-topmost windows and should stay above them,
                even when the window is deactivated. To add or remove this style, use the SetWindowPos
                function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExTransparent">
            <summary>
                The window should not be painted until siblings beneath the window (that were created
                by the same thread) have been painted. The window appears transparent because the bits
                of underlying sibling windows have already been painted. To achieve transparency without
                these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowStyleFlags.ExWindowEdge">
            <summary>
                The window has a border with a raised edge.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.FileInfoFlags">
            <summary>
                Provides enumerated values that specify file informations.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.AddOverlays">
            <summary>
                Apply the appropriate overlays to the file's icon. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.AttrSpecified">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Attributes"/> to indicate that the dwAttributes member of the SHFILEINFO structure
                at psfi contains the specific attributes that are desired. These attributes are passed to
                IShellFolder::GetAttributesOf. If this flag is not specified, 0xFFFFFFFF is passed to
                IShellFolder::GetAttributesOf, requesting all attributes. This flag cannot be specified with
                the <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> flag.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.Attributes">
            <summary>
                Retrieve the item attributes. The attributes are copied to the dwAttributes member of the
                structure specified in the psfi parameter. These are the same attributes that are obtained
                from IShellFolder::GetAttributesOf.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.DisplayName">
            <summary>
                Retrieve the display name for the file, which is the name as it appears in Windows Explorer.
                The name is copied to the szDisplayName member of the structure specified in psfi. The
                returned display name uses the long file name, if there is one, rather than the 8.3 form of
                the file name. Note that the display name can be affected by settings such as whether
                extensions are shown.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.ExeType">
            <summary>
                Retrieve the type of the executable file if pszPath identifies an executable file. The
                information is packed into the return value. This flag cannot be specified with any other
                flags.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.Icon">
            <summary>
                Retrieve the handle to the icon that represents the file and the index of the icon within
                the system image list. The handle is copied to the hIcon member of the structure specified
                by psfi, and the index is copied to the iIcon member.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.IconLocation">
            <summary>
                Retrieve the name of the file that contains the icon representing the file specified by
                pszPath, as returned by the IExtractIcon::GetIconLocation method of the file's icon handler.
                Also retrieve the icon index within that file. The name of the file containing the icon is
                copied to the szDisplayName member of the structure specified by psfi. The icon's index is
                copied to that structure's iIcon member.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.LargeIcon">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to retrieve the file's large icon. The
                <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.LinkOverlay">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to add the link overlay to the file's icon. The
                <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.OpenIcon">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to retrieve the file's open icon. Also used to modify
                <see cref="F:SilDev.WinApi.FileInfoFlags.SysIconIndex"/>, causing the function to return the handle to the system image list that
                contains the file's small open icon. A container object displays an open icon to indicate that the
                container is open. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> and/or <see cref="F:SilDev.WinApi.FileInfoFlags.SysIconIndex"/> flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.OverlayIndex">
            <summary>
                Return the index of the overlay icon. The value of the overlay index is returned in the upper
                eight bits of the iIcon member of the structure specified by psfi. This flag requires that the
                <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> be set as well.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.PidL">
            <summary>
                Indicate that pszPath is the address of an ITEMIDLIST structure rather than a path name.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.Selected">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to blend the file's icon with the system highlight
                color. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.ShellIconSize">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to retrieve a Shell-sized icon. If this flag is not
                specified the function sizes the icon according to the system metric values. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>
                flag must also be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.SmallIcon">
            <summary>
                Modify <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/>, causing the function to retrieve the file's small icon. Also used to modify
                <see cref="F:SilDev.WinApi.FileInfoFlags.SysIconIndex"/>, causing the function to return the handle to the system image list that
                contains small icon images. The <see cref="F:SilDev.WinApi.FileInfoFlags.Icon"/> and/or <see cref="F:SilDev.WinApi.FileInfoFlags.SysIconIndex"/> flag must also
                be set.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.SysIconIndex">
            <summary>
                Retrieve the index of a system image list icon. If successful, the index is copied to the iIcon
                member of psfi. The return value is a handle to the system image list. Only those images whose
                indices are successfully copied to iIcon are valid. Attempting to access other images in the
                system image list will result in undefined behavior.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.TypeName">
            <summary>
                Retrieve the string that describes the file's type. The string is copied to the szTypeName
                member of the structure specified in psfi.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.FileInfoFlags.UseFileAttributes">
            <summary>
                Indicates that the function should not attempt to access the file specified by pszPath. Rather,
                it should act as if the file specified by pszPath exists with the file attributes passed in
                dwFileAttributes. This flag cannot be combined with the <see cref="F:SilDev.WinApi.FileInfoFlags.Attributes"/>,
                <see cref="F:SilDev.WinApi.FileInfoFlags.ExeType"/>, or <see cref="F:SilDev.WinApi.FileInfoFlags.PidL"/> flags.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.RmAppTypes">
            <summary>
                Specifies the type of application that is described by the <see cref="T:SilDev.WinApi.RmProcessInfo"/> structure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.UnknownApp">
            <summary>
                The application cannot be classified as any other type. An application of this type can
                only be shut down by a forced shutdown.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.MainWindow">
            <summary>
                A Windows application run as a stand-alone process that displays a top-level window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.OtherWindow">
            <summary>
                A Windows application that does not run as a stand-alone process and does not display a
                top-level window.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.Service">
            <summary>
                The application is a Windows service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.Explorer">
            <summary>
                The application is Windows Explorer.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.Console">
            <summary>
                The application is a stand-alone console application.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmAppTypes.Critical">
            <summary>
                A system restart is required to complete the installation because a process cannot be shut
                down. The process cannot be shut down because of the following reasons. The process may be
                a critical process. The current user may not have permission to shut down the process. The
                process may belong to the primary installer that started the Restart Manager.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceAccessRights">
            <summary>
                Provides enumerated values of service access rights.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.AllAccess">
            <summary>
                Includes <see cref="F:SilDev.WinApi.ServiceAccessRights.StandardRequired"/> in addition to all access rights in this table.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.ChangeConfig">
            <summary>
                Required to call the ChangeServiceConfig or ChangeServiceConfig2 function to
                change the service configuration. Because this grants the caller the right to
                change the executable file that the system runs, it should be granted only to
                administrators.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.EnumerateDependents">
            <summary>
                Required to call the EnumDependentServices function to enumerate all the services
                dependent on the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.Interrogate">
            <summary>
                Required to call the ControlService function to ask the service to report its
                status immediately.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.PauseContinue">
            <summary>
                Required to call the ControlService function to pause or continue the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.QueryConfig">
            <summary>
                Required to call the QueryServiceConfig and QueryServiceConfig2 functions
                to query the service configuration.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.QueryStatus">
            <summary>
                Required to call the QueryServiceStatus or QueryServiceStatusEx function to ask
                the service control manager about the status of the service.
                <para>
                    Required to call the NotifyServiceStatusChange function to receive notification
                    when a service changes status.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.StandardRequired">
            <summary>
                The standard rights.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.Start">
            <summary>
                Required to call the StartService function to start the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.Stop">
            <summary>
                Required to call the ControlService function to stop the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceAccessRights.UserDefinedControl">
            <summary>
                Required to call the ControlService function to specify a user-defined control
                code.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceBootFlags">
            <summary>
                Provides enumerated values of the service start options.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceBootFlags.AutoStart">
            <summary>
                A service started automatically by the service control manager during system startup.
                For more information, see Automatically Starting Services.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceBootFlags.BootStart">
            <summary>
                A device driver started by the system loader. This value is valid only for driver
                services.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceBootFlags.DemandStart">
            <summary>
                A service started by the service control manager when a process calls the
                StartService function. For more information, see Starting Services on Demand.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceBootFlags.Disabled">
            <summary>
                A service that cannot be started. Attempts to start the service result in the error
                code.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceBootFlags.SystemStart">
            <summary>
                A device driver started by the IoInitSystem function. This value is valid only for
                driver services.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceControlOptions">
            <summary>
                Provides enumerated values of the service control options.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.Continue">
            <summary>
                Notifies a paused service that it should resume. The hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.Interrogate">
            <summary>
                Notifies a service that it should report its current status information to the service control
                manager. The hService handle must have the <see cref="F:SilDev.WinApi.ServiceAccessRights.Interrogate"/>
                access right.
                <para>
                    Note that this control is not generally useful as the SCM is aware of the current state of
                    the service.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.NetBindAdd">
            <summary>
                Notifies a network service that there is a new component for binding. The hService handle must
                have the <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right. However, this
                control code has been deprecated; use Plug and Play functionality instead.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.NetBindDisable">
            <summary>
                Notifies a network service that one of its bindings has been disabled. The hService handle must
                have the <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right. However, this
                control code has been deprecated; use Plug and Play functionality instead.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.NetBindEnable">
            <summary>
                Notifies a network service that a disabled binding has been enabled. The hService handle must
                have the <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right. However, this
                control code has been deprecated; use Plug and Play functionality instead.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.NetBindRemove">
            <summary>
                Notifies a network service that a component for binding has been removed. The hService handle
                must have the <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right. However,
                this control code has been deprecated; use Plug and Play functionality instead.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.ParamChange">
            <summary>
                Notifies a service that its startup parameters have changed. The hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.Pause">
            <summary>
                Notifies a service that it should pause. The hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.PauseContinue"/> access right.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlOptions.Stop">
            <summary>
                Notifies a service that it should stop. The hService handle must have the
                <see cref="F:SilDev.WinApi.ServiceAccessRights.Stop"/> access right.
                <para>
                    After sending the stop request to a service, you should not send other controls to the
                    service.
                </para>
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceControlTypes">
            <summary>
                Provides enumerated values of the service control types.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlTypes.AcceptNetBindChange">
            <summary>
                The service is a network component that can accept changes in its binding without being
                stopped and restarted.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlTypes.AcceptParamChange">
            <summary>
                The service can reread its startup parameters without being stopped and restarted.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlTypes.AcceptPauseContinue">
            <summary>
                The service can be paused and continued.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceControlTypes.AcceptStop">
            <summary>
                The service can be stopped.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceManagerAccessRights">
            <summary>
                Provides enumerated values of service control manager access rights.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.AllAccess">
            <summary>
                Includes <see cref="F:SilDev.WinApi.ServiceManagerAccessRights.StandardRequired"/>, in addition to all access rights in this table.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.CreateService">
            <summary>
                Required to call the CreateService function to create a service object and add it
                to the database.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.Connect">
            <summary>
                Required to connect to the service control manager.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.EnumerateService">
            <summary>
                Required to call the EnumServicesStatus or EnumServicesStatusEx function to list
                the services that are in the database.
                <para>
                    Required to call the NotifyServiceStatusChange function to receive notification
                    when any service is created or deleted.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.Lock">
            <summary>
                Required to call the LockServiceDatabase function to acquire a lock on the database.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.ModifyBootConfig">
            <summary>
                Required to call the NotifyBootConfigStatus function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.QueryLockStatus">
            <summary>
                Required to call the QueryServiceLockStatus function to retrieve the lock status
                information for the database.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceManagerAccessRights.StandardRequired">
            <summary>
                The standard rights.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceStateTypes">
            <summary>
                Provides enumerated values of the current state of the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.ContinuePending">
            <summary>
                The service continue is pending.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.PausePending">
            <summary>
                The service pause is pending.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.Paused">
            <summary>
                The service is paused.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.Running">
            <summary>
                The service is running.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.StartPending">
            <summary>
                The service is starting.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.StopPending">
            <summary>
                The service is stopping.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStateTypes.Stopped">
            <summary>
                The service is not running.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ServiceTypes">
            <summary>
                Provides enumerated values of service types.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.Adapter">
            <summary>
                Reserved.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.FileSystemDriver">
            <summary>
                File system driver service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.InteractiveProcess">
            <summary>
                The service can interact with the desktop.
                <para>
                    If you specify either <see cref="F:SilDev.WinApi.ServiceTypes.Win32OwnProcess"/> or
                    <see cref="F:SilDev.WinApi.ServiceTypes.Win32ShareProcess"/>, and the service is running in the
                    context of the LocalSystem account, you can also specify this value.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.KernelDriver">
            <summary>
                Driver service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.RecognizerDriver">
            <summary>
                Reserved.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.Win32OwnProcess">
            <summary>
                Service that runs in its own process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceTypes.Win32ShareProcess">
            <summary>
                Service that shares a process with one or more other services.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.NativeHelper">
            <summary>
                Provides native based functions.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.AnimateWindow(System.IntPtr,System.Int32,SilDev.WinApi.AnimateWindowFlags)">
            <summary>
                Enables you to produce special effects when showing or hiding windows. There are four types of
                animation: roll, slide, collapse or expand, and alpha-blended fade.
            </summary>
            <param name="hWnd">
                A handle to the window to animate. The calling thread must own this window.
            </param>
            <param name="time">
                The time it takes to play the animation, in milliseconds. Typically, an animation takes 200
                milliseconds to play.
            </param>
            <param name="flags">
                The type of animation.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.AnimateWindow(System.IntPtr,SilDev.WinApi.AnimateWindowFlags)">
            <summary>
                Enables you to produce special effects when showing or hiding windows. There are four types of
                animation: roll, slide, collapse or expand, and alpha-blended fade.
            </summary>
            <param name="hWnd">
                A handle to the window to animate. The calling thread must own this window.
            </param>
            <param name="flags">
                The type of animation.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.CallNextHookEx(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
                Passes the hook information to the next hook procedure in the current hook chain. A hook
                procedure can call this function either before or after processing the hook information.
            </summary>
            <param name="nCode">
                The hook code passed to the current hook procedure. The next hook procedure uses this code
                to determine how to process the hook information.
            </param>
            <param name="wParam">
                The wParam value passed to the current hook procedure. The meaning of this parameter
                depends on the type of hook associated with the current hook chain.
            </param>
            <param name="lParam">
                The lParam value passed to the current hook procedure. The meaning of this parameter
                depends on the type of hook associated with the current hook chain.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.CenterWindow(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
                Centers the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window to change.
            </param>
            <param name="hPar">
                A handle to the parent window.
            </param>
            <param name="alwaysVisible">
                true to force the window to remain in screen area; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.CenterWindow(System.IntPtr,System.Boolean)">
            <summary>
                Centers the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window to change.
            </param>
            <param name="alwaysVisible">
                true to force the window to remain in screen area; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
                The ClientToScreen function converts the client-area coordinates of a specified point to screen
                coordinates.
            </summary>
            <param name="hWnd">
                A handle to the window whose client area is used for the conversion.
            </param>
            <param name="lpPoint">
                A pointer to a <see cref="T:System.Drawing.Point"/> structure that contains the client coordinates to be converted.
                The new screen coordinates are copied into this structure if the function succeeds.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.CloseHandle(System.IntPtr)">
            <summary>
                Closes an open object handle.
            </summary>
            <param name="handle">
                A valid handle to an open object.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DeleteMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags)">
            <summary>
                Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function
                destroys the handle to the menu or submenu and frees the memory used by the menu or submenu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="nPosition">
                The menu item to be deleted, as determined by the uFlags parameter.
            </param>
            <param name="wFlags">
                Indicates how the uPosition parameter is interpreted. This parameter must be
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> or <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByPosition"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DestroyIcon(System.IntPtr)">
            <summary>
                Destroys an icon and frees any memory the icon occupied.
            </summary>
            <param name="hIcon">
                A handle to the icon to be destroyed. The icon must not be in use.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DisableWindowMaximizeButton(System.IntPtr)">
            <summary>
                Disables the maximize button of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DisableWindowMinimizeButton(System.IntPtr)">
            <summary>
                Disables the minimize button of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DrawMenuBar(System.IntPtr)">
            <summary>
                Redraws the menu bar of the specified window. If the menu bar changes after the system has
                created the window, this function must be called to draw the changed menu bar.
            </summary>
            <param name="hWnd">
                A handle to the window whose menu bar is to be redrawn.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DuplicateHandle(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
                Duplicates an object handle.
            </summary>
            <param name="hSourceProcessHandle">
                A handle to the process with the handle to be duplicated.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessDupHandle"/> access right.
                </para>
            </param>
            <param name="hSourceHandle">
                The handle to be duplicated. This is an open object handle that is valid in the context
                of the source process. For a list of objects whose handles can be duplicated, see the
                following Remarks section.
            </param>
            <param name="hTargetProcessHandle">
                A handle to the process that is to receive the duplicated handle.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessDupHandle"/> access right.
                </para>
            </param>
            <param name="lpTargetHandle">
                A pointer to a variable that receives the duplicate handle. This handle value is valid
                in the context of the target process.
                <para>
                    If hSourceHandle is a pseudo handle returned by GetCurrentProcess or GetCurrentThread,
                    DuplicateHandle converts it to a real handle to a process or thread, respectively.
                </para>
                <para>
                    If lpTargetHandle is NULL, the function duplicates the handle, but does not return the
                    duplicate handle value to the caller. This behavior exists only for backward
                    compatibility with previous versions of this function. You should not use this feature,
                    as you will lose system resources until the target process terminates.
                </para>
            </param>
            <param name="dwDesiredAccess">
                The access requested for the new handle. For the flags that can be specified for each
                object type, see the following Remarks section.
                <para>
                    This parameter is ignored if the dwOptions parameter specifies the
                    <see cref="F:SilDev.WinApi.DuplicateOptions.SameAccess"/> flag. Otherwise, the flags that
                    can be specified depend on the type of object whose handle is to be duplicated.
                </para>
            </param>
            <param name="bInheritHandle">
                A variable that indicates whether the handle is inheritable. If TRUE, the duplicate handle
                can be inherited by new processes created by the target process. If FALSE, the new handle
                cannot be inherited.
            </param>
            <param name="dwOptions">
                Optional actions. This parameter can be zero, or any combination of
                <see cref="T:SilDev.WinApi.DuplicateOptions"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DwmExtendFrameIntoClientArea(System.IntPtr,SilDev.WinApi.ThemeMargins@)">
            <summary>
                Extends the window frame into the client area.
            </summary>
            <param name="hWnd">
                The handle to the window in which the frame will be extended into the client area.
            </param>
            <param name="pMarInset">
                A pointer to a MARGINS structure that describes the margins to use when extending the frame
                into the client area.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.DwmIsCompositionEnabled(System.Int32@)">
            <summary>
                Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled.
            </summary>
            <param name="pfEnabled">
                A pointer to a value that, when this function returns successfully, receives TRUE if DWM
                composition is enabled; otherwise, FALSE.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.EndDialog(System.IntPtr,System.IntPtr)">
            <summary>
                Destroys a modal dialog box, causing the system to end any processing for the dialog box.
            </summary>
            <param name="hDlg">
                A handle to the dialog box to be destroyed.
            </param>
            <param name="nResult">
                The value to be returned to the application from the function that created the dialog box.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.EnumChildWindows(System.IntPtr,SilDev.WinApi.EnumChildProc,System.IntPtr)">
            <summary>
                Enumerates the child windows that belong to the specified parent window by passing the handle
                to each child window, in turn, to an application-defined callback function. EnumChildWindows
                continues until the last child window is enumerated or the callback function returns FALSE.
            </summary>
            <param name="hWndParent">
                A handle to the parent window whose child windows are to be enumerated. If this parameter is
                NULL, this function is equivalent to EnumWindows.
            </param>
            <param name="lpEnumFunc">
                A pointer to an application-defined callback function.
            </param>
            <param name="lParam">
                An application-defined value to be passed to the callback function.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ExtractIconEx(System.String,System.Int32,System.IntPtr[],System.IntPtr[],System.Int32)">
            <summary>
                Creates an array of handles to large or small icons extracted from the specified executable
                file, DLL, or icon file.
            </summary>
            <param name="lpszFile">
                The name of an executable file, DLL, or icon file from which icons will be extracted.
            </param>
            <param name="nIconIndex">
                The zero-based index of the first icon to extract. For example, if this value is zero, the
                function extracts the first icon in the specified file.
                <para>
                    If this value is –1 and phiconLarge and phiconSmall are both NULL, the function returns the
                    total number of icons in the specified file. If the file is an executable file or DLL, the
                    return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the
                    return value is 1.
                </para>
                <para>
                    If this value is a negative number and either phiconLarge or phiconSmall is not NULL, the
                    function begins by extracting the icon whose resource identifier is equal to the absolute
                    value of nIconIndex. For example, use -3 to extract the icon whose resource identifier is 3.
                </para>
            </param>
            <param name="phiconLarge">
                An array of icon handles that receives handles to the large icons extracted from the file. If
                this parameter is NULL, no large icons are extracted from the file.
            </param>
            <param name="phiconSmall">
                An array of icon handles that receives handles to the small icons extracted from the file. If
                this parameter is NULL, no small icons are extracted from the file.
            </param>
            <param name="nIcons">
                The number of icons to be extracted from the file.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.FindNestedWindow(System.IntPtr@,System.String)">
            <summary>
                Retrieves a handle to a window whose class name is matched.
            </summary>
            <param name="hWndParent">
                A handle to the parent window whose child windows are to be searched.
            </param>
            <param name="className">
                The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx
                function.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.FindWindow(System.String,System.String)">
            <summary>
                Retrieves a handle to the top-level window whose class name and window name match the specified
                strings. This function does not search child windows. This function does not perform a
                case-sensitive search.
            </summary>
            <param name="lpClassName">
                The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx
                function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.
                <para>
                    If lpClassName points to a string, it specifies the window class name. The class name can be
                    any name registered with RegisterClass or RegisterClassEx, or any of the predefined
                    control-class names.
                </para>
                <para>
                    If lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter.
                </para>
            </param>
            <param name="lpWindowName">
                The window name (the window's title). If this parameter is NULL, all window names match.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.FindWindowByCaption(System.String)">
            <summary>
                Retrieves a handle to the top-level window whose window name match the specified strings. This
                function does not search child windows. This function does not perform a case-sensitive search.
            </summary>
            <param name="lpWindowName">
                The window name (the window's title). If this parameter is NULL, all window names match.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
                Retrieves a handle to a window whose class name and window name match the specified strings. The
                function searches child windows, beginning with the one following the specified child window. This
                function does not perform a case-sensitive search.
            </summary>
            <param name="hWndParent">
                A handle to the parent window whose child windows are to be searched.
                <para>
                    If hwndParent is NULL, the function uses the desktop window as the parent window. The function
                    searches among windows that are child windows of the desktop.
                </para>
                <para>
                    If hwndParent is HWND_MESSAGE, the function searches all message-only windows.
                </para>
            </param>
            <param name="hWndChildAfter">
                A handle to a child window. The search begins with the next child window in the Z order. The child
                window must be a direct child window of hwndParent, not just a descendant window.
                <para>
                    If hwndChildAfter is NULL, the search begins with the first child window of hwndParent.
                </para>
                <para>
                    Note that if both hwndParent and hwndChildAfter are NULL, the function searches all top-level
                    and message-only windows.
                </para>
            </param>
            <param name="lpszClass">
                The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx
                function. The atom must be placed in the low-order word of lpszClass; the high-order word must be
                zero.
                <para>
                    If lpszClass is a string, it specifies the window class name. The class name can be any name
                    registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names,
                    or it can be MAKEINTATOM (0x8000). In this latter case, 0x8000 is the atom for a menu class. For
                    more information, see the Remarks section of this topic.
                </para>
            </param>
            <param name="lpszWindow">
                The window name (the window's title). If this parameter is NULL, all window names match.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetActiveWindowTitle">
            <summary>
                Gets the window title from the foreground window (the window with which the user is currently working).
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window belongs.
            </param>
            <param name="lpClassName">
                The class name string.
            </param>
            <param name="nMaxCount">
                The length of the lpClassName buffer, in characters. The buffer must be large enough to include the
                terminating null character; otherwise, the class name string is truncated to nMaxCount-1 characters.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetClientRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left
                and lower-right corners of the client area. Because client coordinates are relative to the upper-left
                corner of a window's client area, the coordinates of the upper-left corner are (0,0).
            </summary>
            <param name="hWnd">
                A handle to the window whose client coordinates are to be retrieved.
            </param>
            <param name="lpRect">
                A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the client coordinates. The left and
                top members are zero. The right and bottom members contain the width and height of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetCurrentThreadId">
            <summary>
                Retrieves the thread identifier of the calling thread.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetDlgCtrlId(System.IntPtr)">
            <summary>
                Retrieves the identifier of the specified control.
            </summary>
            <param name="hWndCtl">
                A handle to the control.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetDlgItem(System.IntPtr,System.Int32)">
            <summary>
                Retrieves a handle to a control in the specified dialog box.
            </summary>
            <param name="hDlg">
                A handle to the dialog box that contains the control.
            </param>
            <param name="nIddlgItem">
                The identifier of the control to be retrieved.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetForegroundWindow">
            <summary>
                Retrieves a handle to the foreground window (the window with which the user is currently working).
                The system assigns a slightly higher priority to the thread that creates the foreground window
                than it does to other threads.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetLastError">
            <summary>
                Retrieves the calling thread's last-error code value. The last-error code is
                maintained on a per-thread basis. Multiple threads do not overwrite each
                other's last-error code.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetMenu(System.IntPtr)">
            <summary>
                Retrieves a handle to the menu assigned to the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window whose menu handle is to be retrieved.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetMenuItemCount(System.IntPtr)">
            <summary>
                Determines the number of items in the specified menu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be examined.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetParent(System.IntPtr)">
            <summary>
                Retrieves a handle to the specified window's parent or owner.
            </summary>
            <param name="hWnd">
                A handle to the window whose parent window handle is to be retrieved.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetProcessBasicInformation(System.IntPtr)">
            <summary>
                Gets basic process information about the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetProcessId(System.IntPtr)">
            <summary>
                Retrieves the process identifier of the specified process.
            </summary>
            <param name="handle">
                A handle to the process.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetProcessImageFileName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Retrieves the name of the executable file for the specified process.
            </summary>
            <param name="hProcess">
                A handle to the process. The handle must have the
                <see cref="F:SilDev.WinApi.AccessRights.ProcessQueryInformation"/> or
                <see cref="F:SilDev.WinApi.AccessRights.ProcessQueryLimitedInformation"/> access right.
            </param>
            <param name="lpImageFileName">
                A pointer to a buffer that receives the full path to the executable file.
            </param>
            <param name="nSize">
                The size of the lpImageFileName buffer, in characters.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetStdHandle(System.Int32)">
            <summary>
                Retrieves a handle to the specified standard device (standard input, standard
                output, or standard error).
            </summary>
            <param name="nStdHandle">
                The standard device. This parameter can be one of the following values.
                <para>
                    STD_INPUT_HANDLE (DWORD)-10: The standard input device. Initially, this is
                    the console input buffer, CONIN$.
                </para>
                <para>
                    STD_OUTPUT_HANDLE (DWORD)-11: The standard output device. Initially, this
                    is the active console screen buffer, CONOUT$.
                </para>
                <para>
                    STD_ERROR_HANDLE (DWORD)-12: The standard error device. Initially, this is
                    the active console screen buffer, CONOUT$.
                </para>
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
                Enables the application to access the window menu (also known as the system menu or the control
                menu) for copying and modifying.
            </summary>
            <param name="hWnd">
                A handle to the window that will own a copy of the window menu.
            </param>
            <param name="bRevert">
                The action to be taken. If this parameter is FALSE, GetSystemMenu returns a handle to the copy of
                the window menu currently in use. The copy is initially identical to the window menu, but it can
                be modified. If this parameter is TRUE, GetSystemMenu resets the window menu back to the default
                state. The previous window menu, if any, is destroyed.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetSystemThemeColor(System.Boolean)">
            <summary>
                Gets the current theme color of the operating system.
            </summary>
            <param name="alpha">
                true to get also the alpha channel; otherwise, false.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowLong(System.IntPtr,SilDev.WinApi.WindowLongFlags)">
            <summary>
                Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD)
                value at the specified offset into the extra window memory.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window belongs.
            </param>
            <param name="nIndex">
                The zero-based offset to the value to be retrieved. Valid values are in the range zero through the
                number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes
                of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other
                value, specify one of the <see cref="T:SilDev.WinApi.WindowLongFlags"/>.GWL_??? values.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowPlacement(System.IntPtr,SilDev.WinApi.WindowPlacement@)">
            <summary>
                Gets the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpwndpl">
                A pointer to a <see cref="T:SilDev.WinApi.WindowPlacement"/> structure that specifies the new show state and window
                positions.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowPlacement(System.IntPtr)">
            <summary>
                Gets information about the placement of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given
                in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpRect">
                A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the screen coordinates of the
                upper-left and lower-right corners of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified
                window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the
                text of a control in another application.
            </summary>
            <param name="hWnd">
                A handle to the window or control containing the text.
            </param>
            <param name="text">
                The buffer that will receive the text. If the string is as long or longer than the buffer, the string
                is truncated and terminated with a null character.
            </param>
            <param name="maxLength">
                The maximum number of characters to copy to the buffer, including the null character. If the text
                exceeds this limit, it is truncated.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowTextLength(System.IntPtr)">
            <summary>
                Retrieves the length, in characters, of the specified window's title bar text (if the window has a
                title bar). If the specified window is a control, the function retrieves the length of the text within
                the control. However, GetWindowTextLength cannot retrieve the length of the text of an edit control in
                another application.
            </summary>
            <param name="hWnd">
                A handle to the window or control.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.GetWindowThreadProcessId(System.IntPtr,System.UInt32@)">
            <summary>
                Retrieves the identifier of the thread that created the specified window and, optionally, the identifier
                of the process that created the window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpdwProcessId">
                A pointer to a variable that receives the process identifier. If this parameter is not NULL,
                GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.HideWindow(System.IntPtr)">
            <summary>
                Minimizes and hides the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.InsertMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags,System.UIntPtr,System.String)">
            <summary>
                Note  The InsertMenu function has been superseded by the InsertMenuItem function. You can still use
                InsertMenu, however, if you do not need any of the extended features of InsertMenuItem.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="wPosition">
                The menu item before which the new menu item is to be inserted, as determined by the uFlags parameter.
            </param>
            <param name="wFlags">
                Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the
                new menu item.
            </param>
            <param name="wIdNewItem">
                The identifier of the new menu item or, if the uFlags parameter has the <see cref="F:SilDev.WinApi.ModifyMenuFlags.Popup"/>
                flag set, a handle to the drop-down menu or submenu.
            </param>
            <param name="lpNewItem">
                The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter
                includes the <see cref="F:SilDev.WinApi.ModifyMenuFlags.Bitmap"/>, <see cref="F:SilDev.WinApi.ModifyMenuFlags.OwnerDraw"/>, or
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.String"/> flag, as follows.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LoadLibrary(System.String)">
            <summary>
                Loads the specified module into the address space of the calling process. The
                specified module may cause other modules to be loaded.
            </summary>
            <param name="lpFileName">
                The name of the module. This can be either a library module (a .dll file) or an
                executable module (an .exe file). The name specified is the file name of the
                module and is not related to the name stored in the library module itself, as
                specified by the LIBRARY keyword in the module-definition (.def) file.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LoadString(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.Int32)">
            <summary>
                Loads a string resource from the executable file associated with a specified module, copies the string into
                a buffer, and appends a terminating null character.
            </summary>
            <param name="hInstance">
                A handle to an instance of the module whose executable file contains the string resource. To get the handle
                to the application itself, call the GetModuleHandle function with NULL.
            </param>
            <param name="uId">
                The identifier of the string to be loaded.
            </param>
            <param name="lpBuffer">
                The buffer is to receive the string. Must be of sufficient length to hold a pointer (8 bytes).
            </param>
            <param name="nBufferMax">
                The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the
                number of characters specified. If this parameter is 0, then lpBuffer receives a read-only pointer to the
                resource itself.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LocalAlloc(SilDev.WinApi.LocalAllocFlags,System.UIntPtr)">
            <summary>
                Allocates the specified number of bytes from the heap.
            </summary>
            <param name="flag">
                The memory allocation attributes. The default is the LMEM_FIXED value. This
                parameter can be one or more of the <see cref="T:SilDev.WinApi.LocalAllocFlags"/>.
            </param>
            <param name="size">
                The number of bytes to allocate. If this parameter is zero and the uFlags
                parameter specifies <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemMoveable"/>, the function
                returns a handle to a memory object that is marked as discarded.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.LocalFree(System.IntPtr)">
            <summary>
                Frees the specified local memory object and invalidates its handle.
            </summary>
            <param name="hMem">
                A handle to the local memory object. This handle is returned by either the
                <see cref="M:SilDev.WinApi.NativeHelper.LocalAlloc(SilDev.WinApi.LocalAllocFlags,System.UIntPtr)"/> function.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindow(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
                Changes the position and dimensions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="nRect">
                The new position and size of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindow(System.IntPtr,System.Drawing.Point,System.Drawing.Size)">
            <summary>
                Changes the position and dimensions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="point">
                The new position of the window.
            </param>
            <param name="size">
                The new size of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindow(System.IntPtr,System.Drawing.Point)">
            <summary>
                Changes the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="point">
                The new position of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindow(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Changes the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="x">
                The new position of the left side of the window.
            </param>
            <param name="y">
                The new position of the top of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Changes the position and dimensions of the specified window. For a top-level window, the position and
                dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to
                the upper-left corner of the parent window's client area.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="x">
                The new position of the left side of the window.
            </param>
            <param name="y">
                The new position of the top of the window.
            </param>
            <param name="nWidth">
                The new width of the window.
            </param>
            <param name="nHeight">
                The new height of the window.
            </param>
            <param name="bRepaint">
                Indicates whether the window is to be repainted. If this parameter is TRUE, the window receives a message.
                If the parameter is FALSE, no repainting of any kind occurs. This applies to the client area, the nonclient
                area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of
                moving a child window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.NtQueryInformationProcess(System.IntPtr,SilDev.WinApi.ProcessInfoFlags,SilDev.WinApi.ProcessBasicInformation@,System.UInt32,System.IntPtr@)">
            <summary>
                Retrieves information about the specified process.
            </summary>
            <param name="hndl">
                A handle to the process for which information is to be retrieved.
            </param>
            <param name="piCl">
                The type of process information to be retrieved.
            </param>
            <param name="processInformation">
                A pointer to a buffer supplied by the calling application into which the function writes the requested
                information. The size of the information written varies depending on the data type of the
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter.
            </param>
            <param name="piLen">
                The size of the buffer pointed to by the <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter, in bytes.
            </param>
            <param name="rLen">
                A pointer to a variable in which the function returns the size of the requested information. If the function
                was successful, this is the size of the information written to the buffer pointed to by the
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter, but if the buffer was too small, this is the minimum size
                of buffer needed to receive the information successfully.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.OpenProcess(SilDev.WinApi.AccessRights,System.Boolean,System.UInt32)">
            <summary>
                Opens an existing local process object.
            </summary>
            <param name="dwDesiredAccess">
                The access to the process object. This access right is checked against the
                security descriptor for the process. This parameter can be one or more of the
                process access rights.
            </param>
            <param name="bInheritHandle">
                If this value is TRUE, processes created by this process will inherit the handle.
                Otherwise, the processes do not inherit this handle.
            </param>
            <param name="dwProcessId">
                The identifier of the local process to be opened.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.PostMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Places (posts) a message in the message queue associated with the thread that created the
                specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure is to receive the message. The following values
                have special meanings.
                <para>
                    <c>
                        HWND_BROADCAST ((HWND)0xffff):
                    </c>
                    The message is posted to all top-level windows in the system, including disabled or invisible
                    unowned windows, overlapped windows, and pop-up windows. The message is not posted to child
                    windows.
                </para>
                <para>
                    <c>
                        NULL:
                    </c>
                    The function behaves like a call to PostThreadMessage with the dwThreadId parameter set to
                    the identifier of the current thread.
                </para>
            </param>
            <param name="msg">
                The message to be posted.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Places (posts) a message in the message queue associated with the thread that created the
                specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure is to receive the message. The following values
                have special meanings.
                <para>
                    <c>
                        HWND_BROADCAST ((HWND)0xffff):
                    </c>
                    The message is posted to all top-level windows in the system, including disabled or invisible
                    unowned windows, overlapped windows, and pop-up windows. The message is not posted to child
                    windows.
                </para>
                <para>
                    <c>
                        NULL:
                    </c>
                    The function behaves like a call to PostThreadMessage with the dwThreadId parameter set to
                    the identifier of the current thread.
                </para>
            </param>
            <param name="msg">
                The message to be posted.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ReadProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
                Reads data from an area of memory in a specified process. The entire area to be
                read must be accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process with memory that is being read. The handle must have
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmRead"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process from which to read. Before
                any data transfer occurs, the system verifies that all data in the base address
                and memory of the specified size is accessible for read access, and if it is not
                accessible the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to a buffer that receives the contents from the address space of the
                specified process.
            </param>
            <param name="nSize">
                The number of bytes to be read from the specified process.
            </param>
            <param name="lpNumberOfBytesRead">
                A pointer to a variable that receives the number of bytes transferred into the
                specified buffer. If lpNumberOfBytesRead is NULL, the parameter is ignored.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ReadProcessMemory(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.IntPtr,System.IntPtr@)">
            <summary>
                Reads data from an area of memory in a specified process. The entire area to be
                read must be accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process with memory that is being read. The handle must have
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmRead"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process from which to read. Before
                any data transfer occurs, the system verifies that all data in the base address
                and memory of the specified size is accessible for read access, and if it is not
                accessible the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to a buffer that receives the contents from the address space of the
                specified process.
            </param>
            <param name="nSize">
                The number of bytes to be read from the specified process.
            </param>
            <param name="lpNumberOfBytesRead">
                A pointer to a variable that receives the number of bytes transferred into the
                specified buffer. If lpNumberOfBytesRead is NULL, the parameter is ignored.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ReleaseCapture">
            <summary>
                Releases the mouse capture from a window in the current thread and restores normal mouse
                input processing. A window that has captured the mouse receives all mouse input, regardless
                of the position of the cursor, except when a mouse button is clicked while the cursor hot
                spot is in the window of another thread.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.RemoveMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags)">
            <summary>
                Deletes a menu item or detaches a submenu from the specified menu. If the menu item
                opens a drop-down menu or submenu, RemoveMenu does not destroy the menu or its handle,
                allowing the menu to be reused. Before this function is called, the GetSubMenu function
                should retrieve a handle to the drop-down menu or submenu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="uPosition">
                The menu item to be deleted, as determined by the uFlags parameter.
            </param>
            <param name="uFlags">
                Indicates how the uPosition parameter is interpreted. This parameter must be
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> or <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByPosition"/>.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.RemoveWindowBorders(System.IntPtr)">
            <summary>
                Removes the borders and title bar of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.RemoveWindowFromTaskbar(System.IntPtr)">
            <summary>
                Removes specified window from taskbar.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.RemoveWindowMinMaxButtons(System.IntPtr)">
            <summary>
                Removes the maximize and minimize button of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendArgs(System.IntPtr,System.String)">
            <summary>
                Sends the specified arguments to the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="args">
                The arguments to send.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendInput(System.UInt32,SilDev.WinApi.DeviceInput[],System.Int32)">
            <summary>
                Synthesizes keystrokes, mouse motions, and button clicks.
            </summary>
            <param name="nInputs">
                The number of structures in the pInputs array.
            </param>
            <param name="pInputs">
                An array of <see cref="T:SilDev.WinApi.DeviceInput"/> structures. Each structure represents an event
                to be inserted into the keyboard or mouse input stream.
            </param>
            <param name="cbSize">
                The size, in bytes, of an <see cref="T:SilDev.WinApi.DeviceInput"/> structure. If cbSize is not the
                size of an <see cref="T:SilDev.WinApi.DeviceInput"/> structure, the function fails.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage function
                calls the window procedure for the specified window and does not return until
                the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If this
                parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level
                windows in the system, including disabled or invisible unowned windows, overlapped
                windows, and pop-up windows; but the message is not sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,SilDev.WinApi.CopyData@)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage function
                calls the window procedure for the specified window and does not return until
                the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If this
                parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level
                windows in the system, including disabled or invisible unowned windows, overlapped
                windows, and pop-up windows; but the message is not sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessage(System.IntPtr,SilDev.WinApi.WindowMenuFlags,System.IntPtr,SilDev.WinApi.CopyData@)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage function
                calls the window procedure for the specified window and does not return until
                the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If this
                parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level
                windows in the system, including disabled or invisible unowned windows, overlapped
                windows, and pop-up windows; but the message is not sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessage(System.IntPtr,SilDev.WinApi.WindowMenuFlags,System.IntPtr,System.IntPtr)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage function
                calls the window procedure for the specified window and does not return until
                the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If this
                parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level
                windows in the system, including disabled or invisible unowned windows, overlapped
                windows, and pop-up windows; but the message is not sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessageTimeout(System.IntPtr,System.UInt32,System.UIntPtr,System.IntPtr,System.UInt32,System.UInt32,System.UIntPtr@)">
            <summary>
                Sends the specified message to one or more windows.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message.
                <para>
                    If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all
                    top-level windows in the system, including disabled or invisible unowned windows.
                    The function does not return until each window has timed out. Therefore, the total
                    wait time can be up to the value of uTimeout multiplied by the number of top-level
                    windows.
                </para>
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Any additional message-specific information.
            </param>
            <param name="lParam">
                Any additional message-specific information.
            </param>
            <param name="fuFlags">
                The behavior of this function. This parameter can be one or more of the following values.
                <para>
                    <c>
                        SMTO_ABORTIFHUNG (0x2):
                    </c>
                    The function returns without waiting for the time-out period to elapse if the receiving
                    thread appears to not respond or hangs.
                </para>
                <para>
                    <c>
                        SMTO_BLOCK (0x1):
                    </c>
                    Prevents the calling thread from processing any other requests until the function returns.
                </para>
                <para>
                    <c>
                        SMTO_NORMAL (0x0):
                    </c>
                    The calling thread is not prevented from processing other requests while waiting for the
                    function to return.
                </para>
                <para>
                    <c>
                        SMTO_NOTIMEOUTIFNOTHUNG (0x8):
                    </c>
                    The function does not enforce the time-out period as long as the receiving thread is
                    processing messages.
                </para>
                <para>
                    <c>
                        SMTO_ERRORONEXIT (0x20):
                    </c>
                    The function should return 0 if the receiving window is destroyed or its owning thread dies
                    while the message is being processed.
                </para>
            </param>
            <param name="uTimeout">
                The duration of the time-out period, in milliseconds. If the message is a broadcast message,
                each window can use the full time-out period. For example, if you specify a five second time-out
                period and there are three top-level windows that fail to process the message, you could have up
                to a 15 second delay.
            </param>
            <param name="lpdwResult">
                The result of the message processing. The value of this parameter depends on the message that is
                specified.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendMessageTimeoutText(System.IntPtr,System.UInt32,System.UIntPtr,System.Text.StringBuilder,System.UInt32,System.UInt32,System.IntPtr@)">
            <summary>
                Sends the specified message to one or more windows.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message.
                <para>
                    If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level
                    windows in the system, including disabled or invisible unowned windows. The function does
                    not return until each window has timed out. Therefore, the total wait time can be up to the
                    value of uTimeout multiplied by the number of top-level windows.
                </para>
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Any additional message-specific information.
            </param>
            <param name="lParam">
                Any additional message-specific information.
            </param>
            <param name="fuFlags">
                The behavior of this function. This parameter can be one or more of the following values.
                <para>
                    <c>
                        SMTO_ABORTIFHUNG (0x2):
                    </c>
                    The function returns without waiting for the time-out period to elapse if the receiving
                    thread appears to not respond or hangs.
                </para>
                <para>
                    <c>
                        SMTO_BLOCK (0x1):
                    </c>
                    Prevents the calling thread from processing any other requests until the function returns.
                </para>
                <para>
                    <c>
                        SMTO_NORMAL (0x0):
                    </c>
                    The calling thread is not prevented from processing other requests while waiting for the
                    function to return.
                </para>
                <para>
                    <c>
                        SMTO_NOTIMEOUTIFNOTHUNG (0x8):
                    </c>
                    The function does not enforce the time-out period as long as the receiving thread is
                    processing messages.
                </para>
                <para>
                    <c>
                        SMTO_ERRORONEXIT (0x20):
                    </c>
                    The function should return 0 if the receiving window is destroyed or its owning thread dies
                    while the message is being processed.
                </para>
            </param>
            <param name="uTimeout">
                The duration of the time-out period, in milliseconds. If the message is a broadcast message,
                each window can use the full time-out period. For example, if you specify a five second time-out
                period and there are three top-level windows that fail to process the message, you could have up
                to a 15 second delay.
            </param>
            <param name="lpdwResult">
                The result of the message processing. The value of this parameter depends on the message that is
                specified.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SendNotifyMessage(System.IntPtr,System.UInt32,System.UIntPtr,System.String)">
            <summary>
                Sends the specified message to a window or windows. If the window was created by the calling
                thread, SendNotifyMessage calls the window procedure for the window and does not return until
                the window procedure has processed the message. If the window was created by a different thread,
                SendNotifyMessage passes the message to the window procedure and returns immediately; it does
                not wait for the window procedure to finish processing the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If this parameter is
                HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system,
                including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but
                the message is not sent to child windows.
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetCurrentDirectory(System.String)">
            <summary>
                Changes the current directory for the current process.
            </summary>
            <param name="lpPathName">
                The path to the new current directory.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetCursorPos(System.IntPtr,System.Drawing.Point)">
            <summary>
                Moves the cursor to the specified coordinates.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="point">
                The new coordinates of the cursor.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetCursorPos(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Moves the cursor to the specified coordinates.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="x">
                The new x-coordinate of the cursor.
            </param>
            <param name="y">
                The new y-coordinate of the cursor.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetCursorPos(System.UInt32,System.UInt32)">
            <summary>
                Moves the cursor to the specified screen coordinates. If the new coordinates are not within
                the screen rectangle set by the most recent ClipCursor function call, the system automatically
                adjusts the coordinates so that the cursor stays within the rectangle.
            </summary>
            <param name="x">
                The new x-coordinate of the cursor, in screen coordinates.
            </param>
            <param name="y">
                The new y-coordinate of the cursor, in screen coordinates.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetForegroundWindow(System.IntPtr)">
            <summary>
                Brings the thread that created the specified window into the foreground and activates the window.
                Keyboard input is directed to the window, and various visual cues are changed for the user. The
                system assigns a slightly higher priority to the thread that created the foreground window than
                it does to other threads.
            </summary>
            <param name="hWnd">
                A handle to the window that should be activated and brought to the foreground.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
                Changes the parent window of the specified child window.
            </summary>
            <param name="hWndChild">
                A handle to the child window.
            </param>
            <param name="hWndNewParent">
                A handle to the new parent window. If this parameter is NULL, the desktop window becomes the new
                parent window. If this parameter is HWND_MESSAGE, the child window becomes a message-only window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetProcessWorkingSetSize(System.IntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
                Sets the minimum and maximum working set sizes for the specified process.
            </summary>
            <param name="hProcess">
                A handle to the process whose working set sizes is to be set.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessSetQuota"/> access right.
                </para>
            </param>
            <param name="dwMinimumWorkingSetSize">
                The minimum working set size for the process, in bytes. The virtual memory manager attempts
                to keep at least this much memory resident in the process whenever the process is active.
                <para>
                    This parameter must be greater than zero but less than or equal to the maximum working
                    set size. The default size is 50 pages (for example, this is 204,800 bytes on systems
                    with a 4K page size). If the value is greater than zero but less than 20 pages, the
                    minimum value is set to 20 pages.
                </para>
                <para>
                    If both dwMinimumWorkingSetSize and dwMaximumWorkingSetSize have the value (SIZE_T)–1,
                    the function removes as many pages as possible from the working set of the specified
                    process.
                </para>
            </param>
            <param name="dwMaximumWorkingSetSize">
                The maximum working set size for the process, in bytes. The virtual memory manager attempts
                to keep no more than this much memory resident in the process whenever the process is active
                and available memory is low.
                <para>
                    This parameter must be greater than or equal to 13 pages (for example, 53,248 on systems
                    with a 4K page size), and less than the system-wide maximum (number of available pages
                    minus 512 pages). The default size is 345 pages (for example, this is 1,413,120 bytes on
                    systems with a 4K page size).
                </para>
                <para>
                    If both dwMinimumWorkingSetSize and dwMaximumWorkingSetSize have the value (SIZE_T)–1,
                    the function removes as many pages as possible from the working set of the specified
                    process.
                </para>
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetTimer(System.IntPtr,System.UIntPtr,System.UInt32,SilDev.WinApi.TimerProc)">
            <summary>
                Creates a timer with the specified time-out value.
            </summary>
            <param name="hWnd">
                A handle to the window to be associated with the timer. This window must be owned by the calling
                thread. If a NULL value for hWnd is passed in along with an nIDEvent of an existing timer, that
                timer will be replaced in the same way that an existing non-NULL hWnd timer will be.
            </param>
            <param name="nIdEvent">
                A nonzero timer identifier. If the hWnd parameter is NULL, and the nIDEvent does not match an
                existing timer then it is ignored and a new timer ID is generated. If the hWnd parameter is not
                NULL and the window specified by hWnd already has a timer with the value nIDEvent, then the
                existing timer is replaced by the new timer. When SetTimer replaces a timer, the timer is reset.
                Therefore, a message will be sent after the current time-out value elapses, but the previously
                set time-out value is ignored. If the call is not intended to replace an existing timer, nIDEvent
                should be 0 if the hWnd is NULL.
            </param>
            <param name="uElapse">
                The time-out value, in milliseconds.
            </param>
            <param name="lpTimerFunc">
                A pointer to the function to be notified when the time-out value elapses.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowBorderlessFullscreen(System.IntPtr)">
            <summary>
                Changes the position and dimensions of the specified window to fill the entire screen.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowFullscreen(System.IntPtr)">
            <summary>
                Changes the position and dimensions of the specified window to fill the entire screen.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowLong(System.IntPtr,SilDev.WinApi.WindowLongFlags,System.IntPtr)">
            <summary>
                Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the
                specified offset into the extra window memory.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window belongs.
            </param>
            <param name="nIndex">
                The zero-based offset to the value to be set. Valid values are in the range zero through the number
                of bytes of extra window memory, minus the size of an integer.
            </param>
            <param name="dwNewLong">
                The replacement value.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowPlacement(System.IntPtr,SilDev.WinApi.WindowPlacement@)">
            <summary>
                Sets the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpwndpl">
                A pointer to a <see cref="T:SilDev.WinApi.WindowPlacement"/> structure that specifies the new show state and window
                positions.
                <para>
                    Before calling SetWindowPlacement, set the length member of the <see cref="T:SilDev.WinApi.WindowPlacement"/>
                    structure to sizeof(<see cref="T:SilDev.WinApi.WindowPlacement"/>). SetWindowPlacement fails if the length
                    member is not set correctly.
                </para>
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowPos(System.IntPtr,System.Drawing.Point)">
            <summary>
                Changes the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="point">
                The new position of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowPos(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Changes the position of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="x">
                The new position of the left side of the window.
            </param>
            <param name="y">
                The new position of the top of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SilDev.WinApi.SetWindowPosFlags)">
            <summary>
                Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are
                ordered according to their appearance on the screen. The topmost window receives the highest rank
                and is the first window in the Z order.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="hWndInsertAfter">
                A handle to the window to precede the positioned window in the Z order. This parameter must be a
                window handle or one of the following values.
                <para>
                    <c>
                        HWND_BOTTOM ((HWND)1):
                    </c>
                    Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost
                    window, the window loses its topmost status and is placed at the bottom of all other windows.
                </para>
                <para>
                    <c>
                        HWND_NOTOPMOST ((HWND)-2):
                    </c>
                    Places the window above all non-topmost windows (that is, behind all topmost windows). This
                    flag has no effect if the window is already a non-topmost window.
                </para>
                <para>
                    <c>
                        HWND_TOP ((HWND)0):
                    </c>
                    Places the window at the top of the Z order.
                </para>
                <para>
                    <c>
                        HWND_TOPMOST ((HWND)-1):
                    </c>
                    Places the window above all non-topmost windows. The window maintains its topmost position even
                    when it is deactivated.
                </para>
            </param>
            <param name="x">
                The new position of the left side of the window, in client coordinates.
            </param>
            <param name="y">
                The new position of the top of the window, in client coordinates.
            </param>
            <param name="cx">
                The new width of the window, in pixels.
            </param>
            <param name="cy">
                The new height of the window, in pixels.
            </param>
            <param name="uFlags">
                The window sizing and positioning flags.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowsHookEx(SilDev.WinApi.Win32HookFlags,SilDev.WinApi.HookProc,System.IntPtr,System.Int32)">
            <summary>
                Installs an application-defined hook procedure into a hook chain. You would install a hook
                procedure to monitor the system for certain types of events. These events are associated
                either with a specific thread or with all threads in the same desktop as the calling thread.
            </summary>
            <param name="idHook">
                The type of hook procedure to be installed.
            </param>
            <param name="lpfn">
                A pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier
                of a thread created by a different process, the lpfn parameter must point to a hook procedure in
                a DLL. Otherwise, lpfn can point to a hook procedure in the code associated with the current
                process.
            </param>
            <param name="hMod">
                A handle to the DLL containing the hook procedure pointed to by the lpfn parameter. The hMod
                parameter must be set to NULL if the dwThreadId parameter specifies a thread created by the current
                process and if the hook procedure is within the code associated with the current process.
            </param>
            <param name="dwThreadId">
                The identifier of the thread with which the hook procedure is to be associated. For desktop apps,
                if this parameter is zero, the hook procedure is associated with all existing threads running in the
                same desktop as the calling thread. For Windows Store apps, see the Remarks section.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowSize(System.IntPtr,System.Drawing.Size)">
            <summary>
                Changes the dimensions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="size">
                The new size of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowSize(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Changes the dimensions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="width">
                The new width of the window.
            </param>
            <param name="height">
                The new height of the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SetWindowText(System.IntPtr,System.String)">
            <summary>
                Changes the text of the specified window's title bar (if it has one). If the specified window is a
                control, the text of the control is changed. However, SetWindowText cannot change the text of a control
                in another application.
            </summary>
            <param name="hWnd">
                A handle to the window or control whose text is to be changed.
            </param>
            <param name="lpString">
                The new title or control text.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.SHAppBarMessage(SilDev.WinApi.AppBarMessageOptions,SilDev.WinApi.AppBarData@)">
            <summary>
                Sends an appbar message to the system.
            </summary>
            <param name="dwMessage">
                Appbar message value to send.
            </param>
            <param name="pData">
                A pointer to an <see cref="T:SilDev.WinApi.AppBarData"/> structure. The content of the structure on entry and on exit
                depends on the value set in the dwMessage parameter. See the individual message pages for specifics.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ShellExecute(System.IntPtr,System.String,System.String,System.String,System.String,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Performs an operation on a specified file.
            </summary>
            <param name="hWnd">
                A handle to the parent window used for displaying a UI or error messages. This value can be NULL if the
                operation is not associated with a window.
            </param>
            <param name="lpOperation">
                A pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to
                be performed. The set of available verbs depends on the particular file or folder. Generally, the
                actions available from an object's shortcut menu are available verbs.
            </param>
            <param name="lpFile">
                A pointer to a null-terminated string that specifies the file or object on which to execute the specified
                verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs
                are supported on all objects. For example, not all document types support the "print" verb. If a relative
                path is used for the lpDirectory parameter do not use a relative path for lpFile.
            </param>
            <param name="lpParameters">
                If lpFile specifies an executable file, this parameter is a pointer to a null-terminated string that
                specifies the parameters to be passed to the application. The format of this string is determined by the
                verb that is to be invoked. If lpFile specifies a document file, lpParameters should be NULL.
            </param>
            <param name="lpDirectory">
                A pointer to a null-terminated string that specifies the default (working) directory for the action. If
                this value is NULL, the current working directory is used. If a relative path is provided at lpFile, do
                not use a relative path for lpDirectory.
            </param>
            <param name="nShowCmd">
                The flags that specify how an application is to be displayed when it is opened. If lpFile specifies a
                document file, the flag is simply passed to the associated application. It is up to the application to
                decide how to handle it.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ShowScrollBar(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
                The ShowScrollBar function shows or hides the specified scroll bar.
            </summary>
            <param name="hWnd">
                Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the
                wBar parameter.
            </param>
            <param name="wBar">
                Specifies the scroll bar(s) to be shown or hidden.
            </param>
            <param name="bShow">
                Specifies whether the scroll bar is shown or hidden. If this parameter is TRUE, the scroll bar is shown;
                otherwise, it is hidden.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ShowWindow(System.IntPtr)">
            <summary>
                Activates the window and displays it.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ShowWindow(System.IntPtr,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Sets the specified window's show state.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="nCmdShow">
                Controls how the window is to be shown. This parameter is ignored the first time an application calls
                ShowWindow, if the program that launched the application provides a STARTUPINFO structure. Otherwise,
                the first time ShowWindow is called, the value should be the value obtained by the WinMain function in
                its nCmdShow parameter.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ShowWindowAsync(System.IntPtr,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Sets the show state of a window without waiting for the operation to complete.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="nCmdShow">
                Controls how the window is to be shown. For a list of possible values, see the description of the
                ShowWindow function.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.TerminateProcess(System.IntPtr,System.UInt32)">
            <summary>
                Terminates the specified process and all of its threads.
            </summary>
            <param name="hProcess">
                A handle to the process to be terminated.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessTerminate"/> access right.
                </para>
            </param>
            <param name="uExitCode">
                The exit code to be used by the process and threads terminated as a result of this call.
                Use the GetExitCodeProcess function to retrieve a process's exit value. Use the
                GetExitCodeThread function to retrieve a thread's exit value.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.ThrowLastError">
            <summary>
                Throws the last error code returned by the last unmanaged function.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">
            </exception>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
                Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.
            </summary>
            <param name="hhk">
                A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call
                SetWindowsHookEx.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.VirtualAllocEx(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.MemAllocTypes,SilDev.WinApi.MemProtectFlags)">
            <summary>
                Reserves, commits, or changes the state of a region of memory within the virtual address space
                of a specified process. The function initializes the memory it allocates to zero.
            </summary>
            <param name="hProcess">
                The handle to a process. The function allocates memory within the virtual address
                space of this process.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/> access
                    right.
                </para>
            </param>
            <param name="lpAddress">
                The pointer that specifies a desired starting address for the region of pages
                that you want to allocate.
            </param>
            <param name="dwSize">
                The size of the region of memory to allocate, in bytes.
            </param>
            <param name="flAllocationType">
                The type of memory allocation. This parameter must contain one of the following values.
            </param>
            <param name="flProtect">
                The memory protection for the region of pages to be allocated.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.VirtualFreeEx(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.MemFreeTypes)">
            <summary>
                Releases, decommits, or releases and decommits a region of memory within the virtual address
                space of a specified process.
            </summary>
            <param name="hProcess">
                The handle to a process. The function allocates memory within the virtual address space of this
                process.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/> access
                    right.
                </para>
            </param>
            <param name="lpAddress">
                A pointer to the starting address of the region of memory to be freed.
                <para>
                    If the dwFreeType parameter is <see cref="F:SilDev.WinApi.MemAllocTypes.Release"/>, lpAddress must be
                    the base address returned by the VirtualAllocEx function when the region is reserved.
                </para>
            </param>
            <param name="dwSize">
                The size of the region of memory to free, in bytes.
                <para>
                    If the dwFreeType parameter is <see cref="F:SilDev.WinApi.MemAllocTypes.Release"/>, dwSize must
                    be 0 (zero). The function frees the entire region that is reserved in the initial
                    allocation call to VirtualAllocEx.
                </para>
                <para>
                    If dwFreeType is <see cref="F:SilDev.WinApi.MemAllocTypes.Decommit"/>, the function decommits all memory
                    pages that contain one or more bytes in the range from the lpAddress parameter to
                    (lpAddress+dwSize). This means, for example, that a 2-byte region of memory that straddles a
                    page boundary causes both pages to be decommitted. If lpAddress is the base address returned by
                    VirtualAllocEx and dwSize is 0 (zero), the function decommits the entire region that is
                    allocated by VirtualAllocEx. After that, the entire region is in the reserved state.
                </para>
            </param>
            <param name="dwFreeType">
                The type of free operation.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeHelper.WriteProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
                Writes data to an area of memory in a specified process. The entire area to be written to must be
                accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process memory to be modified. The handle must have
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmWrite"/> and
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process to which data is written. Before data transfer
                occurs, the system verifies that all data in the base address and memory of the specified size is
                accessible for write access, and if it is not accessible, the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to the buffer that contains data to be written in the address space of the specified process.
            </param>
            <param name="nSize">
                The number of bytes to be written to the specified process.
            </param>
            <param name="lpNumberOfBytesWritten">
                A pointer to a variable that receives the number of bytes transferred into the specified process. This
                parameter is optional. If lpNumberOfBytesWritten is NULL, the parameter is ignored.
            </param>
        </member>
        <member name="T:SilDev.WinApi.NativeMethods">
            <summary>
                Represents native methods.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.AllocConsole">
            <summary>
                Allocates a new console for the calling process.
            </summary>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.AnimateWindow(System.IntPtr,System.Int32,SilDev.WinApi.AnimateWindowFlags)">
            <summary>
                Enables you to produce special effects when showing or hiding windows. There are four types of
                animation: roll, slide, collapse or expand, and alpha-blended fade.
            </summary>
            <param name="hWnd">
                A handle to the window to animate. The calling thread must own this window.
            </param>
            <param name="time">
                The time it takes to play the animation, in milliseconds. Typically, an animation takes 200
                milliseconds to play.
            </param>
            <param name="flags">
                The type of animation.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
                Passes the hook information to the next hook procedure in the current hook chain. A hook
                procedure can call this function either before or after processing the hook information.
            </summary>
            <param name="hhk">
                This parameter is ignored.
            </param>
            <param name="nCode">
                The hook code passed to the current hook procedure. The next hook procedure uses this code
                to determine how to process the hook information.
            </param>
            <param name="wParam">
                The wParam value passed to the current hook procedure. The meaning of this parameter
                depends on the type of hook associated with the current hook chain.
            </param>
            <param name="lParam">
                The lParam value passed to the current hook procedure. The meaning of this parameter
                depends on the type of hook associated with the current hook chain.
            </param>
            <returns>
                This value is returned by the next hook procedure in the chain. The current hook procedure
                must also return this value. The meaning of the return value depends on the hook type.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
                The ClientToScreen function converts the client-area coordinates of a specified point to screen
                coordinates.
            </summary>
            <param name="hWnd">
                A handle to the window whose client area is used for the conversion.
            </param>
            <param name="lpPoint">
                A pointer to a <see cref="T:System.Drawing.Point"/> structure that contains the client coordinates to be converted.
                The new screen coordinates are copied into this structure if the function succeeds.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.CloseHandle(System.IntPtr)">
            <summary>
                Closes an open object handle.
            </summary>
            <param name="handle">
                A valid handle to an open object.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.CloseServiceHandle(System.IntPtr)">
            <summary>
                Closes a handle to a service control manager or service object.
            </summary>
            <param name="hScObject">
                A handle to the service control manager object or the service object to close. Handles to
                service control manager objects are returned by the OpenSCManager function, and handles to
                service objects are returned by either the OpenService or CreateService function.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ControlService(System.IntPtr,SilDev.WinApi.ServiceControlOptions,SilDev.WinApi.ServiceStatus)">
            <summary>
                Sends a control code to a service.
            </summary>
            <param name="hService">
                A handle to the service. This handle is returned by the OpenService or CreateService function.
            </param>
            <param name="dwControl">
            </param>
            <param name="lpServiceStatus">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.CreateService(System.IntPtr,System.String,System.String,SilDev.WinApi.ServiceAccessRights,SilDev.WinApi.ServiceTypes,SilDev.WinApi.ServiceBootFlags,SilDev.WinApi.ServiceErrors,System.String,System.String,System.IntPtr,System.String,System.String,System.String)">
            <summary>
                Creates a service object and adds it to the specified service control manager database.
            </summary>
            <param name="hScManager">
                A handle to the service control manager database. This handle is returned by the OpenSCManager
                function and must have the <see cref="F:SilDev.WinApi.ServiceManagerAccessRights.CreateService"/>
                access right.
            </param>
            <param name="lpServiceName">
                The name of the service to install. The maximum string length is 256 characters. The service
                control manager database preserves the case of the characters, but service name comparisons
                are always case insensitive. Forward-slash (/) and backslash (\) are not valid service name
                characters.
            </param>
            <param name="lpDisplayName">
                The display name to be used by user interface programs to identify the service. This string
                has a maximum length of 256 characters. The name is case-preserved in the service control
                manager. Display name comparisons are always case-insensitive.
            </param>
            <param name="dwDesiredAccess">
                The access to the service. Before granting the requested access, the system checks the access
                token of the calling process.
            </param>
            <param name="dwServiceType">
                The service type.
            </param>
            <param name="dwStartType">
                The service start options. This parameter can be one of the following values.
            </param>
            <param name="dwErrorControl">
                The severity of the error, and action taken, if this service fails to start. This parameter
                can be one of the following values.
            </param>
            <param name="lpBinaryPathName">
                The fully qualified path to the service binary file. If the path contains a space, it must be
                quoted so that it is correctly interpreted. For example, "d:\\my share\\myservice.exe" should
                be specified as "\"d:\\my share\\myservice.exe\"".
                <para>
                    The path can also include arguments for an auto-start service. For example,
                    "d:\\myshare\\myservice.exe arg1 arg2". These arguments are passed to the service entry
                    point (typically the main function).
                </para>
                <para>
                    If you specify a path on another computer, the share must be accessible by the computer
                    account of the local computer because this is the security context used in the remote
                    call. However, this requirement allows any potential vulnerabilities in the remote
                    computer to affect the local computer. Therefore, it is best to use a local file.
                </para>
            </param>
            <param name="lpLoadOrderGroup">
                The names of the load ordering group of which this service is a member. Specify NULL or an
                empty string if the service does not belong to a group.
                <para>
                    The startup program uses load ordering groups to load groups of services in a specified
                    order with respect to the other groups. The list of load ordering groups is contained in
                    the following registry value:
                    "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\ServiceGroupOrder"
                </para>
            </param>
            <param name="lpdwTagId">
                A pointer to a variable that receives a tag value that is unique in the group specified in
                the lpLoadOrderGroup parameter. Specify NULL if you are not changing the existing tag.
                <para>
                    You can use a tag for ordering service startup within a load ordering group by specifying
                    a tag order vector in the following registry value:
                    "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\GroupOrderList"
                </para>
                <para>
                    Tags are only evaluated for driver services that have
                    <see cref="F:SilDev.WinApi.ServiceBootFlags.BootStart"/> or
                    <see cref="F:SilDev.WinApi.ServiceBootFlags.SystemStart"/> start types.
                </para>
            </param>
            <param name="lpDependencies">
                A pointer to a double null-terminated array of null-separated names of services or load
                ordering groups that the system must start before this service. Specify NULL or an empty
                string if the service has no dependencies. Dependency on a group means that this service
                can run if at least one member of the group is running after an attempt to start all members
                of the group.
                <para>
                    You must prefix group names with SC_GROUP_IDENTIFIER so that they can be distinguished
                    from a service name, because services and service groups share the same name space.
                </para>
            </param>
            <param name="lpServiceStartName ">
                The name of the account under which the service should run. If the service type is
                <see cref="F:SilDev.WinApi.ServiceTypes.Win32OwnProcess"/>, use an account name in the form
                DomainName\UserName. The service process will be logged on as this user. If the account
                belongs to the built-in domain, you can specify .\UserName.
                <para>
                    If this parameter is NULL, CreateService uses the LocalSystem account. If the service
                    type specifies <see cref="F:SilDev.WinApi.ServiceTypes.InteractiveProcess"/>, the service
                    must run in the LocalSystem account.
                </para>
                <para>
                    If this parameter is NT AUTHORITY\LocalService, CreateService uses the LocalService
                    account. If the parameter is NT AUTHORITY\NetworkService, CreateService uses the
                    NetworkService account.
                </para>
                <para>
                    A shared process can run as any user.
                </para>
                <para>
                    If the service type is <see cref="F:SilDev.WinApi.ServiceTypes.KernelDriver"/> or
                    <see cref="F:SilDev.WinApi.ServiceTypes.FileSystemDriver"/>, the name is the driver
                    object name that the system uses to load the device driver. Specify NULL if the driver
                    is to use a default object name created by the I/O system.
                </para>
                <para>
                    A service can be configured to use a managed account or a virtual account. If the
                    service is configured to use a managed service account, the name is the managed service
                    account name. If the service is configured to use a virtual account, specify the name as
                    NT SERVICE\ServiceName. For more information about managed service accounts and virtual
                    accounts, see the Service Accounts Step-by-Step Guide.
                </para>
            </param>
            <param name="lpPassword">
                The password to the account name specified by the lpServiceStartName parameter. Specify an
                empty string if the account has no password or if the service runs in the LocalService,
                NetworkService, or LocalSystem account.
                <para>
                    If the account name specified by the lpServiceStartName parameter is the name of a
                    managed service account or virtual account name, the lpPassword parameter must be NULL.
                </para>
                <para>
                    Passwords are ignored for driver services.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the service.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DeleteMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags)">
            <summary>
                Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function
                destroys the handle to the menu or submenu and frees the memory used by the menu or submenu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="nPosition">
                The menu item to be deleted, as determined by the uFlags parameter.
            </param>
            <param name="wFlags">
                Indicates how the uPosition parameter is interpreted. This parameter must be
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> or <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByPosition"/>.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DeleteService(System.IntPtr)">
            <summary>
                Marks the specified service for deletion from the service control manager database.
            </summary>
            <param name="hService">
                A handle to the service. This handle is returned by the OpenService or CreateService function,
                and it must have the <see cref="F:SilDev.WinApi.AccessRights.Delete"/> access right.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DestroyIcon(System.IntPtr)">
            <summary>
                Destroys an icon and frees any memory the icon occupied.
            </summary>
            <param name="hIcon">
                A handle to the icon to be destroyed. The icon must not be in use.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DrawMenuBar(System.IntPtr)">
            <summary>
                Redraws the menu bar of the specified window. If the menu bar changes after the system has
                created the window, this function must be called to draw the changed menu bar.
            </summary>
            <param name="hWnd">
                A handle to the window whose menu bar is to be redrawn.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DuplicateHandle(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
                Duplicates an object handle.
            </summary>
            <param name="hSourceProcessHandle">
                A handle to the process with the handle to be duplicated.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessDupHandle"/> access right.
                </para>
            </param>
            <param name="hSourceHandle">
                The handle to be duplicated. This is an open object handle that is valid in the context
                of the source process. For a list of objects whose handles can be duplicated, see the
                following Remarks section.
            </param>
            <param name="hTargetProcessHandle">
                A handle to the process that is to receive the duplicated handle.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessDupHandle"/> access right.
                </para>
            </param>
            <param name="lpTargetHandle">
                A pointer to a variable that receives the duplicate handle. This handle value is valid
                in the context of the target process.
                <para>
                    If hSourceHandle is a pseudo handle returned by GetCurrentProcess or GetCurrentThread,
                    DuplicateHandle converts it to a real handle to a process or thread, respectively.
                </para>
                <para>
                    If lpTargetHandle is NULL, the function duplicates the handle, but does not return the
                    duplicate handle value to the caller. This behavior exists only for backward
                    compatibility with previous versions of this function. You should not use this feature,
                    as you will lose system resources until the target process terminates.
                </para>
            </param>
            <param name="dwDesiredAccess">
                The access requested for the new handle. For the flags that can be specified for each
                object type, see the following Remarks section.
                <para>
                    This parameter is ignored if the dwOptions parameter specifies the
                    <see cref="F:SilDev.WinApi.DuplicateOptions.SameAccess"/> flag. Otherwise, the flags that
                    can be specified depend on the type of object whose handle is to be duplicated.
                </para>
            </param>
            <param name="bInheritHandle">
                A variable that indicates whether the handle is inheritable. If TRUE, the duplicate handle
                can be inherited by new processes created by the target process. If FALSE, the new handle
                cannot be inherited.
            </param>
            <param name="dwOptions">
                Optional actions. This parameter can be zero, or any combination of
                <see cref="T:SilDev.WinApi.DuplicateOptions"/>.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DwmExtendFrameIntoClientArea(System.IntPtr,SilDev.WinApi.ThemeMargins@)">
            <summary>
                Extends the window frame into the client area.
            </summary>
            <param name="hWnd">
                The handle to the window in which the frame will be extended into the client area.
            </param>
            <param name="pMarInset">
                A pointer to a MARGINS structure that describes the margins to use when extending the frame
                into the client area.
            </param>
            <returns>
                If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DwmGetColorizationParameters(SilDev.WinApi.DwmColorizationParams@)">
            <summary>
                ***This is an undocumented API and as such is not supported by Microsoft and can be changed
                or removed in the future without futher notice.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.DwmIsCompositionEnabled(System.Int32@)">
            <summary>
                Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled.
            </summary>
            <param name="pfEnabled">
                A pointer to a value that, when this function returns successfully, receives TRUE if DWM
                composition is enabled; otherwise, FALSE.
            </param>
            <returns>
                If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.EndDialog(System.IntPtr,System.IntPtr)">
            <summary>
                Destroys a modal dialog box, causing the system to end any processing for the dialog box.
            </summary>
            <param name="hDlg">
                A handle to the dialog box to be destroyed.
            </param>
            <param name="nResult">
                The value to be returned to the application from the function that created the dialog box.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.EnumChildWindows(System.IntPtr,SilDev.WinApi.EnumChildProc,System.IntPtr)">
            <summary>
                Enumerates the child windows that belong to the specified parent window by passing the handle
                to each child window, in turn, to an application-defined callback function. EnumChildWindows
                continues until the last child window is enumerated or the callback function returns FALSE.
            </summary>
            <param name="hWndParent">
                A handle to the parent window whose child windows are to be enumerated. If this parameter is
                NULL, this function is equivalent to EnumWindows.
            </param>
            <param name="lpEnumFunc">
                A pointer to an application-defined callback function.
            </param>
            <param name="lParam">
                An application-defined value to be passed to the callback function.
            </param>
            <returns>
                The return value is not used.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ExtractIconEx(System.String,System.Int32,System.IntPtr[],System.IntPtr[],System.Int32)">
            <summary>
                Creates an array of handles to large or small icons extracted from the specified executable
                file, DLL, or icon file.
            </summary>
            <param name="lpszFile">
                The name of an executable file, DLL, or icon file from which icons will be extracted.
            </param>
            <param name="nIconIndex">
                The zero-based index of the first icon to extract. For example, if this value is zero, the
                function extracts the first icon in the specified file.
                <para>
                    If this value is –1 and phiconLarge and phiconSmall are both NULL, the function returns the
                    total number of icons in the specified file. If the file is an executable file or DLL, the
                    return value is the number of RT_GROUP_ICON resources. If the file is an .ico file, the
                    return value is 1.
                </para>
                <para>
                    If this value is a negative number and either phiconLarge or phiconSmall is not NULL, the
                    function begins by extracting the icon whose resource identifier is equal to the absolute
                    value of nIconIndex. For example, use -3 to extract the icon whose resource identifier is 3.
                </para>
            </param>
            <param name="phiconLarge">
                An array of icon handles that receives handles to the large icons extracted from the file. If
                this parameter is NULL, no large icons are extracted from the file.
            </param>
            <param name="phiconSmall">
                An array of icon handles that receives handles to the small icons extracted from the file. If
                this parameter is NULL, no small icons are extracted from the file.
            </param>
            <param name="nIcons">
                The number of icons to be extracted from the file.
            </param>
            <returns>
                If the nIconIndex parameter is -1, the phiconLarge parameter is NULL, and the phiconSmall
                parameter is NULL, then the return value is the number of icons contained in the specified file.
                Otherwise, the return value is the number of icons successfully extracted from the file.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.FindWindow(System.String,System.String)">
            <summary>
                Retrieves a handle to the top-level window whose class name and window name match the specified
                strings. This function does not search child windows. This function does not perform a
                case-sensitive search.
            </summary>
            <param name="lpClassName">
                The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx
                function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.
                <para>
                    If lpClassName points to a string, it specifies the window class name. The class name can be
                    any name registered with RegisterClass or RegisterClassEx, or any of the predefined
                    control-class names.
                </para>
                <para>
                    If lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter.
                </para>
            </param>
            <param name="lpWindowName">
                The window name (the window's title). If this parameter is NULL, all window names match.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the window that has the specified class
                name and window name.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.FindWindowByCaption(System.IntPtr,System.String)">
            <summary>
                Retrieves a handle to the top-level window whose window name match the specified strings. This
                function does not search child windows. This function does not perform a case-sensitive search.
            </summary>
            <param name="zeroOnly">
                Must be <see cref="F:System.IntPtr.Zero"/>.
            </param>
            <param name="lpWindowName">
                The window name (the window's title). If this parameter is NULL, all window names match.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the window that has the specified window
                name.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
                Retrieves a handle to a window whose class name and window name match the specified strings. The
                function searches child windows, beginning with the one following the specified child window. This
                function does not perform a case-sensitive search.
            </summary>
            <param name="hWndParent">
                A handle to the parent window whose child windows are to be searched.
                <para>
                    If hWndParent is NULL, the function uses the desktop window as the parent window. The function
                    searches among windows that are child windows of the desktop.
                </para>
                <para>
                    If hWndParent is HWND_MESSAGE, the function searches all message-only windows.
                </para>
            </param>
            <param name="hWndChildAfter">
                A handle to a child window. The search begins with the next child window in the Z order. The child
                window must be a direct child window of hWndParent, not just a descendant window.
                <para>
                    If hWndChildAfter is NULL, the search begins with the first child window of hWndParent.
                </para>
                <para>
                    Note that if both hWndParent and hWndChildAfter are NULL, the function searches all top-level
                    and message-only windows.
                </para>
            </param>
            <param name="lpszClass">
                The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx
                function. The atom must be placed in the low-order word of lpszClass; the high-order word must be
                zero.
                <para>
                    If lpszClass is a string, it specifies the window class name. The class name can be any name
                    registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names,
                    or it can be MAKEINTATOM (0x8000). In this latter case, 0x8000 is the atom for a menu class. For
                    more information, see the Remarks section of this topic.
                </para>
            </param>
            <param name="lpszWindow">
                The window name (the window's title). If this parameter is NULL, all window names match.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the window that has the specified class and
                window names.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetAsyncKeyState(System.Int32)">
            <summary>
                Determines whether a key is up or down at the time the function is called, and whether the
                key was pressed after a previous call to <see cref="M:SilDev.WinApi.NativeMethods.GetAsyncKeyState(System.Int32)"/>.
            </summary>
            <param name="vKey">
                The virtual-key code.
            </param>
            <returns>
                If the function succeeds, the return value specifies whether the key was pressed since the
                last call to <see cref="M:SilDev.WinApi.NativeMethods.GetAsyncKeyState(System.Int32)"/>, and whether the key is currently up or down.
                If the most significant bit is set, the key is down, and if the least significant bit is
                set, the key was pressed after the previous call to <see cref="M:SilDev.WinApi.NativeMethods.GetAsyncKeyState(System.Int32)"/>.
                <para>
                    The return value is zero if the current desktop is not the active desktop, or if the
                    foreground thread belongs to another process and the desktop does not allow the hook or
                    the journal record.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Retrieves the name of the class to which the specified window belongs.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window belongs.
            </param>
            <param name="lpClassName">
                The class name string.
            </param>
            <param name="nMaxCount">
                The length of the lpClassName buffer, in characters. The buffer must be large enough to include the
                terminating null character; otherwise, the class name string is truncated to nMaxCount-1 characters.
            </param>
            <returns>
                If the function succeeds, the return value is the number of characters copied to the buffer, not
                including the terminating null character.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetClientRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left
                and lower-right corners of the client area. Because client coordinates are relative to the upper-left
                corner of a window's client area, the coordinates of the upper-left corner are (0,0).
            </summary>
            <param name="hWnd">
                A handle to the window whose client coordinates are to be retrieved.
            </param>
            <param name="lpRect">
                A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the client coordinates. The left and
                top members are zero. The right and bottom members contain the width and height of the window.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetConsoleWindow">
            <summary>
                Retrieves the window handle used by the console associated with the calling
                process.
            </summary>
            <returns>
                The return value is a handle to the window used by the console associated with
                the calling process or NULL if there is no such associated console.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetCurrentThreadId">
            <summary>
                Retrieves the thread identifier of the calling thread.
            </summary>
            <returns>
                The return value is the thread identifier of the calling thread.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetDlgCtrlID(System.IntPtr)">
            <summary>
                Retrieves the identifier of the specified control.
            </summary>
            <param name="hWndCtl">
                A handle to the control.
            </param>
            <returns>
                If the function succeeds, the return value is the identifier of the control.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetDlgItem(System.IntPtr,System.Int32)">
            <summary>
                Retrieves a handle to a control in the specified dialog box.
            </summary>
            <param name="hDlg">
                A handle to the dialog box that contains the control.
            </param>
            <param name="nIddlgItem">
                The identifier of the control to be retrieved.
            </param>
            <returns>
                If the function succeeds, the return value is the window handle of the specified control.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetForegroundWindow">
            <summary>
                Retrieves a handle to the foreground window (the window with which the user is currently working).
                The system assigns a slightly higher priority to the thread that creates the foreground window
                than it does to other threads.
            </summary>
            <returns>
                The return value is a handle to the foreground window. The foreground window can be NULL in certain
                circumstances, such as when a window is losing activation.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetLastError">
            <summary>
                Retrieves the calling thread's last-error code value. The last-error code is
                maintained on a per-thread basis. Multiple threads do not overwrite each
                other's last-error code.
            </summary>
            <returns>
                The return value is the calling thread's last-error code.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetMenu(System.IntPtr)">
            <summary>
                Retrieves a handle to the menu assigned to the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window whose menu handle is to be retrieved.
            </param>
            <returns>
                The return value is a handle to the menu. If the specified window has no menu, the return value is
                NULL. If the window is a child window, the return value is undefined.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetMenuItemCount(System.IntPtr)">
            <summary>
                Determines the number of items in the specified menu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be examined.
            </param>
            <returns>
                If the function succeeds, the return value specifies the number of items in the menu.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetParent(System.IntPtr)">
            <summary>
                Retrieves a handle to the specified window's parent or owner.
            </summary>
            <param name="hWnd">
                A handle to the window whose parent window handle is to be retrieved.
            </param>
            <returns>
                If the window is a child window, the return value is a handle to the parent window. If the window
                is a top-level window with the WS_POPUP style, the return value is a handle to the owner window.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
                Retrieves a string from the specified section in an initialization file.
            </summary>
            <param name="lpApplicationName">
                The name of the section containing the key name. If this parameter is NULL, the
                GetPrivateProfileString function copies all section names in the file to the supplied buffer.
            </param>
            <param name="lpKeyName">
                The name of the key whose associated string is to be retrieved. If this parameter is NULL, all key
                names in the section specified by the lpAppName parameter are copied to the buffer specified by the
                lpReturnedString parameter.
            </param>
            <param name="nDefault">
                A default string. If the lpKeyName key cannot be found in the initialization file,
                GetPrivateProfileString copies the default string to the lpReturnedString buffer. If this parameter
                is NULL, the default is an empty string.
                <para>
                    Avoid specifying a default string with trailing blank characters. The function inserts a null
                    character in the lpReturnedString buffer to strip any trailing blanks.
                </para>
            </param>
            <param name="retVal">
                A pointer to the buffer that receives the retrieved string.
            </param>
            <param name="nSize">
                The size of the buffer pointed to by the retVal parameter, in characters.
            </param>
            <param name="lpFileName">
                The name of the initialization file. If this parameter does not contain a full path to the file, the
                system searches for the file in the Windows directory.
            </param>
            <returns>
                The return value is the number of characters copied to the buffer, not including the terminating null
                character.
                <para>
                    If neither lpAppName nor lpKeyName is NULL and the supplied destination buffer is too small to
                    hold the requested string, the string is truncated and followed by a null character, and the
                    return value is equal to nSize minus one.
                </para>
                <para>
                    If either lpAppName or lpKeyName is NULL and the supplied destination buffer is too small to hold
                    all the strings, the last string is truncated and followed by two null characters. In this case,
                    the return value is equal to nSize minus two.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetProcessId(System.IntPtr)">
            <summary>
                Retrieves the process identifier of the specified process.
            </summary>
            <param name="handle">
                A handle to the process.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetProcessImageFileName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Retrieves the name of the executable file for the specified process.
            </summary>
            <param name="hProcess">
                A handle to the process. The handle must have the
                <see cref="F:SilDev.WinApi.AccessRights.ProcessQueryInformation"/> or
                <see cref="F:SilDev.WinApi.AccessRights.ProcessQueryLimitedInformation"/> access right.
            </param>
            <param name="lpImageFileName">
                A pointer to a buffer that receives the full path to the executable file.
            </param>
            <param name="nSize">
                The size of the lpImageFileName buffer, in characters.
            </param>
            <returns>
                If the function succeeds, the return value specifies the length of the string
                copied to the buffer.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetStdHandle(System.Int32)">
            <summary>
                Retrieves a handle to the specified standard device (standard input, standard
                output, or standard error).
            </summary>
            <param name="nStdHandle">
                The standard device. This parameter can be one of the following values.
                <para>
                    STD_INPUT_HANDLE (DWORD)-10: The standard input device. Initially, this is
                    the console input buffer, CONIN$.
                </para>
                <para>
                    STD_OUTPUT_HANDLE (DWORD)-11: The standard output device. Initially, this
                    is the active console screen buffer, CONOUT$.
                </para>
                <para>
                    STD_ERROR_HANDLE (DWORD)-12: The standard error device. Initially, this is
                    the active console screen buffer, CONOUT$.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the specified device,
                or a redirected handle set by a previous call to SetStdHandle. The handle has
                GENERIC_READ and GENERIC_WRITE access rights, unless the application has used
                SetStdHandle to set a standard handle with lesser access.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
                Enables the application to access the window menu (also known as the system menu or the control
                menu) for copying and modifying.
            </summary>
            <param name="hWnd">
                A handle to the window that will own a copy of the window menu.
            </param>
            <param name="bRevert">
                The action to be taken. If this parameter is FALSE, GetSystemMenu returns a handle to the copy of
                the window menu currently in use. The copy is initially identical to the window menu, but it can
                be modified. If this parameter is TRUE, GetSystemMenu resets the window menu back to the default
                state. The previous window menu, if any, is destroyed.
            </param>
            <returns>
                If the bRevert parameter is FALSE, the return value is a handle to a copy of the window menu. If
                the bRevert parameter is TRUE, the return value is NULL.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowLong(System.IntPtr,SilDev.WinApi.WindowLongFlags)">
            <summary>
                Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD)
                value at the specified offset into the extra window memory.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window belongs.
            </param>
            <param name="nIndex">
                The zero-based offset to the value to be retrieved. Valid values are in the range zero through the
                number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes
                of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other
                value, specify one of the <see cref="T:SilDev.WinApi.WindowLongFlags"/>.GWL_??? values.
            </param>
            <returns>
                If the function succeeds, the return value is the requested value.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowPlacement(System.IntPtr,SilDev.WinApi.WindowPlacement@)">
            <summary>
                Gets the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpwndpl">
                A pointer to a <see cref="T:SilDev.WinApi.WindowPlacement"/> structure that specifies the new show state and window
                positions.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given
                in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpRect">
                A pointer to a <see cref="T:System.Drawing.Rectangle"/> structure that receives the screen coordinates of the
                upper-left and lower-right corners of the window.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified
                window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the
                text of a control in another application.
            </summary>
            <param name="hWnd">
                A handle to the window or control containing the text.
            </param>
            <param name="text">
                The buffer that will receive the text. If the string is as long or longer than the buffer, the string
                is truncated and terminated with a null character.
            </param>
            <param name="maxLength">
                The maximum number of characters to copy to the buffer, including the null character. If the text
                exceeds this limit, it is truncated.
            </param>
            <returns>
                If the function succeeds, the return value is the length, in characters, of the copied string, not
                including the terminating null character. If the window has no title bar or text, if the title bar is
                empty, or if the window or control handle is invalid, the return value is zero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowTextLength(System.IntPtr)">
            <summary>
                Retrieves the length, in characters, of the specified window's title bar text (if the window has a
                title bar). If the specified window is a control, the function retrieves the length of the text within
                the control. However, GetWindowTextLength cannot retrieve the length of the text of an edit control in
                another application.
            </summary>
            <param name="hWnd">
                A handle to the window or control.
            </param>
            <returns>
                If the function succeeds, the return value is the length, in characters, of the text. Under certain
                conditions, this value may actually be greater than the length of the text.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.GetWindowThreadProcessId(System.IntPtr,System.UInt32@)">
            <summary>
                Retrieves the identifier of the thread that created the specified window and, optionally, the identifier
                of the process that created the window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpdwProcessId">
                A pointer to a variable that receives the process identifier. If this parameter is not NULL,
                GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not.
            </param>
            <returns>
                The return value is the identifier of the thread that created the window.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.InsertMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags,System.UIntPtr,System.String)">
            <summary>
                Note  The InsertMenu function has been superseded by the InsertMenuItem function. You can still use
                InsertMenu, however, if you do not need any of the extended features of InsertMenuItem.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="wPosition">
                The menu item before which the new menu item is to be inserted, as determined by the uFlags parameter.
            </param>
            <param name="wFlags">
                Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the
                new menu item.
            </param>
            <param name="wIdNewItem">
                The identifier of the new menu item or, if the uFlags parameter has the <see cref="F:SilDev.WinApi.ModifyMenuFlags.Popup"/>
                flag set, a handle to the drop-down menu or submenu.
            </param>
            <param name="lpNewItem">
                The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter
                includes the <see cref="F:SilDev.WinApi.ModifyMenuFlags.Bitmap"/>, <see cref="F:SilDev.WinApi.ModifyMenuFlags.OwnerDraw"/>, or
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.String"/> flag, as follows.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LoadLibrary(System.String)">
            <summary>
                Loads the specified module into the address space of the calling process. The
                specified module may cause other modules to be loaded.
            </summary>
            <param name="lpFileName">
                The name of the module. This can be either a library module (a .dll file) or an
                executable module (an .exe file). The name specified is the file name of the
                module and is not related to the name stored in the library module itself, as
                specified by the LIBRARY keyword in the module-definition (.def) file.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the module.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LoadString(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.Int32)">
            <summary>
                Loads a string resource from the executable file associated with a specified module, copies the string into
                a buffer, and appends a terminating null character.
            </summary>
            <param name="hInstance">
                A handle to an instance of the module whose executable file contains the string resource. To get the handle
                to the application itself, call the GetModuleHandle function with NULL.
            </param>
            <param name="uId">
                The identifier of the string to be loaded.
            </param>
            <param name="lpBuffer">
                The buffer is to receive the string. Must be of sufficient length to hold a pointer (8 bytes).
            </param>
            <param name="nBufferMax">
                The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the
                number of characters specified. If this parameter is 0, then lpBuffer receives a read-only pointer to the
                resource itself.
            </param>
            <returns>
                If the function succeeds, the return value is the number of characters copied into the buffer, not including
                the terminating null character, or zero if the string resource does not exist.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LocalAlloc(SilDev.WinApi.LocalAllocFlags,System.UIntPtr)">
            <summary>
                Allocates the specified number of bytes from the heap.
            </summary>
            <param name="flag">
                The memory allocation attributes. The default is the LMEM_FIXED value. This
                parameter can be one or more of the <see cref="T:SilDev.WinApi.LocalAllocFlags"/>.
            </param>
            <param name="size">
                The number of bytes to allocate. If this parameter is zero and the uFlags
                parameter specifies <see cref="F:SilDev.WinApi.LocalAllocFlags.LMemMoveable"/>, the function
                returns a handle to a memory object that is marked as discarded.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the newly allocated
                memory object.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.LocalFree(System.IntPtr)">
            <summary>
                Frees the specified local memory object and invalidates its handle.
            </summary>
            <param name="hMem">
                A handle to the local memory object. This handle is returned by either the
                <see cref="M:SilDev.WinApi.NativeMethods.LocalAlloc(SilDev.WinApi.LocalAllocFlags,System.UIntPtr)"/> function.
            </param>
            <returns>
                If the function succeeds, the return value is NULL.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.mciSendString(System.String,System.Text.StringBuilder,System.UInt32,System.IntPtr)">
            <summary>
                The mciSendString function sends a command string to an MCI device. The device that the
                command is sent to is specified in the command string.
            </summary>
            <param name="lpszCommand">
                Pointer to a null-terminated string that specifies an MCI command string.
            </param>
            <param name="lpszReturnString">
                Pointer to a buffer that receives return information. If no return information is needed,
                this parameter can be NULL.
            </param>
            <param name="cchReturn">
                Size, in characters, of the return buffer specified by the lpszReturnString parameter.
            </param>
            <param name="hWndCallback">
                Handle to a callback window if the "notify" flag was specified in the command string.
            </param>
            <returns>
                Returns zero if successful or an error otherwise. The low-order word of the returned DWORD
                value contains the error return value. If the error is device-specific, the high-order word
                of the return value is the driver identifier; otherwise, the high-order word is zero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Changes the position and dimensions of the specified window. For a top-level window, the position and
                dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to
                the upper-left corner of the parent window's client area.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="x">
                The new position of the left side of the window.
            </param>
            <param name="y">
                The new position of the top of the window.
            </param>
            <param name="nWidth">
                The new width of the window.
            </param>
            <param name="nHeight">
                The new height of the window.
            </param>
            <param name="bRepaint">
                Indicates whether the window is to be repainted. If this parameter is TRUE, the window receives a message.
                If the parameter is FALSE, no repainting of any kind occurs. This applies to the client area, the nonclient
                area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of
                moving a child window.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.NtQueryInformationProcess(System.IntPtr,SilDev.WinApi.ProcessInfoFlags,SilDev.WinApi.ProcessBasicInformation@,System.UInt32,System.IntPtr@)">
            <summary>
                Retrieves information about the specified process.
            </summary>
            <param name="hndl">
                A handle to the process for which information is to be retrieved.
            </param>
            <param name="piCl">
                The type of process information to be retrieved.
            </param>
            <param name="processInformation">
                A pointer to a buffer supplied by the calling application into which the function writes the requested
                information. The size of the information written varies depending on the data type of the
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter.
            </param>
            <param name="piLen">
                The size of the buffer pointed to by the <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter, in bytes.
            </param>
            <param name="rLen">
                A pointer to a variable in which the function returns the size of the requested information. If the function
                was successful, this is the size of the information written to the buffer pointed to by the
                <see cref="T:SilDev.WinApi.ProcessBasicInformation"/> parameter, but if the buffer was too small, this is the minimum size
                of buffer needed to receive the information successfully.
            </param>
            <returns>
                The function returns an NTSTATUS success or error code.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.OpenProcess(SilDev.WinApi.AccessRights,System.Boolean,System.UInt32)">
            <summary>
                Opens an existing local process object.
            </summary>
            <param name="dwDesiredAccess">
                The access to the process object. This access right is checked against the
                security descriptor for the process. This parameter can be one or more of the
                process access rights.
            </param>
            <param name="bInheritHandle">
                If this value is TRUE, processes created by this process will inherit the handle.
                Otherwise, the processes do not inherit this handle.
            </param>
            <param name="dwProcessId">
                The identifier of the local process to be opened.
            </param>
            <returns>
                If the function succeeds, the return value is an open handle to the specified
                process.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.OpenSCManager(System.String,System.String,SilDev.WinApi.ServiceManagerAccessRights)">
            <summary>
                Establishes a connection to the service control manager on the specified computer and opens
                the specified service control manager database.
            </summary>
            <param name="lpMachineName">
                The name of the target computer. If the pointer is NULL or points to an empty string, the
                function connects to the service control manager on the local computer.
            </param>
            <param name="lpDatabaseName">
                The name of the service control manager database. This parameter should be set to
                SERVICES_ACTIVE_DATABASE. If it is NULL, the SERVICES_ACTIVE_DATABASE database is opened by
                default.
            </param>
            <param name="dwDesiredAccess">
                The access to the service control manager. For a list of access rights, see
                <see cref="T:SilDev.WinApi.AccessRights"/>.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the specified service control
                manager database.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.OpenService(System.IntPtr,System.String,SilDev.WinApi.ServiceAccessRights)">
            <summary>
                Opens an existing service.
            </summary>
            <param name="hScManager">
                A handle to the service control manager database. The OpenSCManager function returns this handle.
            </param>
            <param name="lpServiceName">
                The name of the service to be opened. This is the name specified by the lpServiceName parameter
                of the CreateService function when the service object was created, not the service display name
                that is shown by user interface applications to identify the service.
                <para>
                    The maximum string length is 256 characters. The service control manager database preserves
                    the case of the characters, but service name comparisons are always case insensitive.
                    Forward-slash (/) and backslash (\) are invalid service name characters.
                </para>
            </param>
            <param name="dwDesiredAccess">
                The access to the service.
                <para>
                    Before granting the requested access, the system checks the access token of the calling process
                    against the discretionary access-control list of the security descriptor associated with the
                    service object.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the service.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.PostMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Places (posts) a message in the message queue associated with the thread that created the
                specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure is to receive the message. The following values
                have special meanings.
                <para>
                    <c>
                        HWND_BROADCAST ((HWND)0xffff):
                    </c>
                    The message is posted to all top-level windows in the system, including disabled or invisible
                    unowned windows, overlapped windows, and pop-up windows. The message is not posted to child
                    windows.
                </para>
                <para>
                    <c>
                        NULL:
                    </c>
                    The function behaves like a call to PostThreadMessage with the dwThreadId parameter set to
                    the identifier of the current thread.
                </para>
            </param>
            <param name="msg">
                The message to be posted.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.QueryServiceStatus(System.IntPtr,SilDev.WinApi.ServiceStatus)">
            <summary>
                Retrieves the current status of the specified service.
            </summary>
            <param name="hService">
                A handle to the service. This handle is returned by the OpenService or the CreateService
                function, and it must have the <see cref="F:SilDev.WinApi.ServiceAccessRights.QueryStatus"/> access
                right.
            </param>
            <param name="lpServiceStatus">
                A pointer to a <see cref="T:SilDev.WinApi.ServiceStatus"/> structure that receives the status information.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ReadProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
                Reads data from an area of memory in a specified process. The entire area to be
                read must be accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process with memory that is being read. The handle must have
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmRead"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process from which to read. Before
                any data transfer occurs, the system verifies that all data in the base address
                and memory of the specified size is accessible for read access, and if it is not
                accessible the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to a buffer that receives the contents from the address space of the
                specified process.
            </param>
            <param name="nSize">
                The number of bytes to be read from the specified process.
            </param>
            <param name="lpNumberOfBytesRead">
                A pointer to a variable that receives the number of bytes transferred into the
                specified buffer. If lpNumberOfBytesRead is NULL, the parameter is ignored.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ReadProcessMemory(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.IntPtr,System.IntPtr@)">
            <summary>
                Reads data from an area of memory in a specified process. The entire area to be
                read must be accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process with memory that is being read. The handle must have
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmRead"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process from which to read. Before
                any data transfer occurs, the system verifies that all data in the base address
                and memory of the specified size is accessible for read access, and if it is not
                accessible the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to a buffer that receives the contents from the address space of the
                specified process.
            </param>
            <param name="nSize">
                The number of bytes to be read from the specified process.
            </param>
            <param name="lpNumberOfBytesRead">
                A pointer to a variable that receives the number of bytes transferred into the
                specified buffer. If lpNumberOfBytesRead is NULL, the parameter is ignored.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ReleaseCapture">
            <summary>
                Releases the mouse capture from a window in the current thread and restores normal mouse
                input processing. A window that has captured the mouse receives all mouse input, regardless
                of the position of the cursor, except when a mouse button is clicked while the cursor hot
                spot is in the window of another thread.
            </summary>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RemoveMenu(System.IntPtr,System.UInt32,SilDev.WinApi.ModifyMenuFlags)">
            <summary>
                Deletes a menu item or detaches a submenu from the specified menu. If the menu item
                opens a drop-down menu or submenu, RemoveMenu does not destroy the menu or its handle,
                allowing the menu to be reused. Before this function is called, the GetSubMenu function
                should retrieve a handle to the drop-down menu or submenu.
            </summary>
            <param name="hMenu">
                A handle to the menu to be changed.
            </param>
            <param name="uPosition">
                The menu item to be deleted, as determined by the uFlags parameter.
            </param>
            <param name="uFlags">
                Indicates how the uPosition parameter is interpreted. This parameter must be
                <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByCommand"/> or <see cref="F:SilDev.WinApi.ModifyMenuFlags.ByPosition"/>.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RmEndSession(System.UInt32)">
            <summary>
                Ends the Restart Manager session. This function should be called by the primary installer
                that has previously started the session by calling the RmStartSession function. The
                RmEndSession function can be called by a secondary installer that is joined to the session
                once no more resources need to be registered by the secondary installer.
            </summary>
            <param name="pSessionHandle">
                A handle to an existing Restart Manager session.
            </param>
            <returns>
                This is the most recent error received.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RmGetList(System.UInt32,System.UInt32@,System.UInt32@,SilDev.WinApi.RmProcessInfo[],System.UInt32@)">
            <summary>
                Gets a list of all applications and services that are currently using resources that have
                been registered with the Restart Manager session.
            </summary>
            <param name="dwSessionHandle">
                A handle to an existing Restart Manager session.
            </param>
            <param name="pnProcInfoNeeded">
                A pointer to an array size necessary to receive RM_PROCESS_INFO structures required to
                return information for all affected applications and services.
            </param>
            <param name="pnProcInfo">
                A pointer to the total number of RM_PROCESS_INFO structures in an array and number of
                structures filled.
            </param>
            <param name="rgAffectedApps">
                An array of RM_PROCESS_INFO structures that list the applications and services using
                resources that have been registered with the session.
            </param>
            <param name="lpdwRebootReasons">
                Pointer to location that receives a value of the RM_REBOOT_REASON enumeration that
                describes the reason a system restart is needed.
            </param>
            <returns>
                This is the most recent error received.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RmRegisterResources(System.UInt32,System.UInt32,System.String[],System.UInt32,SilDev.WinApi.RmUniqueProcess[],System.UInt32,System.String[])">
            <summary>
                Registers resources to a Restart Manager session. The Restart Manager uses the list of
                resources registered with the session to determine which applications and services must
                be shut down and restarted. Resources can be identified by filenames, service short names,
                or RM_UNIQUE_PROCESS structures that describe running applications. The RmRegisterResources
                function can be used by a primary or secondary installer.
            </summary>
            <param name="dwSessionHandle">
                A handle to an existing Restart Manager session.
            </param>
            <param name="nFiles">
                The number of files being registered.
            </param>
            <param name="rgsFilenames">
                An array of null-terminated strings of full filename paths.
            </param>
            <param name="nApplications">
                The number of processes being registered.
            </param>
            <param name="rgApplications">
                An array of RM_UNIQUE_PROCESS structures.
            </param>
            <param name="nServices">
                The number of services to be registered.
            </param>
            <param name="rgsServiceNames">
                An array of null-terminated strings of service short names.
            </param>
            <returns>
                This is the most recent error received.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.RmStartSession(System.UInt32@,System.Int32,System.String)">
            <summary>
                Starts a new Restart Manager session. A maximum of 64 Restart Manager sessions per user
                session can be open on the system at the same time. When this function starts a session,
                it returns a session handle and session key that can be used in subsequent calls to the
                Restart Manager API.
            </summary>
            <param name="pSessionHandle">
                A pointer to the handle of a Restart Manager session. The session handle can be passed in
                subsequent calls to the Restart Manager API.
            </param>
            <param name="dwSessionFlags">
                Reserved. This parameter should be 0.
            </param>
            <param name="strSessionKey">
                A null-terminated string that contains the session key to the new session. The string must
                be allocated before calling the RmStartSession function.
            </param>
            <returns>
                This is the most recent error received.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendInput(System.UInt32,SilDev.WinApi.DeviceInput[],System.Int32)">
            <summary>
                Synthesizes keystrokes, mouse motions, and button clicks.
            </summary>
            <param name="nInputs">
                The number of structures in the pInputs array.
            </param>
            <param name="pInputs">
                An array of <see cref="T:SilDev.WinApi.DeviceInput"/> structures. Each structure represents an event
                to be inserted into the keyboard or mouse input stream.
            </param>
            <param name="cbSize">
                The size, in bytes, of an <see cref="T:SilDev.WinApi.DeviceInput"/> structure. If cbSize is not the
                size of an <see cref="T:SilDev.WinApi.DeviceInput"/> structure, the function fails.
            </param>
            <returns>
                The function returns the number of events that it successfully inserted into
                the keyboard or mouse input stream. If the function returns zero, the input
                was already blocked by another thread.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage function
                calls the window procedure for the specified window and does not return until
                the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If this
                parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level
                windows in the system, including disabled or invisible unowned windows, overlapped
                windows, and pop-up windows; but the message is not sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
            <returns>
                The return value specifies the result of the message processing; it depends on the
                message sent.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,SilDev.WinApi.CopyData@)">
            <summary>
                Sends the specified message to a window or windows. The SendMessage function
                calls the window procedure for the specified window and does not return until
                the window procedure has processed the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If this
                parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level
                windows in the system, including disabled or invisible unowned windows, overlapped
                windows, and pop-up windows; but the message is not sent to child windows.
            </param>
            <param name="uMsg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
            <returns>
                The return value specifies the result of the message processing; it depends on the
                message sent.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendMessageTimeout(System.IntPtr,System.UInt32,System.UIntPtr,System.IntPtr,System.UInt32,System.UInt32,System.UIntPtr@)">
            <summary>
                Sends the specified message to one or more windows.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message.
                <para>
                    If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all
                    top-level windows in the system, including disabled or invisible unowned windows.
                    The function does not return until each window has timed out. Therefore, the total
                    wait time can be up to the value of uTimeout multiplied by the number of top-level
                    windows.
                </para>
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Any additional message-specific information.
            </param>
            <param name="lParam">
                Any additional message-specific information.
            </param>
            <param name="fuFlags">
                The behavior of this function. This parameter can be one or more of the following values.
                <para>
                    <c>
                        SMTO_ABORTIFHUNG (0x2):
                    </c>
                    The function returns without waiting for the time-out period to elapse if the receiving
                    thread appears to not respond or hangs.
                </para>
                <para>
                    <c>
                        SMTO_BLOCK (0x1):
                    </c>
                    Prevents the calling thread from processing any other requests until the function returns.
                </para>
                <para>
                    <c>
                        SMTO_NORMAL (0x0):
                    </c>
                    The calling thread is not prevented from processing other requests while waiting for the
                    function to return.
                </para>
                <para>
                    <c>
                        SMTO_NOTIMEOUTIFNOTHUNG (0x8):
                    </c>
                    The function does not enforce the time-out period as long as the receiving thread is
                    processing messages.
                </para>
                <para>
                    <c>
                        SMTO_ERRORONEXIT (0x20):
                    </c>
                    The function should return 0 if the receiving window is destroyed or its owning thread dies
                    while the message is being processed.
                </para>
            </param>
            <param name="uTimeout">
                The duration of the time-out period, in milliseconds. If the message is a broadcast message,
                each window can use the full time-out period. For example, if you specify a five second time-out
                period and there are three top-level windows that fail to process the message, you could have up
                to a 15 second delay.
            </param>
            <param name="lpdwResult">
                The result of the message processing. The value of this parameter depends on the message that is
                specified.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero. SendMessageTimeout does not provide
                information about individual windows timing out if HWND_BROADCAST ((HWND)0xffff) is used.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendMessageTimeoutText(System.IntPtr,System.UInt32,System.UIntPtr,System.Text.StringBuilder,System.UInt32,System.UInt32,System.IntPtr@)">
            <summary>
                Sends the specified message to one or more windows.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message.
                <para>
                    If this parameter is HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level
                    windows in the system, including disabled or invisible unowned windows. The function does
                    not return until each window has timed out. Therefore, the total wait time can be up to the
                    value of uTimeout multiplied by the number of top-level windows.
                </para>
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Any additional message-specific information.
            </param>
            <param name="lParam">
                Any additional message-specific information.
            </param>
            <param name="fuFlags">
                The behavior of this function. This parameter can be one or more of the following values.
                <para>
                    <c>
                        SMTO_ABORTIFHUNG (0x2):
                    </c>
                    The function returns without waiting for the time-out period to elapse if the receiving
                    thread appears to not respond or hangs.
                </para>
                <para>
                    <c>
                        SMTO_BLOCK (0x1):
                    </c>
                    Prevents the calling thread from processing any other requests until the function returns.
                </para>
                <para>
                    <c>
                        SMTO_NORMAL (0x0):
                    </c>
                    The calling thread is not prevented from processing other requests while waiting for the
                    function to return.
                </para>
                <para>
                    <c>
                        SMTO_NOTIMEOUTIFNOTHUNG (0x8):
                    </c>
                    The function does not enforce the time-out period as long as the receiving thread is
                    processing messages.
                </para>
                <para>
                    <c>
                        SMTO_ERRORONEXIT (0x20):
                    </c>
                    The function should return 0 if the receiving window is destroyed or its owning thread dies
                    while the message is being processed.
                </para>
            </param>
            <param name="uTimeout">
                The duration of the time-out period, in milliseconds. If the message is a broadcast message,
                each window can use the full time-out period. For example, if you specify a five second time-out
                period and there are three top-level windows that fail to process the message, you could have up
                to a 15 second delay.
            </param>
            <param name="lpdwResult">
                The result of the message processing. The value of this parameter depends on the message that is
                specified.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero. SendMessageTimeout does not provide
                information about individual windows timing out if HWND_BROADCAST ((HWND)0xffff) is used.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SendNotifyMessage(System.IntPtr,System.UInt32,System.UIntPtr,System.String)">
            <summary>
                Sends the specified message to a window or windows. If the window was created by the calling
                thread, SendNotifyMessage calls the window procedure for the window and does not return until
                the window procedure has processed the message. If the window was created by a different thread,
                SendNotifyMessage passes the message to the window procedure and returns immediately; it does
                not wait for the window procedure to finish processing the message.
            </summary>
            <param name="hWnd">
                A handle to the window whose window procedure will receive the message. If this parameter is
                HWND_BROADCAST ((HWND)0xffff), the message is sent to all top-level windows in the system,
                including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but
                the message is not sent to child windows.
            </param>
            <param name="msg">
                The message to be sent.
            </param>
            <param name="wParam">
                Additional message-specific information.
            </param>
            <param name="lParam">
                Additional message-specific information.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetCurrentDirectory(System.String)">
            <summary>
                Changes the current directory for the current process.
            </summary>
            <param name="lpPathName">
                The path to the new current directory.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetCursorPos(System.UInt32,System.UInt32)">
            <summary>
                Moves the cursor to the specified screen coordinates. If the new coordinates are not within
                the screen rectangle set by the most recent ClipCursor function call, the system automatically
                adjusts the coordinates so that the cursor stays within the rectangle.
            </summary>
            <param name="x">
                The new x-coordinate of the cursor, in screen coordinates.
            </param>
            <param name="y">
                The new y-coordinate of the cursor, in screen coordinates.
            </param>
            <returns>
                Returns nonzero if successful or zero otherwise.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetForegroundWindow(System.IntPtr)">
            <summary>
                Brings the thread that created the specified window into the foreground and activates the window.
                Keyboard input is directed to the window, and various visual cues are changed for the user. The
                system assigns a slightly higher priority to the thread that created the foreground window than
                it does to other threads.
            </summary>
            <param name="hWnd">
                A handle to the window that should be activated and brought to the foreground.
            </param>
            <returns>
                If the window was brought to the foreground, the return value is nonzero.
                <para>
                    If the window was not brought to the foreground, the return value is zero.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
                Changes the parent window of the specified child window.
            </summary>
            <param name="hWndChild">
                A handle to the child window.
            </param>
            <param name="hWndNewParent">
                A handle to the new parent window. If this parameter is NULL, the desktop window becomes the new
                parent window. If this parameter is HWND_MESSAGE, the child window becomes a message-only window.
            </param>
            <returns>
                If the function succeeds, the return value is a handle to the previous parent window.
                <para>
                    If the function fails, the return value is NULL.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetProcessWorkingSetSize(System.IntPtr,System.UIntPtr,System.UIntPtr)">
            <summary>
                Sets the minimum and maximum working set sizes for the specified process.
            </summary>
            <param name="hProcess">
                A handle to the process whose working set sizes is to be set.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessSetQuota"/> access right.
                </para>
            </param>
            <param name="dwMinimumWorkingSetSize">
                The minimum working set size for the process, in bytes. The virtual memory manager attempts
                to keep at least this much memory resident in the process whenever the process is active.
                <para>
                    This parameter must be greater than zero but less than or equal to the maximum working
                    set size. The default size is 50 pages (for example, this is 204,800 bytes on systems
                    with a 4K page size). If the value is greater than zero but less than 20 pages, the
                    minimum value is set to 20 pages.
                </para>
                <para>
                    If both dwMinimumWorkingSetSize and dwMaximumWorkingSetSize have the value (SIZE_T)–1,
                    the function removes as many pages as possible from the working set of the specified
                    process.
                </para>
            </param>
            <param name="dwMaximumWorkingSetSize">
                The maximum working set size for the process, in bytes. The virtual memory manager attempts
                to keep no more than this much memory resident in the process whenever the process is active
                and available memory is low.
                <para>
                    This parameter must be greater than or equal to 13 pages (for example, 53,248 on systems
                    with a 4K page size), and less than the system-wide maximum (number of available pages
                    minus 512 pages). The default size is 345 pages (for example, this is 1,413,120 bytes on
                    systems with a 4K page size).
                </para>
                <para>
                    If both dwMinimumWorkingSetSize and dwMaximumWorkingSetSize have the value (SIZE_T)–1,
                    the function removes as many pages as possible from the working set of the specified
                    process.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetTimer(System.IntPtr,System.UIntPtr,System.UInt32,SilDev.WinApi.TimerProc)">
            <summary>
                Creates a timer with the specified time-out value.
            </summary>
            <param name="hWnd">
                A handle to the window to be associated with the timer. This window must be owned by the calling
                thread. If a NULL value for hWnd is passed in along with an nIDEvent of an existing timer, that
                timer will be replaced in the same way that an existing non-NULL hWnd timer will be.
            </param>
            <param name="nIdEvent">
                A nonzero timer identifier. If the hWnd parameter is NULL, and the nIDEvent does not match an
                existing timer then it is ignored and a new timer ID is generated. If the hWnd parameter is not
                NULL and the window specified by hWnd already has a timer with the value nIDEvent, then the
                existing timer is replaced by the new timer. When SetTimer replaces a timer, the timer is reset.
                Therefore, a message will be sent after the current time-out value elapses, but the previously
                set time-out value is ignored. If the call is not intended to replace an existing timer, nIDEvent
                should be 0 if the hWnd is NULL.
            </param>
            <param name="uElapse">
                The time-out value, in milliseconds.
            </param>
            <param name="lpTimerFunc">
                A pointer to the function to be notified when the time-out value elapses.
            </param>
            <returns>
                If the function succeeds and the hWnd parameter is NULL, the return value is an integer
                identifying the new timer. An application can pass this value to the KillTimer function to destroy
                the timer.
                <para>
                    If the function succeeds and the hWnd parameter is not NULL, then the return value is a nonzero
                    integer. An application can pass the value of the nIDEvent parameter to the KillTimer function
                    to destroy the timer.
                </para>
                <para>
                    If the function fails to create a timer, the return value is zero.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowLong(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
                Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the
                specified offset into the extra window memory.
            </summary>
            <param name="hWnd">
                A handle to the window and, indirectly, the class to which the window belongs.
            </param>
            <param name="nIndex">
                The zero-based offset to the value to be set. Valid values are in the range zero through the number
                of bytes of extra window memory, minus the size of an integer.
            </param>
            <param name="dwNewLong">
                The replacement value.
            </param>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowPlacement(System.IntPtr,SilDev.WinApi.WindowPlacement@)">
            <summary>
                Sets the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="lpwndpl">
                A pointer to a <see cref="T:SilDev.WinApi.WindowPlacement"/> structure that specifies the new show state and window
                positions.
                <para>
                    Before calling SetWindowPlacement, set the length member of the <see cref="T:SilDev.WinApi.WindowPlacement"/>
                    structure to sizeof(<see cref="T:SilDev.WinApi.WindowPlacement"/>). SetWindowPlacement fails if the length
                    member is not set correctly.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SilDev.WinApi.SetWindowPosFlags)">
            <summary>
                Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are
                ordered according to their appearance on the screen. The topmost window receives the highest rank
                and is the first window in the Z order.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="hWndInsertAfter">
                A handle to the window to precede the positioned window in the Z order. This parameter must be a
                window handle or one of the following values.
                <para>
                    <c>
                        HWND_BOTTOM ((HWND)1):
                    </c>
                    Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost
                    window, the window loses its topmost status and is placed at the bottom of all other windows.
                </para>
                <para>
                    <c>
                        HWND_NOTOPMOST ((HWND)-2):
                    </c>
                    Places the window above all non-topmost windows (that is, behind all topmost windows). This
                    flag has no effect if the window is already a non-topmost window.
                </para>
                <para>
                    <c>
                        HWND_TOP ((HWND)0):
                    </c>
                    Places the window at the top of the Z order.
                </para>
                <para>
                    <c>
                        HWND_TOPMOST ((HWND)-1):
                    </c>
                    Places the window above all non-topmost windows. The window maintains its topmost position even
                    when it is deactivated.
                </para>
            </param>
            <param name="x">
                The new position of the left side of the window, in client coordinates.
            </param>
            <param name="y">
                The new position of the top of the window, in client coordinates.
            </param>
            <param name="cx">
                The new width of the window, in pixels.
            </param>
            <param name="cy">
                The new height of the window, in pixels.
            </param>
            <param name="uFlags">
                The window sizing and positioning flags.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowsHookEx(SilDev.WinApi.Win32HookFlags,SilDev.WinApi.HookProc,System.IntPtr,System.Int32)">
            <summary>
                Installs an application-defined hook procedure into a hook chain. You would install a hook
                procedure to monitor the system for certain types of events. These events are associated
                either with a specific thread or with all threads in the same desktop as the calling thread.
            </summary>
            <param name="idHook">
                The type of hook procedure to be installed.
            </param>
            <param name="lpfn">
                A pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier
                of a thread created by a different process, the lpfn parameter must point to a hook procedure in
                a DLL. Otherwise, lpfn can point to a hook procedure in the code associated with the current
                process.
            </param>
            <param name="hMod">
                A handle to the DLL containing the hook procedure pointed to by the lpfn parameter. The hMod
                parameter must be set to NULL if the dwThreadId parameter specifies a thread created by the current
                process and if the hook procedure is within the code associated with the current process.
            </param>
            <param name="dwThreadId">
                The identifier of the thread with which the hook procedure is to be associated. For desktop apps,
                if this parameter is zero, the hook procedure is associated with all existing threads running in the
                same desktop as the calling thread. For Windows Store apps, see the Remarks section.
            </param>
            <returns>
                If the function succeeds, the return value is the handle to the hook procedure. If the function
                fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SetWindowText(System.IntPtr,System.String)">
            <summary>
                Changes the text of the specified window's title bar (if it has one). If the specified window is a
                control, the text of the control is changed. However, SetWindowText cannot change the text of a control
                in another application.
            </summary>
            <param name="hWnd">
                A handle to the window or control whose text is to be changed.
            </param>
            <param name="lpString">
                The new title or control text.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SHAppBarMessage(SilDev.WinApi.AppBarMessageOptions,SilDev.WinApi.AppBarData@)">
            <summary>
                Sends an appbar message to the system.
            </summary>
            <param name="dwMessage">
                Appbar message value to send.
            </param>
            <param name="pData">
                A pointer to an <see cref="T:SilDev.WinApi.AppBarData"/> structure. The content of the structure on entry and on exit
                depends on the value set in the dwMessage parameter. See the individual message pages for specifics.
            </param>
            <returns>
                This function returns a message-dependent value. For more information, see the Windows SDK documentation
                for the specific appbar message sent. Links to those documents are given in the See Also section.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ShellExecute(System.IntPtr,System.String,System.String,System.String,System.String,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Performs an operation on a specified file.
            </summary>
            <param name="hWnd">
                A handle to the parent window used for displaying a UI or error messages. This value can be NULL if the
                operation is not associated with a window.
            </param>
            <param name="lpOperation">
                A pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to
                be performed. The set of available verbs depends on the particular file or folder. Generally, the
                actions available from an object's shortcut menu are available verbs.
            </param>
            <param name="lpFile">
                A pointer to a null-terminated string that specifies the file or object on which to execute the specified
                verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs
                are supported on all objects. For example, not all document types support the "print" verb. If a relative
                path is used for the lpDirectory parameter do not use a relative path for lpFile.
            </param>
            <param name="lpParameters">
                If lpFile specifies an executable file, this parameter is a pointer to a null-terminated string that
                specifies the parameters to be passed to the application. The format of this string is determined by the
                verb that is to be invoked. If lpFile specifies a document file, lpParameters should be NULL.
            </param>
            <param name="lpDirectory">
                A pointer to a null-terminated string that specifies the default (working) directory for the action. If
                this value is NULL, the current working directory is used. If a relative path is provided at lpFile, do
                not use a relative path for lpDirectory.
            </param>
            <param name="nShowCmd">
                The flags that specify how an application is to be displayed when it is opened. If lpFile specifies a
                document file, the flag is simply passed to the associated application. It is up to the application to
                decide how to handle it.
            </param>
            <returns>
                If the function succeeds, it returns a value greater than 32. If the function fails, it returns an error
                value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward
                compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.SHGetFileInfo(System.String,System.UInt32,SilDev.WinApi.ShFileInfo@,System.UInt32,SilDev.WinApi.FileInfoFlags)">
            <summary>
                Retrieves information about an object in the file system, such as a file, folder, directory, or
                drive root.
            </summary>
            <param name="pszPath">
                A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file
                name. Both absolute and relative paths are valid.
                <para>
                    If the uFlags parameter includes the <see cref="F:SilDev.WinApi.FileInfoFlags.PidL"/> flag, this parameter must
                    be the address of an ITEMIDLIST (PIDL) structure that contains the list of item identifiers that
                    uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL.
                    Relative PIDLs are not allowed.
                </para>
                <para>
                    If the uFlags parameter includes the <see cref="F:SilDev.WinApi.FileInfoFlags.UseFileAttributes"/> flag, this
                    parameter does not have to be a valid file name. The function will proceed as if the file exists
                    with the specified name and with the file attributes passed in the dwFileAttributes parameter. This
                    allows you to obtain information about a file type by passing just the extension for pszPath and
                    passing <see cref="F:System.IO.FileAttributes.Normal"/> in dwFileAttributes.
                </para>
                <para>
                    This string can use either short (the 8.3 form) or long file names.
                </para>
            </param>
            <param name="dwFileAttributes">
                A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values as defined in Winnt.h). If
                uFlags does not include the <see cref="F:SilDev.WinApi.FileInfoFlags.UseFileAttributes"/> flag, this parameter is
                ignored.
            </param>
            <param name="psfi">
                Pointer to a <see cref="T:SilDev.WinApi.ShFileInfo"/> structure to receive the file information.
            </param>
            <param name="cbFileInfo">
                The size, in bytes, of the <see cref="T:SilDev.WinApi.ShFileInfo"/> structure pointed to by the psfi parameter.
            </param>
            <param name="uFlags">
                The flags that specify the file information to retrieve.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ShowScrollBar(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
                The ShowScrollBar function shows or hides the specified scroll bar.
            </summary>
            <param name="hWnd">
                Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the
                wBar parameter.
            </param>
            <param name="wBar">
                Specifies the scroll bar(s) to be shown or hidden.
            </param>
            <param name="bShow">
                Specifies whether the scroll bar is shown or hidden. If this parameter is TRUE, the scroll bar is shown;
                otherwise, it is hidden.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ShowWindow(System.IntPtr,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Sets the specified window's show state.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="nCmdShow">
                Controls how the window is to be shown. This parameter is ignored the first time an application calls
                ShowWindow, if the program that launched the application provides a STARTUPINFO structure. Otherwise,
                the first time ShowWindow is called, the value should be the value obtained by the WinMain function in
                its nCmdShow parameter.
            </param>
            <returns>
                If the window was previously visible, the return value is nonzero.
                <para>
                    If the window was previously hidden, the return value is zero.
                </para>
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.ShowWindowAsync(System.IntPtr,SilDev.WinApi.ShowWindowFlags)">
            <summary>
                Sets the show state of a window without waiting for the operation to complete.
            </summary>
            <param name="hWnd">
                A handle to the window.
            </param>
            <param name="nCmdShow">
                Controls how the window is to be shown. For a list of possible values, see the description of the
                ShowWindow function.
            </param>
            <returns>
                If the operation was successfully started, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.StartService(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Starts a service.
            </summary>
            <param name="hService">
                A handle to the service. This handle is returned by the OpenService or CreateService function,
                and it must have the <see cref="F:SilDev.WinApi.ServiceAccessRights.Start"/> access right.
            </param>
            <param name="dwNumServiceArgs">
                The number of strings in the lpServiceArgVectors array. If lpServiceArgVectors is NULL, this
                parameter can be zero.
            </param>
            <param name="lpServiceArgVectors">
                The null-terminated strings to be passed to the ServiceMain function for the service as arguments.
                If there are no arguments, this parameter can be NULL. Otherwise, the first argument
                (lpServiceArgVectors[0]) is the name of the service, followed by any additional arguments
                (lpServiceArgVectors[1] through lpServiceArgVectors[dwNumServiceArgs-1]).
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.TerminateProcess(System.IntPtr,System.UInt32)">
            <summary>
                Terminates the specified process and all of its threads.
            </summary>
            <param name="hProcess">
                A handle to the process to be terminated.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessTerminate"/> access right.
                </para>
            </param>
            <param name="uExitCode">
                The exit code to be used by the process and threads terminated as a result of this call.
                Use the GetExitCodeProcess function to retrieve a process's exit value. Use the
                GetExitCodeThread function to retrieve a thread's exit value.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.timeBeginPeriod(System.UInt32)">
            <summary>
                The timeBeginPeriod function requests a minimum resolution for periodic timers.
            </summary>
            <param name="uPeriod">
                Minimum timer resolution, in milliseconds, for the application or device driver. A lower value
                specifies a higher (more accurate) resolution.
            </param>
            <returns>
                Returns TIMERR_NOERROR if successful or TIMERR_NOCANDO if the resolution specified in uPeriod
                is out of range.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.timeEndPeriod(System.UInt32)">
            <summary>
                The timeEndPeriod function clears a previously set minimum timer resolution.
            </summary>
            <param name="uPeriod">
                Minimum timer resolution specified in the previous call to the timeBeginPeriod function.
            </param>
            <returns>
                Returns TIMERR_NOERROR if successful or TIMERR_NOCANDO if the resolution specified in uPeriod
                is out of range.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
                Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.
            </summary>
            <param name="hhk">
                A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call
                SetWindowsHookEx.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero. If the function fails, the return value
                is zero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.VirtualAllocEx(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.MemAllocTypes,SilDev.WinApi.MemProtectFlags)">
            <summary>
                Reserves, commits, or changes the state of a region of memory within the virtual address space
                of a specified process. The function initializes the memory it allocates to zero.
            </summary>
            <param name="hProcess">
                The handle to a process. The function allocates memory within the virtual address
                space of this process.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/> access
                    right.
                </para>
            </param>
            <param name="lpAddress">
                The pointer that specifies a desired starting address for the region of pages
                that you want to allocate.
            </param>
            <param name="dwSize">
                The size of the region of memory to allocate, in bytes.
            </param>
            <param name="flAllocationType">
                The type of memory allocation. This parameter must contain one of the following values.
            </param>
            <param name="flProtect">
                The memory protection for the region of pages to be allocated.
            </param>
            <returns>
                If the function succeeds, the return value is the base address of the allocated region
                of pages.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.VirtualFreeEx(System.IntPtr,System.IntPtr,System.IntPtr,SilDev.WinApi.MemFreeTypes)">
            <summary>
                Releases, decommits, or releases and decommits a region of memory within the virtual address
                space of a specified process.
            </summary>
            <param name="hProcess">
                The handle to a process. The function allocates memory within the virtual address space of this
                process.
                <para>
                    The handle must have the <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/> access
                    right.
                </para>
            </param>
            <param name="lpAddress">
                A pointer to the starting address of the region of memory to be freed.
                <para>
                    If the dwFreeType parameter is <see cref="F:SilDev.WinApi.MemAllocTypes.Release"/>, lpAddress must be
                    the base address returned by the VirtualAllocEx function when the region is reserved.
                </para>
            </param>
            <param name="dwSize">
                The size of the region of memory to free, in bytes.
                <para>
                    If the dwFreeType parameter is <see cref="F:SilDev.WinApi.MemAllocTypes.Release"/>, dwSize must
                    be 0 (zero). The function frees the entire region that is reserved in the initial
                    allocation call to VirtualAllocEx.
                </para>
                <para>
                    If dwFreeType is <see cref="F:SilDev.WinApi.MemAllocTypes.Decommit"/>, the function decommits all memory
                    pages that contain one or more bytes in the range from the lpAddress parameter to
                    (lpAddress+dwSize). This means, for example, that a 2-byte region of memory that straddles a
                    page boundary causes both pages to be decommitted. If lpAddress is the base address returned by
                    VirtualAllocEx and dwSize is 0 (zero), the function decommits the entire region that is
                    allocated by VirtualAllocEx. After that, the entire region is in the reserved state.
                </para>
            </param>
            <param name="dwFreeType">
                The type of free operation.
            </param>
            <returns>
                If the function succeeds, the return value is a nonzero value.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.waveOutGetVolume(System.IntPtr,System.UInt32@)">
            <summary>
                The waveOutGetVolume function retrieves the current volume level of the specified waveform-audio
                output device.
            </summary>
            <param name="hwo">
                Handle to an open waveform-audio output device. This parameter can also be a device identifier.
            </param>
            <param name="dwVolume">
                Pointer to a variable to be filled with the current volume setting. The low-order word of
                this location contains the left-channel volume setting, and the high-order word contains the
                right-channel setting. A value of 0xFFFF represents full volume, and a value of 0x0 is silence.
            </param>
            <returns>
                Returns MMSYSERR_NOERROR if successful or an error otherwise.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.waveOutSetVolume(System.IntPtr,System.UInt32)">
            <summary>
                The waveOutSetVolume function sets the volume level of the specified waveform-audio output device.
            </summary>
            <param name="hwo">
                Handle to an open waveform-audio output device. This parameter can also be a device identifier.
            </param>
            <param name="dwVolume">
                New volume setting. The low-order word contains the left-channel volume setting, and the high-order
                word contains the right-channel setting. A value of 0xFFFF represents full volume, and a value of
                0x0 is silence.
            </param>
            <returns>
                Returns MMSYSERR_NOERROR if successful or an error otherwise.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
                Copies a string into the specified section of an initialization file.
            </summary>
            <param name="lpAppName">
                The name of the section to which the string will be copied. If the section does not exist, it is
                created. The name of the section is case-independent; the string can be any combination of uppercase
                and lowercase letters.
            </param>
            <param name="lpKeyName">
                The name of the key to be associated with a string. If the key does not exist in the specified section,
                it is created. If this parameter is NULL, the entire section, including all entries within the section,
                is deleted.
            </param>
            <param name="lpString">
                A null-terminated string to be written to the file. If this parameter is NULL, the key pointed to by the
                lpKeyName parameter is deleted.
            </param>
            <param name="lpFileName">
                The name of the initialization file.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="M:SilDev.WinApi.NativeMethods.WriteProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
                Writes data to an area of memory in a specified process. The entire area to be written to must be
                accessible or the operation fails.
            </summary>
            <param name="hProcess">
                A handle to the process memory to be modified. The handle must have
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmWrite"/> and
                <see cref="F:SilDev.WinApi.AccessRights.ProcessVmOperation"/> access to the process.
            </param>
            <param name="lpBaseAddress">
                A pointer to the base address in the specified process to which data is written. Before data transfer
                occurs, the system verifies that all data in the base address and memory of the specified size is
                accessible for write access, and if it is not accessible, the function fails.
            </param>
            <param name="lpBuffer">
                A pointer to the buffer that contains data to be written in the address space of the specified process.
            </param>
            <param name="nSize">
                The number of bytes to be written to the specified process.
            </param>
            <param name="lpNumberOfBytesWritten">
                A pointer to a variable that receives the number of bytes transferred into the specified process. This
                parameter is optional. If lpNumberOfBytesWritten is NULL, the parameter is ignored.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
            </returns>
        </member>
        <member name="T:SilDev.WinApi.ServiceStatus">
            <summary>
                Contains status information for a service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwCheckPoint">
            <summary>
                The check-point value the service increments periodically to report its progress during a
                lengthy start, stop, pause, or continue operation. For example, the service should increment
                this value as it completes each step of its initialization when it is starting up. The user
                interface program that invoked the operation on the service uses this value to track the
                progress of the service during a lengthy operation. This value is not valid and should be
                zero when the service does not have a start, stop, pause, or continue operation pending.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwControlsAccepted">
            <summary>
                The control codes the service accepts and processes in its handler function (see
                Handler and HandlerEx). A user interface process can control a service by specifying
                a control command in the ControlService or ControlServiceEx function. By default, all
                services accept the  value. To accept the SERVICE_CONTROL_DEVICEEVENT value, the service
                must register to receive device events by using the RegisterDeviceNotification function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwCurrentState">
            <summary>
                The current state of the service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwServiceSpecificExitCode">
            <summary>
                A service-specific error code that the service returns when an error occurs while the
                service is starting or stopping. This value is ignored unless the dwWin32ExitCode member
                is set to ERROR_SERVICE_SPECIFIC_ERROR.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwServiceType">
            <summary>
                The type of service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwWaitHint">
            <summary>
                The estimated time required for a pending start, stop, pause, or continue operation, in
                milliseconds. Before the specified amount of time has elapsed, the service should make its
                next call to the SetServiceStatus function with either an incremented dwCheckPoint value or
                a change in dwCurrentState. If the amount of time specified by dwWaitHint passes, and
                dwCheckPoint has not been incremented or dwCurrentState has not changed, the service control
                manager or service control program can assume that an error has occurred and the service
                should be stopped. However, if the service shares a process with other services, the service
                control manager cannot terminate the service application because it would have to terminate
                the other services sharing the process as well.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ServiceStatus.dwWin32ExitCode">
            <summary>
                The error code the service uses to report an error that occurs when it is starting or
                stopping. To return an error code specific to the service, the service must set this
                value to ERROR_SERVICE_SPECIFIC_ERROR to indicate that the dwServiceSpecificExitCode
                member contains the error code. The service should set this value to NO_ERROR when it
                is running and on normal termination.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.AppBarData">
            <summary>
                Contains information about a system appbar message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarData.cbSize">
            <summary>
                The size of the structure, in bytes.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarData.hWnd">
            <summary>
                The handle to the appbar window. Not all messages use this member. See the individual message
                page to see if you need to provide an hWind value.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarData.uCallbackMessage">
            <summary>
                An application-defined message identifier. The application uses the specified identifier for
                notification messages that it sends to the appbar identified by the hWnd member.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarData.uEdge">
            <summary>
                A value that specifies an edge of the screen.
                <para>
                    This member is used when sending one of these messages:
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.GetAutoHideBar"/>
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.SetAutoHideBar"/>
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.GetAutoHideBarEx"/>
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.SetAutoHideBarEx"/>
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.QueryPos"/>
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.SetPos"/>.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarData.rc">
            <summary>
                A <see cref="T:System.Drawing.Rectangle"/> structure whose use varies depending on the message:
                <para>
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.GetTaskBarPos"/>,
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.QueryPos"/>,
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.SetPos"/>: The bounding rectangle, in screen
                    coordinates, of an appbar or the Windows taskbar.
                </para>
                <para>
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.GetAutoHideBarEx"/>,
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.SetAutoHideBarEx"/>,
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.SetPos"/>: The monitor on which the operation
                    is being performed.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.AppBarData.lParam">
            <summary>
                A message-dependent value. This member is used with these messages:
                <para>
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.SetAutoHideBar"/>: Registers or unregisters an
                    autohide appbar for a given edge of the screen. If the system has multiple monitors,
                    the monitor that contains the primary taskbar is used.
                </para>
                <para>
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.SetAutoHideBarEx"/>: Registers or unregisters an
                    autohide appbar for a given edge of the screen. This message extends
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.SetAutoHideBar"/> by enabling you to specify a
                    particular monitor, for use in multiple monitor situations.
                </para>
                <para>
                    <see cref="F:SilDev.WinApi.AppBarMessageOptions.SetState"/>: Sets the autohide and always-on-top
                    states of the Windows taskbar.
                </para>
            </summary>
        </member>
        <member name="M:SilDev.WinApi.AppBarData.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.WinApi.AppBarData"/>.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.CallWndProcRet">
            <summary>
                Defines the message parameters passed to a <see cref="F:SilDev.WinApi.Win32HookFlags.WhCallWndProcRet"/>
                hook procedure.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CallWndProcRet.lResult">
            <summary>
                The return value of the window procedure that processed the message specified by
                the message value.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CallWndProcRet.lParam">
            <summary>
                Additional information about the message. The exact meaning depends on the message
                value.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CallWndProcRet.wParam">
            <summary>
                Additional information about the message. The exact meaning depends on the message
                value.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CallWndProcRet.message">
            <summary>
                The message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CallWndProcRet.hwnd">
            <summary>
                A handle to the window that processed the message specified by the message value.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.CopyData">
            <summary>
                Contains data to be passed to another application by the
                <see cref="F:SilDev.WinApi.WindowMenuFlags.WmCopyData"/> message.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CopyData.dwData">
            <summary>
                The data to be passed to the receiving application.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CopyData.cbData">
            <summary>
                The size, in bytes, of the data pointed to by the lpData member.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.CopyData.lpData">
            <summary>
                The data to be passed to the receiving application. This member can be NULL.
            </summary>
        </member>
        <member name="M:SilDev.WinApi.CopyData.Dispose">
            <summary>
                Releases all resources used by this <see cref="T:SilDev.WinApi.CopyData"/>.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.DeviceInput">
            <summary>
                Used by <see cref="M:SilDev.WinApi.NativeMethods.SendInput(System.UInt32,SilDev.WinApi.DeviceInput[],System.Int32)"/> to store
                information for synthesizing input events such as keystrokes, mouse movement, and
                mouse clicks.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DeviceInput.Type">
            <summary>
                The type of the input event. This member can be one of the following values.
                <para>
                    0: The event is a mouse event. Use the mi structure of the union.
                </para>
                <para>
                    1: The event is a keyboard event. Use the ki structure of the union.
                </para>
                <para>
                    2: The event is a hardware event. Use the hi structure of the union.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.DeviceInput.Data">
            <summary>
                The information about a simulated mouse, keyboard or hardware event.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.DllNames">
            <summary>
                Contains the names of the used Windows dynamic-link library (DLL) files.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.MouseInput">
            <summary>
                Stores information about a simulated mouse event.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MouseInput.X">
            <summary>
                The absolute position of the mouse, or the amount of motion since the last mouse event
                was generated, depending on the value of the dwFlags member. Absolute data is specified
                as the x coordinate of the mouse; relative data is specified as the number of pixels moved.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MouseInput.Y">
            <summary>
                The absolute position of the mouse, or the amount of motion since the last mouse event
                was generated, depending on the value of the dwFlags member. Absolute data is specified as
                the y coordinate of the mouse; relative data is specified as the number of pixels moved.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MouseInput.MouseData">
            <summary>
                If dwFlags contains MOUSEEVENTF_WHEEL, then mouseData specifies the amount of wheel movement.
                A positive value indicates that the wheel was rotated forward, away from the user; a negative
                value indicates that the wheel was rotated backward, toward the user. One wheel click is
                defined as WHEEL_DELTA, which is 120.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MouseInput.Flags">
            <summary>
                A set of bit flags that specify various aspects of mouse motion and button clicks. The bits
                in this member can be any reasonable combination of the following values.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MouseInput.Time">
            <summary>
                The time stamp for the event, in milliseconds. If this parameter is 0, the system will provide
                its own time stamp.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.MouseInput.ExtraInfo">
            <summary>
                An additional value associated with the mouse event. An application calls GetMessageExtraInfo
                to obtain this extra information.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.MouseKeyboardHardwareInput">
            <summary>
                Stores information about a simulated mouse, keyboard or hardware event.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ProcessBasicInformation">
            <summary>
                Contains basic information about a process.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ThemeMargins">
            <summary>
                Returned by the GetThemeMargins function to define the margins of windows that have visual
                styles applied.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ThemeMargins.cxLeftWidth">
            <summary>
                Width of the left border that retains its size.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ThemeMargins.cxRightWidth">
            <summary>
                Width of the right border that retains its size.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ThemeMargins.cyTopHeight">
            <summary>
                Height of the top border that retains its size.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ThemeMargins.cyBottomHeight">
            <summary>
                Height of the bottom border that retains its size.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.WindowPlacement">
            <summary>
                Contains information about the placement of a window on the screen.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacement.length">
            <summary>
                The length of the structure, in bytes.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacement.flags">
            <summary>
                The flags that control the position of the minimized window and the method by which
                the window is restored.
                <para>
                    This member can be one or more of the <see cref="T:SilDev.WinApi.WindowPlacementFlags"/> values.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacement.showCmd">
            <summary>
                The current show state of the window.
                <para>
                    This member can be one of the <see cref="T:SilDev.WinApi.ShowWindowFlags"/> values.
                </para>
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacement.ptMinPosition">
            <summary>
                The coordinates of the window's upper-left corner when the window is minimized.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacement.ptMaxPosition">
            <summary>
                The coordinates of the window's upper-left corner when the window is maximized.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.WindowPlacement.rcNormalPosition">
            <summary>
                The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.DwmColorizationParams">
            <summary>
                Contains information about the colorization of Windows.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.RmProcessInfo">
            <summary>
                Describes an application that is to be registered with the Restart Manager.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.Process">
            <summary>
                Contains an RM_UNIQUE_PROCESS structure that uniquely identifies the application
                by its PID and the time the process began.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.strAppName">
            <summary>
                If the process is a service, this parameter returns the long name for the service. If
                the process is not a service, this parameter returns the user-friendly name for the
                application. If the process is a critical process, and the installer is run with
                elevated privileges, this parameter returns the name of the executable file of the
                critical process. If the process is a critical process, and the installer is run as a
                service, this parameter returns the long name of the critical process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.strServiceShortName">
            <summary>
                If the process is a service, this is the short name for the service. This member is
                not used if the process is not a service.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.ApplicationType">
            <summary>
                Contains an RM_APP_TYPE enumeration value that specifies the type of application as
                RmUnknownApp, RmMainWindow, RmOtherWindow, RmService, RmExplorer or RmCritical.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.AppStatus">
            <summary>
                Contains a bit mask that describes the current status of the application. See the
                RM_APP_STATUS enumeration.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.TSSessionId">
            <summary>
                Contains the Terminal Services session ID of the process. If the terminal session of
                the process cannot be determined, the value of this member is set to RM_INVALID_SESSION
                (-1). This member is not used if the process is a service or a system critical process.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmProcessInfo.bRestartable">
            <summary>
                TRUE if the application can be restarted by the Restart Manager; otherwise, FALSE. This
                member is always TRUE if the process is a service. This member is always FALSE if the
                process is a critical system process.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.RmUniqueProcess">
            <summary>
                Uniquely identifies a process by its PID and the time the process began. An array of
                RM_UNIQUE_PROCESS structures can be passed to the RmRegisterResources function.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmUniqueProcess.dwProcessId">
            <summary>
                The product identifier (PID).
            </summary>
        </member>
        <member name="F:SilDev.WinApi.RmUniqueProcess.ProcessStartTime">
            <summary>
                The creation time of the process. The time is provided as a FILETIME structure that is
                returned by the lpCreationTime parameter of the GetProcessTimes function.
            </summary>
        </member>
        <member name="T:SilDev.WinApi.ShFileInfo">
            <summary>
                Contains information about a file object.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShFileInfo.hIcon">
            <summary>
                A handle to the icon that represents the file. You are responsible for destroying this handle
                with DestroyIcon when you no longer need it.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShFileInfo.iIcon">
            <summary>
                The index of the icon image within the system image list.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShFileInfo.dwAttributes">
            <summary>
                An array of values that indicates the attributes of the file object. For information about these
                values, see the IShellFolder::GetAttributesOf method.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShFileInfo.szDisplayName">
            <summary>
                A string that contains the name of the file as it appears in the Windows Shell, or the path and
                file name of the file that contains the icon representing the file.
            </summary>
        </member>
        <member name="F:SilDev.WinApi.ShFileInfo.szTypeName">
            <summary>
                A string that describes the type of file.
            </summary>
        </member>
    </members>
</doc>
